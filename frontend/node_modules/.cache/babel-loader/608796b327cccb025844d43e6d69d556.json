{"ast":null,"code":"import { createPluginFactory, getPluginType, ELEMENT_DEFAULT, getPluginInjectProps, unsetNodes, setNodes } from '@udecode/plate-core';\nimport { Editor } from 'slate';\nconst KEY_LINE_HEIGHT = 'lineHeight';\n/**\n * Enables support for text alignment, useful to align your content\n * to left, right and center it.\n */\n\nconst createLineHeightPlugin = createPluginFactory({\n  key: KEY_LINE_HEIGHT,\n  inject: {\n    props: {\n      nodeKey: KEY_LINE_HEIGHT,\n      defaultNodeValue: 1.5\n    }\n  },\n  then: editor => ({\n    inject: {\n      props: {\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]\n      }\n    }\n  })\n});\n\nconst setLineHeight = (editor, {\n  value,\n  setNodesOptions\n}) => {\n  const {\n    validTypes,\n    defaultNodeValue,\n    nodeKey\n  } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);\n\n  const match = n => Editor.isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey, {\n      match,\n      ...setNodesOptions\n    });\n  } else {\n    setNodes(editor, {\n      [nodeKey]: value\n    }, {\n      match,\n      ...setNodesOptions\n    });\n  }\n};\n\nexport { KEY_LINE_HEIGHT, createLineHeightPlugin, setLineHeight };","map":{"version":3,"sources":["../src/createLineHeightPlugin.ts","../src/transforms/setLineHeight.ts"],"names":["KEY_LINE_HEIGHT","createLineHeightPlugin","createPluginFactory","key","inject","props","nodeKey","defaultNodeValue","then","editor","validTypes","getPluginType","setLineHeight","setNodesOptions","getPluginInjectProps","match","n","Editor","value","unsetNodes","setNodes"],"mappings":";;MAMaA,eAAe,GAAG,Y;AAE/B;AACA;AACA;AACA;;MACaC,sBAAsB,GAAGC,mBAAmB,CAAC;AACxDC,EAAAA,GAAG,EADqD,eAAA;AAExDC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EADF,eAAA;AAELC,MAAAA,gBAAgB,EAAE;AAFb;AADD,GAFgD;AAQxDC,EAAAA,IAAI,EAAGC,MAAD,KAAa;AACjBL,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AACLK,QAAAA,UAAU,EAAE,CAACC,aAAa,CAAA,MAAA,EAAd,eAAc,CAAd;AADP;AADD;AADS,GAAb;AARkD,CAAD,C;;MCD5CC,aAAa,GAAG,CAAA,MAAA,EAE3B;AAAA,EAAA,KAAA;AAEEC,EAAAA;AAFF,CAF2B,KAMlB;AACT,QAAM;AAAA,IAAA,UAAA;AAAA,IAAA,gBAAA;AAAgCP,IAAAA;AAAhC,MAA4CQ,oBAAoB,CAAA,MAAA,EAAtE,eAAsE,CAAtE;;AAKA,QAAMC,KAAiB,GAAIC,CAAD,IACxBC,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAAA,CAAAA,KAA6B,CAAC,CAA9BA,UAAAA,IAA6CP,UAAU,CAAVA,QAAAA,CAAoBM,CAAC,CADpE,IAC+CN,CAD/C;;AAGA,MAAIQ,KAAK,KAAT,gBAAA,EAAgC;AAC9BC,IAAAA,UAAU,CAAA,MAAA,EAAA,OAAA,EAAmB;AAAA,MAAA,KAAA;AAE3B,SAAGN;AAFwB,KAAnB,CAAVM;AADF,GAAA,MAKO;AACLC,IAAAA,QAAQ,CAAA,MAAA,EAEN;AAAE,OAAA,OAAA,GAAYF;AAAd,KAFM,EAGN;AAAA,MAAA,KAAA;AAEE,SAAGL;AAFL,KAHM,CAARO;AAQD;AACF,C","sourcesContent":["import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\n\nexport const KEY_LINE_HEIGHT = 'lineHeight';\n\n/**\n * Enables support for text alignment, useful to align your content\n * to left, right and center it.\n */\nexport const createLineHeightPlugin = createPluginFactory({\n  key: KEY_LINE_HEIGHT,\n  inject: {\n    props: {\n      nodeKey: KEY_LINE_HEIGHT,\n      defaultNodeValue: 1.5,\n    },\n  },\n  then: (editor) => ({\n    inject: {\n      props: {\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n  }),\n});\n","import {\n  getPluginInjectProps,\n  PlateEditor,\n  setNodes,\n  SetNodesOptions,\n  TNodeMatch,\n  unsetNodes,\n} from '@udecode/plate-core';\nimport { Editor } from 'slate';\nimport { KEY_LINE_HEIGHT } from '../createLineHeightPlugin';\n\nexport const setLineHeight = (\n  editor: PlateEditor,\n  {\n    value,\n    setNodesOptions,\n  }: { value: number; setNodesOptions?: SetNodesOptions }\n): void => {\n  const { validTypes, defaultNodeValue, nodeKey } = getPluginInjectProps(\n    editor,\n    KEY_LINE_HEIGHT\n  );\n\n  const match: TNodeMatch = (n) =>\n    Editor.isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setNodes(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
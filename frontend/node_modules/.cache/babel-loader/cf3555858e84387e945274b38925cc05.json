{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { usePlateEditorState, getPluginInjectProps, isCollapsed, someNode } from '@udecode/plate-core';\nimport { KEY_LINE_HEIGHT, setLineHeight } from '@udecode/plate-line-height';\nimport { ToolbarDropdown, ToolbarButton } from '@udecode/plate-toolbar';\nimport { ReactEditor } from 'slate-react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst LineHeightToolbarDropdown = props => {\n  const [open, setOpen] = React.useState(false);\n  const editor = usePlateEditorState();\n  const {\n    validNodeValues\n  } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);\n  const onToggle = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n  const selectHandler = useCallback(lineHeight => {\n    if (editor) {\n      ReactEditor.focus(editor);\n      setLineHeight(editor, {\n        value: lineHeight\n      });\n    }\n  }, [editor]);\n  return /*#__PURE__*/React.createElement(ToolbarDropdown, {\n    control: /*#__PURE__*/React.createElement(ToolbarButton, _extends({\n      active: isCollapsed(editor === null || editor === void 0 ? void 0 : editor.selection) && someNode(editor, {\n        match: n => n[KEY_LINE_HEIGHT] !== undefined\n      })\n    }, props)),\n    open: open,\n    onOpen: onToggle,\n    onClose: onToggle\n  }, validNodeValues && validNodeValues.map(lineHeight => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      cursor: 'pointer'\n    },\n    key: lineHeight,\n    onClick: () => selectHandler(lineHeight)\n  }, lineHeight)));\n};\n\nexport { LineHeightToolbarDropdown };","map":{"version":3,"sources":["../src/LineHeightToolbarButton/LineHeightToolbarDropdown.tsx"],"names":["LineHeightToolbarDropdown","props","React","editor","usePlateEditorState","validNodeValues","getPluginInjectProps","onToggle","useCallback","setOpen","selectHandler","lineHeight","ReactEditor","setLineHeight","value","isCollapsed","someNode","match","n","undefined","cursor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;MAeaA,yBAAyB,GAAIC,KAAD,IAA+B;AACtE,QAAM,CAAA,IAAA,EAAA,OAAA,IAAkBC,KAAK,CAALA,QAAAA,CAAxB,KAAwBA,CAAxB;AACA,QAAMC,MAAM,GAAGC,mBAAf,EAAA;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAsBC,oBAAoB,CAAA,MAAA,EAAhD,eAAgD,CAAhD;AAEA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCC,IAAAA,OAAO,CAAC,CAARA,IAAO,CAAPA;AAD0B,GAAA,EAEzB,CAAA,IAAA,EAFH,OAEG,CAFyB,CAA5B;AAIA,QAAMC,aAAa,GAAGF,WAAW,CAC9BG,UAAD,IAAgB;AACd,QAAA,MAAA,EAAY;AACVC,MAAAA,WAAW,CAAXA,KAAAA,CAAAA,MAAAA;AAEAC,MAAAA,aAAa,CAAA,MAAA,EAAS;AACpBC,QAAAA,KAAK,EAAEH;AADa,OAAT,CAAbE;AAGD;AAR4B,GAAA,EAU/B,CAVF,MAUE,CAV+B,CAAjC;AAaA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AACE,IAAA,OAAO,EAAA,aACL,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AACE,MAAA,MAAM,EACJE,WAAW,CAACZ,MAAD,KAAA,IAACA,IAAAA,MAAD,KAAA,KAAA,CAACA,GAAD,KAAA,CAACA,GAAAA,MAAM,CAAlBY,SAAW,CAAXA,IACAC,QAAQ,CAAA,MAAA,EAAU;AAChBC,QAAAA,KAAK,EAAGC,CAAD,IAAOA,CAAC,CAADA,eAAC,CAADA,KAAuBC;AADrB,OAAV;AAHZ,KAAA,EAFJ,KAEI,CAAA,CAFJ;AAYE,IAAA,IAAI,EAZN,IAAA;AAaE,IAAA,MAAM,EAbR,QAAA;AAcE,IAAA,OAAO,EAAEZ;AAdX,GAAA,EAgBGF,eAAe,IACd,eAAe,CAAf,GAAA,CAAqBM,UAAD,IAAA,aAClB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,KAAK,EAAE;AAAES,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,GAAG,EAFL,UAAA;AAGE,IAAA,OAAO,EAAE,MAAMV,aAAa,CAAA,UAAA;AAH9B,GAAA,EAnBR,UAmBQ,CADF,CAjBJ,CADF;AA6BD,C","sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  getPluginInjectProps,\n  isCollapsed,\n  someNode,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { KEY_LINE_HEIGHT, setLineHeight } from '@udecode/plate-line-height';\nimport {\n  ToolbarButton,\n  ToolbarButtonProps,\n  ToolbarDropdown,\n} from '@udecode/plate-toolbar';\nimport { ReactEditor } from 'slate-react';\n\nexport const LineHeightToolbarDropdown = (props: ToolbarButtonProps) => {\n  const [open, setOpen] = React.useState(false);\n  const editor = usePlateEditorState()!;\n\n  const { validNodeValues } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);\n\n  const onToggle = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  const selectHandler = useCallback(\n    (lineHeight) => {\n      if (editor) {\n        ReactEditor.focus(editor);\n\n        setLineHeight(editor, {\n          value: lineHeight,\n        });\n      }\n    },\n    [editor]\n  );\n\n  return (\n    <ToolbarDropdown\n      control={\n        <ToolbarButton\n          active={\n            isCollapsed(editor?.selection) &&\n            someNode(editor!, {\n              match: (n) => n[KEY_LINE_HEIGHT] !== undefined,\n            })\n          }\n          {...props}\n        />\n      }\n      open={open}\n      onOpen={onToggle}\n      onClose={onToggle}\n    >\n      {validNodeValues &&\n        validNodeValues.map((lineHeight) => (\n          <div\n            style={{ cursor: 'pointer' }}\n            key={lineHeight}\n            onClick={() => selectHandler(lineHeight)}\n          >\n            {lineHeight}\n          </div>\n        ))}\n    </ToolbarDropdown>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getPluginType, insertNodes, isUrl, getInjectedPlugins, pipeInsertDataQuery, createPluginFactory } from '@udecode/plate-core';\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: ''\n  };\n  const image = {\n    type: getPluginType(editor, ELEMENT_IMAGE),\n    url,\n    children: [text]\n  };\n  insertNodes(editor, image);\n};\n\nconst imageExtensions = ['ase', 'art', 'bmp', 'blp', 'cd5', 'cit', 'cpt', 'cr2', 'cut', 'dds', 'dib', 'djvu', 'egt', 'exif', 'gif', 'gpl', 'grf', 'icns', 'ico', 'iff', 'jng', 'jpeg', 'jpg', 'jfif', 'jp2', 'jps', 'lbm', 'max', 'miff', 'mng', 'msp', 'nitf', 'ota', 'pbm', 'pc1', 'pc2', 'pc3', 'pcf', 'pcx', 'pdn', 'pgm', 'PI1', 'PI2', 'PI3', 'pict', 'pct', 'pnm', 'pns', 'ppm', 'psb', 'psd', 'pdd', 'psp', 'px', 'pxm', 'pxr', 'qfx', 'raw', 'rle', 'sct', 'sgi', 'rgb', 'int', 'bw', 'tga', 'tiff', 'tif', 'vtf', 'xbm', 'xcf', 'xpm', '3dv', 'amf', 'ai', 'awg', 'cgm', 'cdr', 'cmx', 'dxf', 'e2d', 'egt', 'eps', 'fs', 'gbr', 'odg', 'svg', 'stl', 'vrml', 'x3d', 'sxd', 'v2d', 'vnd', 'wmf', 'emf', 'art', 'xar', 'png', 'webp', 'jxr', 'hdp', 'wdp', 'cur', 'ecw', 'iff', 'lbm', 'liff', 'nrrd', 'pam', 'pcx', 'pgf', 'sgi', 'rgb', 'rgba', 'bw', 'int', 'inta', 'sid', 'ras', 'sun', 'tga'];\n\nconst isImageUrl = url => {\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n/**\n * Allows for pasting images from clipboard.\n * Not yet: dragging and dropping images, selecting them through a file system dialog.\n * @param options.type\n * @param options.uploadImage\n */\n\n\nconst withImageUpload = (editor, plugin) => {\n  const {\n    options: {\n      uploadImage\n    }\n  } = plugin;\n  const {\n    insertData\n  } = editor;\n\n  editor.insertData = dataTransfer => {\n    const text = dataTransfer.getData('text/plain');\n    const {\n      files\n    } = dataTransfer;\n\n    if (files && files.length > 0) {\n      const injectedPlugins = getInjectedPlugins(editor, plugin);\n\n      if (!pipeInsertDataQuery(injectedPlugins, {\n        data: text,\n        dataTransfer\n      })) {\n        return insertData(dataTransfer);\n      }\n\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', async () => {\n            if (!reader.result) {\n              return;\n            }\n\n            const uploadedUrl = uploadImage ? await uploadImage(reader.result) : reader.result;\n            insertImage(editor, uploadedUrl);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(dataTransfer);\n    }\n  };\n\n  return editor;\n};\n\nconst ELEMENT_IMAGE = 'img';\n/**\n * Enables support for images.\n */\n\nconst createImagePlugin = createPluginFactory({\n  key: ELEMENT_IMAGE,\n  isElement: true,\n  isVoid: true,\n  withOverrides: withImageUpload,\n  then: (editor, {\n    type\n  }) => ({\n    deserializeHtml: {\n      getNode: el => ({\n        type,\n        url: el.getAttribute('src')\n      }),\n      validNodeName: 'IMG'\n    }\n  })\n});\nexport { ELEMENT_IMAGE, createImagePlugin, insertImage, isImageUrl, withImageUpload };","map":{"version":3,"sources":["../src/transforms/insertImage.ts","../src/utils/isImageUrl.ts","../src/withImageUpload.ts","../src/createImagePlugin.ts"],"names":["insertImage","text","image","type","getPluginType","children","insertNodes","imageExtensions","isImageUrl","url","isUrl","ext","withImageUpload","options","uploadImage","insertData","editor","dataTransfer","files","injectedPlugins","getInjectedPlugins","pipeInsertDataQuery","data","reader","file","mime","uploadedUrl","ELEMENT_IMAGE","createImagePlugin","createPluginFactory","key","isElement","isVoid","withOverrides","then","deserializeHtml","getNode","el","validNodeName"],"mappings":"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","sourcesContent":["import {\n  getPluginType,\n  insertNodes,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { ELEMENT_IMAGE } from '../createImagePlugin';\n\nexport const insertImage = (editor: PlateEditor, url: string | ArrayBuffer) => {\n  const text = { text: '' };\n  const image = {\n    type: getPluginType(editor, ELEMENT_IMAGE),\n    url,\n    children: [text],\n  };\n  insertNodes<TElement>(editor, image);\n};\n","import { isUrl } from '@udecode/plate-core';\n\nconst imageExtensions = [\n  'ase',\n  'art',\n  'bmp',\n  'blp',\n  'cd5',\n  'cit',\n  'cpt',\n  'cr2',\n  'cut',\n  'dds',\n  'dib',\n  'djvu',\n  'egt',\n  'exif',\n  'gif',\n  'gpl',\n  'grf',\n  'icns',\n  'ico',\n  'iff',\n  'jng',\n  'jpeg',\n  'jpg',\n  'jfif',\n  'jp2',\n  'jps',\n  'lbm',\n  'max',\n  'miff',\n  'mng',\n  'msp',\n  'nitf',\n  'ota',\n  'pbm',\n  'pc1',\n  'pc2',\n  'pc3',\n  'pcf',\n  'pcx',\n  'pdn',\n  'pgm',\n  'PI1',\n  'PI2',\n  'PI3',\n  'pict',\n  'pct',\n  'pnm',\n  'pns',\n  'ppm',\n  'psb',\n  'psd',\n  'pdd',\n  'psp',\n  'px',\n  'pxm',\n  'pxr',\n  'qfx',\n  'raw',\n  'rle',\n  'sct',\n  'sgi',\n  'rgb',\n  'int',\n  'bw',\n  'tga',\n  'tiff',\n  'tif',\n  'vtf',\n  'xbm',\n  'xcf',\n  'xpm',\n  '3dv',\n  'amf',\n  'ai',\n  'awg',\n  'cgm',\n  'cdr',\n  'cmx',\n  'dxf',\n  'e2d',\n  'egt',\n  'eps',\n  'fs',\n  'gbr',\n  'odg',\n  'svg',\n  'stl',\n  'vrml',\n  'x3d',\n  'sxd',\n  'v2d',\n  'vnd',\n  'wmf',\n  'emf',\n  'art',\n  'xar',\n  'png',\n  'webp',\n  'jxr',\n  'hdp',\n  'wdp',\n  'cur',\n  'ecw',\n  'iff',\n  'lbm',\n  'liff',\n  'nrrd',\n  'pam',\n  'pcx',\n  'pgf',\n  'sgi',\n  'rgb',\n  'rgba',\n  'bw',\n  'int',\n  'inta',\n  'sid',\n  'ras',\n  'sun',\n  'tga',\n];\n\nexport const isImageUrl = (url: string) => {\n  if (!isUrl(url)) return false;\n\n  const ext = new URL(url).pathname.split('.').pop() as string;\n\n  return imageExtensions.includes(ext);\n};\n","import {\n  getInjectedPlugins,\n  pipeInsertDataQuery,\n  WithOverride,\n} from '@udecode/plate-core';\nimport { insertImage } from './transforms/insertImage';\nimport { isImageUrl } from './utils/isImageUrl';\nimport { ImagePlugin } from './types';\n\n/**\n * Allows for pasting images from clipboard.\n * Not yet: dragging and dropping images, selecting them through a file system dialog.\n * @param options.type\n * @param options.uploadImage\n */\nexport const withImageUpload: WithOverride<{}, ImagePlugin> = (\n  editor,\n  plugin\n) => {\n  const {\n    options: { uploadImage },\n  } = plugin;\n  const { insertData } = editor;\n\n  editor.insertData = (dataTransfer: DataTransfer) => {\n    const text = dataTransfer.getData('text/plain');\n    const { files } = dataTransfer;\n    if (files && files.length > 0) {\n      const injectedPlugins = getInjectedPlugins(editor, plugin);\n      if (!pipeInsertDataQuery(injectedPlugins, { data: text, dataTransfer })) {\n        return insertData(dataTransfer);\n      }\n\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', async () => {\n            if (!reader.result) {\n              return;\n            }\n            const uploadedUrl = uploadImage\n              ? await uploadImage(reader.result)\n              : reader.result;\n\n            insertImage(editor, uploadedUrl);\n          });\n\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(dataTransfer);\n    }\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { ImagePlugin } from './types';\nimport { withImageUpload } from './withImageUpload';\n\nexport const ELEMENT_IMAGE = 'img';\n\n/**\n * Enables support for images.\n */\nexport const createImagePlugin = createPluginFactory<ImagePlugin>({\n  key: ELEMENT_IMAGE,\n  isElement: true,\n  isVoid: true,\n  withOverrides: withImageUpload,\n  then: (editor, { type }) => ({\n    deserializeHtml: {\n      getNode: (el) => ({\n        type,\n        url: el.getAttribute('src'),\n      }),\n      validNodeName: 'IMG',\n    },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}
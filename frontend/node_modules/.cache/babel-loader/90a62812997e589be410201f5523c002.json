{"ast":null,"code":"import { createStyles, PortalBody } from '@udecode/plate-styled-components';\nimport _styled, { css } from 'styled-components';\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { usePlateEditorState, isSelectionExpanded, getSelectionText, someNode, getPreventDefaultHandler, toggleNodeType, isMarkActive, toggleMark } from '@udecode/plate-core';\nimport { usePopperPosition, getSelectionBoundingClientRect } from '@udecode/plate-popper';\nimport Tippy from '@tippyjs/react';\n\nconst getToolbarStyles = props => createStyles({\n  prefixClassNames: 'Toolbar',\n  ...props\n}, {\n  root: [{\n    \"display\": \"flex\",\n    \"alignItems\": \"center\",\n    \"userSelect\": \"none\",\n    \"boxSizing\": \"content-box\"\n  }, {\n    \"color\": \"rgb(68, 68, 68)\",\n    \"minHeight\": \"40px\"\n  }]\n});\n\nconst getBalloonToolbarStyles = props => {\n  var _props$popperOptions;\n\n  let color = 'rgb(157, 170, 182)';\n  let colorActive = 'white';\n  let background = 'rgb(36, 42, 49)';\n  let borderColor = 'transparent';\n\n  if (props.theme === 'light') {\n    color = 'rgba(0, 0, 0, 0.50)';\n    colorActive = 'black';\n    background = 'rgb(250, 250, 250)';\n    borderColor = 'rgb(196, 196, 196)';\n  }\n\n  const {\n    placement = 'top'\n  } = (_props$popperOptions = props.popperOptions) !== null && _props$popperOptions !== void 0 ? _props$popperOptions : {};\n  const arrowStyle = [props.arrow && css([\"::after{left:50%;content:' ';position:absolute;margin-top:-1px;transform:translateX(-50%);border-color:\", \" transparent;border-style:solid;}\"], background), props.arrow && placement.includes('top') && css([\"::after{top:100%;bottom:auto;border-width:8px 8px 0;}\"]), props.arrow && !placement.includes('top') && css([\"::after{top:auto;bottom:100%;border-width:0 8px 8px;}\"])];\n  const arrowBorderStyle = [props.arrow && placement.includes('top') && props.theme === 'light' && css([\"::before{margin-top:0;border-width:9px 9px 0;border-color:\", \" transparent;}\"], borderColor), props.arrow && !placement.includes('top') && props.theme === 'light' && css([\"::before{margin-top:0;border-width:0 9px 9px;border-color:\", \" transparent;}\"], borderColor)];\n  return createStyles({\n    prefixClassNames: 'BalloonToolbar',\n    ...props\n  }, {\n    root: [...getToolbarStyles(props).root.css, {\n      \"position\": \"absolute\",\n      \"whiteSpace\": \"nowrap\",\n      \"opacity\": \"1\",\n      \"transition\": \"opacity .2s ease-in-out\"\n    }, css([\"color:\", \";background:\", \";z-index:500;border:1px solid \", \";border-radius:4px;.slate-ToolbarButton-active,.slate-ToolbarButton:hover{color:\", \";}::before{\", \"}\"], color, background, borderColor, colorActive, arrowBorderStyle), ...arrowStyle, ...arrowBorderStyle]\n  });\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst ToolbarBase = /*#__PURE__*/React.forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    \"data-testid\": \"Toolbar\",\n    ref: ref\n  }, props));\n});\n\nvar _StyledToolbarBase$2 = _styled(ToolbarBase).withConfig({\n  displayName: \"Toolbar___StyledToolbarBase\",\n  componentId: \"sc-1wna77d-0\"\n})([\"\", \"\"], p => p.$_css);\n\nconst Toolbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    root\n  } = getToolbarStyles(props);\n  return /*#__PURE__*/React.createElement(_StyledToolbarBase$2, _extends({}, props, {\n    ref: ref,\n    className: root.className,\n    $_css: root.css\n  }));\n});\n\nconst useBalloonToolbarPopper = options => {\n  var _selectionText$length;\n\n  const editor = usePlateEditorState();\n  const [isHidden, setIsHidden] = useState(true);\n  const selectionExpanded = editor && isSelectionExpanded(editor);\n  const selectionText = editor && getSelectionText(editor);\n  const show = useCallback(() => {\n    if (isHidden && selectionExpanded) {\n      setIsHidden(false);\n    }\n  }, [isHidden, selectionExpanded]);\n  useEffect(() => {\n    if (!selectionText) {\n      setIsHidden(true);\n    } else if (selectionText && selectionExpanded) {\n      setIsHidden(false);\n    }\n  }, [selectionExpanded, selectionText, show]);\n  const popperResult = usePopperPosition({\n    isHidden,\n    getBoundingClientRect: getSelectionBoundingClientRect,\n    ...options\n  });\n  const selectionTextLength = (_selectionText$length = selectionText === null || selectionText === void 0 ? void 0 : selectionText.length) !== null && _selectionText$length !== void 0 ? _selectionText$length : 0;\n  const {\n    update\n  } = popperResult;\n  useEffect(() => {\n    selectionTextLength > 0 && (update === null || update === void 0 ? void 0 : update());\n  }, [selectionTextLength, update]);\n  return popperResult;\n};\n\nconst BalloonToolbar = props => {\n  const {\n    children,\n    theme = 'dark',\n    arrow = false,\n    portalElement,\n    popperOptions: _popperOptions = {}\n  } = props;\n  const popperRef = useRef(null);\n  const popperOptions = {\n    popperElement: popperRef.current,\n    placement: 'top',\n    offset: [0, 8],\n    ..._popperOptions\n  };\n  const {\n    styles: popperStyles,\n    attributes\n  } = useBalloonToolbarPopper(popperOptions);\n  const styles = getBalloonToolbarStyles({\n    popperOptions,\n    theme,\n    arrow,\n    ...props\n  });\n  return /*#__PURE__*/React.createElement(PortalBody, {\n    element: portalElement\n  }, /*#__PURE__*/React.createElement(_StyledToolbarBase$1, _extends({\n    ref: popperRef,\n    className: styles.root.className,\n    style: popperStyles.popper\n  }, attributes.popper, {\n    $_css: styles.root.css\n  }), children));\n};\n\nvar _StyledToolbarBase$1 = _styled(ToolbarBase).withConfig({\n  displayName: \"BalloonToolbar___StyledToolbarBase\",\n  componentId: \"sc-8umnsm-0\"\n})([\"\", \"\"], p => p.$_css);\n\nconst getToolbarButtonStyles = props => createStyles({\n  prefixClassNames: 'ToolbarButton',\n  ...props\n}, {\n  root: [{\n    \"display\": \"flex\",\n    \"justifyContent\": \"center\",\n    \"alignItems\": \"center\",\n    \"userSelect\": \"none\",\n    \"cursor\": \"pointer\",\n    \"verticalAlign\": \"middle\"\n  }, {\n    \"width\": \"28px\",\n    \"height\": \"24px\"\n  }, css([\"> svg{\", \"}\"], {\n    \"display\": \"block\",\n    \"width\": \"1.25rem\",\n    \"height\": \"1.25rem\"\n  })],\n  ...(props.active && {\n    active: {}\n  })\n});\n\nfunction toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (typeof mix === 'string' || typeof mix === 'number') {\n    str += mix;\n  } else if (typeof mix === 'object') {\n    if (Array.isArray(mix)) {\n      for (k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n          if (y = toVal(mix[k])) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else {\n      for (k in mix) {\n        if (mix[k]) {\n          str && (str += ' ');\n          str += k;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\nfunction clsx() {\n  var i = 0,\n      tmp,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (tmp = arguments[i++]) {\n      if (x = toVal(tmp)) {\n        str && (str += ' ');\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}\n\nconst ToolbarButton = props => {\n  const {\n    icon,\n    tooltip,\n    onMouseDown,\n    as = 'span'\n  } = props;\n  const spanProps = {\n    onMouseDown\n  };\n  const tooltipProps = {\n    content: '',\n    arrow: true,\n    offset: [0, 17],\n    delay: 0,\n    duration: [200, 0],\n    hideOnClick: false,\n    ...tooltip\n  };\n  const {\n    root,\n    active\n  } = getToolbarButtonStyles(props);\n  const button = /*#__PURE__*/React.createElement(_StyledSpan, _extends({\n    \"data-testid\": \"ToolbarButton\",\n    as: as,\n    className: clsx(root.className, active === null || active === void 0 ? void 0 : active.className)\n  }, spanProps, {\n    $_css: root.css\n  }), icon);\n  return tooltip ? /*#__PURE__*/React.createElement(Tippy, tooltipProps, button) : button;\n};\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"ToolbarButton___StyledSpan\",\n  componentId: \"sc-15em9do-0\"\n})([\"\", \"\"], p => p.$_css);\n/**\r\n * Toolbar button to toggle the type of elements in selection.\r\n */\n\n\nconst BlockToolbarButton = ({\n  type,\n  inactiveType,\n  active,\n  ...props\n}) => {\n  const editor = usePlateEditorState();\n  return /*#__PURE__*/React.createElement(ToolbarButton, _extends({\n    active: active !== null && active !== void 0 ? active : !!(editor !== null && editor !== void 0 && editor.selection) && someNode(editor, {\n      match: {\n        type\n      }\n    }),\n    onMouseDown: editor && getPreventDefaultHandler(toggleNodeType, editor, {\n      activeType: type,\n      inactiveType\n    })\n  }, props));\n};\n\nconst getHeadingToolbarStyles = props => createStyles({\n  prefixClassNames: 'HeadingToolbar',\n  ...props\n}, [{\n  root: [...getToolbarStyles(props).root.css, {\n    \"position\": \"relative\",\n    \"flexWrap\": \"wrap\",\n    \"marginTop\": \"0px\",\n    \"marginBottom\": \"1.25rem\",\n    \"marginLeft\": \"-1.25rem\",\n    \"marginRight\": \"-1.25rem\"\n  }, css([\"padding:1px 18px 17px;border-bottom:2px solid #eee;.slate-ToolbarButton-active,.slate-ToolbarButton:hover{color:#06c;}\"])]\n}]);\n\nconst HeadingToolbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const styles = getHeadingToolbarStyles(props);\n  return /*#__PURE__*/React.createElement(_StyledToolbarBase, _extends({\n    ref: ref,\n    className: styles.root.className\n  }, props, {\n    $_css: styles.root.css\n  }));\n});\n\nvar _StyledToolbarBase = _styled(ToolbarBase).withConfig({\n  displayName: \"HeadingToolbar___StyledToolbarBase\",\n  componentId: \"sc-g9jzcf-0\"\n})([\"\", \"\"], p => p.$_css);\n/**\r\n * Toolbar button to toggle the mark of the leaves in selection.\r\n */\n\n\nconst MarkToolbarButton = ({\n  type,\n  clear,\n  ...props\n}) => {\n  const editor = usePlateEditorState();\n  return /*#__PURE__*/React.createElement(ToolbarButton, _extends({\n    active: !!(editor !== null && editor !== void 0 && editor.selection) && isMarkActive(editor, type),\n    onMouseDown: editor ? getPreventDefaultHandler(toggleMark, editor, {\n      key: type,\n      clear\n    }) : undefined\n  }, props));\n};\n\nconst ToolbarDropdown = ({\n  control,\n  children,\n  open,\n  onOpen,\n  onClose\n}) => {\n  const [referenceElement, setReferenceElement] = useState(null);\n  const [popperElement, setPopperElement] = useState(null);\n  useEffect(() => {\n    const listener = ev => {\n      if (open) {\n        if (referenceElement && ev.composedPath().includes(referenceElement)) {\n          return;\n        }\n\n        if (popperElement && ev.composedPath().includes(popperElement)) {\n          return;\n        }\n\n        onClose === null || onClose === void 0 ? void 0 : onClose(ev);\n      }\n    };\n\n    document.body.addEventListener('mousedown', listener);\n    return () => {\n      document.body.removeEventListener('mousedown', listener);\n    };\n  }, [onClose, open, popperElement, referenceElement]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    ref: setReferenceElement,\n    onMouseDown: onOpen\n  }, control), /*#__PURE__*/React.createElement(_StyledDiv, {\n    ref: setPopperElement,\n    $_css: [{\n      \"position\": \"absolute\",\n      \"--tw-bg-opacity\": \"1\",\n      \"backgroundColor\": \"rgba(255, 255, 255, var(--tw-bg-opacity))\",\n      \"top\": \"2.5rem\"\n    }, !open && {\n      \"display\": \"none\"\n    }, css([\"border:1px solid #ccc;box-shadow:0 1px 3px 0 #ccc;z-index:1;\"])]\n  }, children));\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"ToolbarDropdown___StyledDiv\",\n  componentId: \"sc-3ansxp-0\"\n})([\"\", \"\"], p => p.$_css);\n\nexport { BalloonToolbar, BlockToolbarButton, HeadingToolbar, MarkToolbarButton, Toolbar, ToolbarBase, ToolbarButton, ToolbarDropdown, getBalloonToolbarStyles, getHeadingToolbarStyles, getToolbarButtonStyles, getToolbarStyles, useBalloonToolbarPopper };","map":{"version":3,"sources":["../src/Toolbar/Toolbar.styles.ts","../src/BalloonToolbar/BalloonToolbar.styles.ts","../src/Toolbar/Toolbar.tsx","../src/BalloonToolbar/useBalloonToolbarPopper.ts","../src/BalloonToolbar/BalloonToolbar.tsx","../src/ToolbarButton/ToolbarButton.styles.ts","../../../../node_modules/clsx/dist/clsx.m.js","../src/ToolbarButton/ToolbarButton.tsx","../src/BlockToolbarButton/BlockToolbarButton.tsx","../src/HeadingToolbar/HeadingToolbar.styles.ts","../src/HeadingToolbar/HeadingToolbar.tsx","../src/MarkToolbarButton/MarkToolbarButton.tsx","../src/ToolbarDropdown/ToolbarDropdown.tsx"],"names":["getToolbarStyles","props","createStyles","prefixClassNames","root","getBalloonToolbarStyles","color","colorActive","background","borderColor","placement","arrowStyle","css","arrowBorderStyle","ToolbarBase","ref","Toolbar","useBalloonToolbarPopper","options","editor","usePlateEditorState","useState","selectionExpanded","isSelectionExpanded","selectionText","getSelectionText","show","useCallback","isHidden","setIsHidden","useEffect","popperResult","usePopperPosition","getBoundingClientRect","selectionTextLength","update","BalloonToolbar","theme","arrow","popperOptions","_popperOptions","popperRef","useRef","popperElement","offset","styles","attributes","portalElement","popperStyles","popper","getToolbarButtonStyles","active","ToolbarButton","as","spanProps","onMouseDown","tooltipProps","content","delay","duration","hideOnClick","tooltip","button","clsx","BlockToolbarButton","someNode","match","type","getPreventDefaultHandler","activeType","inactiveType","getHeadingToolbarStyles","HeadingToolbar","className","MarkToolbarButton","isMarkActive","key","clear","undefined","ToolbarDropdown","onClose","listener","ev","referenceElement","document","onOpen"],"mappings":"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","sourcesContent":["import { createStyles } from '@udecode/plate-styled-components';\nimport tw from 'twin.macro';\nimport { ToolbarProps } from './Toolbar.types';\n\nexport const getToolbarStyles = (props: ToolbarProps) =>\n  createStyles(\n    { prefixClassNames: 'Toolbar', ...props },\n    {\n      root: [\n        tw`flex items-center select-none box-content`,\n        tw`color[rgb(68, 68, 68)] minHeight[40px]`,\n      ],\n    }\n  );\n","import { createStyles } from '@udecode/plate-styled-components';\nimport { css, CSSProp } from 'styled-components';\nimport tw from 'twin.macro';\nimport { getToolbarStyles } from '../Toolbar/Toolbar.styles';\nimport { BalloonToolbarStyleProps } from './BalloonToolbar.types';\n\nexport const getBalloonToolbarStyles = (props: BalloonToolbarStyleProps) => {\n  let color = 'rgb(157, 170, 182)';\n  let colorActive = 'white';\n  let background = 'rgb(36, 42, 49)';\n  let borderColor = 'transparent';\n\n  if (props.theme === 'light') {\n    color = 'rgba(0, 0, 0, 0.50)';\n    colorActive = 'black';\n    background = 'rgb(250, 250, 250)';\n    borderColor = 'rgb(196, 196, 196)';\n  }\n\n  const { placement = 'top' } = props.popperOptions ?? {};\n\n  const arrowStyle: CSSProp = [\n    props.arrow &&\n      css`\n        ::after {\n          left: 50%;\n          content: ' ';\n          position: absolute;\n          margin-top: -1px;\n          transform: translateX(-50%);\n          border-color: ${background} transparent;\n          border-style: solid;\n        }\n      `,\n\n    props.arrow &&\n      placement.includes('top') &&\n      css`\n        ::after {\n          top: 100%;\n          bottom: auto;\n          border-width: 8px 8px 0;\n        }\n      `,\n\n    props.arrow &&\n      !placement.includes('top') &&\n      css`\n        ::after {\n          top: auto;\n          bottom: 100%;\n          border-width: 0 8px 8px;\n        }\n      `,\n  ];\n\n  const arrowBorderStyle: CSSProp = [\n    props.arrow &&\n      placement.includes('top') &&\n      props.theme === 'light' &&\n      css`\n        ::before {\n          margin-top: 0;\n          border-width: 9px 9px 0;\n          border-color: ${borderColor} transparent;\n        }\n      `,\n    props.arrow &&\n      !placement.includes('top') &&\n      props.theme === 'light' &&\n      css`\n        ::before {\n          margin-top: 0;\n          border-width: 0 9px 9px;\n          border-color: ${borderColor} transparent;\n        }\n      `,\n  ];\n\n  return createStyles(\n    { prefixClassNames: 'BalloonToolbar', ...props },\n    {\n      root: [\n        ...getToolbarStyles(props).root.css,\n        tw`absolute whitespace-nowrap opacity-100 transition[opacity .2s ease-in-out]`,\n        css`\n          color: ${color};\n          background: ${background};\n          z-index: 500;\n          border: 1px solid ${borderColor};\n          border-radius: 4px;\n\n          .slate-ToolbarButton-active,\n          .slate-ToolbarButton:hover {\n            color: ${colorActive};\n          }\n\n          ::before {\n            ${arrowBorderStyle}\n          }\n        `,\n        ...arrowStyle,\n        ...arrowBorderStyle,\n      ],\n    }\n  );\n};\n","import React from 'react';\nimport { getToolbarStyles } from './Toolbar.styles';\nimport { ToolbarProps } from './Toolbar.types';\n\nexport const ToolbarBase = React.forwardRef<HTMLDivElement, ToolbarProps>(\n  (props, ref) => {\n    return <div data-testid=\"Toolbar\" ref={ref} {...props} />;\n  }\n);\n\nexport const Toolbar = React.forwardRef<HTMLDivElement, ToolbarProps>(\n  (props: ToolbarProps, ref) => {\n    const { root } = getToolbarStyles(props);\n\n    return (\n      <ToolbarBase\n        {...props}\n        ref={ref}\n        css={root.css}\n        className={root.className}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'react';\nimport {\n  getSelectionText,\n  isSelectionExpanded,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport {\n  getSelectionBoundingClientRect,\n  usePopperPosition,\n  UsePopperPositionOptions,\n} from '@udecode/plate-popper';\n\nexport const useBalloonToolbarPopper = (options: UsePopperPositionOptions) => {\n  const editor = usePlateEditorState()!;\n\n  const [isHidden, setIsHidden] = useState(true);\n\n  const selectionExpanded = editor && isSelectionExpanded(editor);\n  const selectionText = editor && getSelectionText(editor);\n\n  const show = useCallback(() => {\n    if (isHidden && selectionExpanded) {\n      setIsHidden(false);\n    }\n  }, [isHidden, selectionExpanded]);\n\n  useEffect(() => {\n    if (!selectionText) {\n      setIsHidden(true);\n    } else if (selectionText && selectionExpanded) {\n      setIsHidden(false);\n    }\n  }, [selectionExpanded, selectionText, show]);\n\n  const popperResult = usePopperPosition({\n    isHidden,\n    getBoundingClientRect: getSelectionBoundingClientRect,\n    ...options,\n  });\n\n  const selectionTextLength = selectionText?.length ?? 0;\n  const { update } = popperResult;\n\n  useEffect(() => {\n    selectionTextLength > 0 && update?.();\n  }, [selectionTextLength, update]);\n\n  return popperResult;\n};\n","import React, { useRef } from 'react';\nimport { UsePopperPositionOptions } from '@udecode/plate-popper';\nimport { PortalBody } from '@udecode/plate-styled-components';\nimport { ToolbarBase } from '../Toolbar/Toolbar';\nimport { getBalloonToolbarStyles } from './BalloonToolbar.styles';\nimport { BalloonToolbarProps } from './BalloonToolbar.types';\nimport { useBalloonToolbarPopper } from './useBalloonToolbarPopper';\n\nexport const BalloonToolbar = (props: BalloonToolbarProps) => {\n  const {\n    children,\n    theme = 'dark',\n    arrow = false,\n    portalElement,\n    popperOptions: _popperOptions = {},\n  } = props;\n\n  const popperRef = useRef<HTMLDivElement>(null);\n\n  const popperOptions: UsePopperPositionOptions = {\n    popperElement: popperRef.current,\n    placement: 'top' as any,\n    offset: [0, 8],\n    ..._popperOptions,\n  };\n\n  const { styles: popperStyles, attributes } = useBalloonToolbarPopper(\n    popperOptions\n  );\n\n  const styles = getBalloonToolbarStyles({\n    popperOptions,\n    theme,\n    arrow,\n    ...props,\n  });\n\n  return (\n    <PortalBody element={portalElement}>\n      <ToolbarBase\n        ref={popperRef}\n        css={styles.root.css}\n        className={styles.root.className}\n        style={popperStyles.popper}\n        {...attributes.popper}\n      >\n        {children}\n      </ToolbarBase>\n    </PortalBody>\n  );\n};\n","import { createStyles } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\nimport { ToolbarButtonProps } from './ToolbarButton.types';\n\nexport const getToolbarButtonStyles = (props: ToolbarButtonProps) =>\n  createStyles(\n    { prefixClassNames: 'ToolbarButton', ...props },\n    {\n      root: [\n        tw`flex justify-center items-center select-none cursor-pointer align-middle`,\n        tw`width[28px] height[24px]`,\n        css`\n          > svg {\n            ${tw`block w-5 h-5`}\n          }\n        `,\n      ],\n      ...(props.active && { active: {} }),\n    }\n  );\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import React from 'react';\nimport Tippy, { TippyProps } from '@tippyjs/react'; // optional\nimport clsx from 'clsx';\nimport { getToolbarButtonStyles } from './ToolbarButton.styles';\nimport { ToolbarButtonProps } from './ToolbarButton.types';\n\nexport const ToolbarButton = (props: ToolbarButtonProps) => {\n  const { icon, tooltip, onMouseDown, as = 'span' } = props;\n\n  const spanProps = {\n    onMouseDown,\n  };\n\n  const tooltipProps: TippyProps = {\n    content: '',\n    arrow: true,\n    offset: [0, 17],\n    delay: 0,\n    duration: [200, 0],\n    hideOnClick: false,\n    ...tooltip,\n  };\n\n  const { root, active } = getToolbarButtonStyles(props);\n\n  const button = (\n    <span\n      data-testid=\"ToolbarButton\"\n      as={as}\n      css={root.css}\n      className={clsx(root.className, active?.className)}\n      {...spanProps}\n    >\n      {icon}\n    </span>\n  );\n\n  return tooltip ? <Tippy {...tooltipProps}>{button}</Tippy> : button;\n};\n","import React from 'react';\nimport {\n  getPreventDefaultHandler,\n  someNode,\n  toggleNodeType,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ToolbarButton } from '../ToolbarButton';\nimport { BlockToolbarButtonProps } from './BlockToolbarButton.types';\n\n/**\n * Toolbar button to toggle the type of elements in selection.\n */\nexport const BlockToolbarButton = ({\n  type,\n  inactiveType,\n  active,\n  ...props\n}: BlockToolbarButtonProps) => {\n  const editor = usePlateEditorState()!;\n\n  return (\n    <ToolbarButton\n      active={\n        active ?? (!!editor?.selection && someNode(editor, { match: { type } }))\n      }\n      onMouseDown={\n        editor &&\n        getPreventDefaultHandler(toggleNodeType, editor, {\n          activeType: type,\n          inactiveType,\n        })\n      }\n      {...props}\n    />\n  );\n};\n","import { createStyles, StyledProps } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\nimport { getToolbarStyles } from '../Toolbar/Toolbar.styles';\n\nexport const getHeadingToolbarStyles = (props: StyledProps) =>\n  createStyles({ prefixClassNames: 'HeadingToolbar', ...props }, [\n    {\n      root: [\n        ...getToolbarStyles(props).root.css,\n        tw`relative flex-wrap mt-0 mb-5 -mx-5`,\n        css`\n          padding: 1px 18px 17px;\n          border-bottom: 2px solid #eee;\n\n          .slate-ToolbarButton-active,\n          .slate-ToolbarButton:hover {\n            color: #06c;\n          }\n        `,\n      ],\n    },\n  ]);\n","import React from 'react';\nimport { ToolbarBase } from '../Toolbar/Toolbar';\nimport { ToolbarProps } from '../Toolbar/Toolbar.types';\nimport { getHeadingToolbarStyles } from './HeadingToolbar.styles';\n\nexport const HeadingToolbar = React.forwardRef<HTMLDivElement, ToolbarProps>(\n  (props: ToolbarProps, ref) => {\n    const styles = getHeadingToolbarStyles(props);\n\n    return (\n      <ToolbarBase\n        ref={ref}\n        className={styles.root.className}\n        css={styles.root.css}\n        {...props}\n      />\n    );\n  }\n);\n","import React from 'react';\nimport {\n  getPreventDefaultHandler,\n  isMarkActive,\n  toggleMark,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ToolbarButton } from '../ToolbarButton/ToolbarButton';\nimport { MarkToolbarButtonProps } from './MarkToolbarButton.types';\n\n/**\n * Toolbar button to toggle the mark of the leaves in selection.\n */\nexport const MarkToolbarButton = ({\n  type,\n  clear,\n  ...props\n}: MarkToolbarButtonProps) => {\n  const editor = usePlateEditorState()!;\n\n  return (\n    <ToolbarButton\n      active={!!editor?.selection && isMarkActive(editor, type!)}\n      onMouseDown={\n        editor\n          ? getPreventDefaultHandler(toggleMark, editor, { key: type, clear })\n          : undefined\n      }\n      {...props}\n    />\n  );\n};\n","import React, { ReactNode, useEffect, useState } from 'react';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\n\ntype ToolbarDropdownProps = {\n  control: ReactNode;\n  open: boolean;\n  children: ReactNode;\n  onOpen?: () => void;\n  onClose?: (ev: MouseEvent) => void;\n};\n\nexport const ToolbarDropdown = ({\n  control,\n  children,\n  open,\n  onOpen,\n  onClose,\n}: ToolbarDropdownProps) => {\n  const [\n    referenceElement,\n    setReferenceElement,\n  ] = useState<HTMLDivElement | null>(null);\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(\n    null\n  );\n\n  useEffect(() => {\n    const listener = (ev: MouseEvent) => {\n      if (open) {\n        if (referenceElement && ev.composedPath().includes(referenceElement)) {\n          return;\n        }\n        if (popperElement && ev.composedPath().includes(popperElement)) {\n          return;\n        }\n\n        onClose?.(ev);\n      }\n    };\n    document.body.addEventListener('mousedown', listener);\n    return () => {\n      document.body.removeEventListener('mousedown', listener);\n    };\n  }, [onClose, open, popperElement, referenceElement]);\n\n  return (\n    <>\n      <div ref={setReferenceElement} onMouseDown={onOpen}>\n        {control}\n      </div>\n\n      <div\n        ref={setPopperElement}\n        css={[\n          tw`absolute bg-white top-10`,\n          !open && tw`hidden`,\n          css`\n            border: 1px solid #ccc;\n            box-shadow: 0 1px 3px 0 #ccc;\n            z-index: 1;\n          `,\n        ]}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar factorySpace = require('../tokenize/factory-space.js');\n\nvar tokenize = initializeContent;\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  var previous;\n  return contentStart;\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}\n\nexports.tokenize = tokenize;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/micromark/dist/initialize/content.js"],"names":["Object","defineProperty","exports","value","markdownLineEnding","require","factorySpace","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","lineStart","token","contentType","next","data"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAACC,EAAAA,KAAK,EAAE;AAAR,CAA7C;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,sCAAD,CAAhC;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,8BAAD,CAA1B;;AAEA,IAAIE,QAAQ,GAAGC,iBAAf;;AAEA,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,MAAIC,YAAY,GAAGD,OAAO,CAACE,OAAR,CACjB,KAAKC,MAAL,CAAYC,UAAZ,CAAuBC,cADN,EAEjBC,0BAFiB,EAGjBC,gBAHiB,CAAnB;AAKA,MAAIC,QAAJ;AACA,SAAOP,YAAP;;AAEA,WAASK,0BAAT,CAAoCG,IAApC,EAA0C;AACxC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBT,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAEDT,IAAAA,OAAO,CAACW,KAAR,CAAc,YAAd;AACAX,IAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACAT,IAAAA,OAAO,CAACY,IAAR,CAAa,YAAb;AACA,WAAOf,YAAY,CAACG,OAAD,EAAUC,YAAV,EAAwB,YAAxB,CAAnB;AACD;;AAED,WAASM,gBAAT,CAA0BE,IAA1B,EAAgC;AAC9BT,IAAAA,OAAO,CAACW,KAAR,CAAc,WAAd;AACA,WAAOE,SAAS,CAACJ,IAAD,CAAhB;AACD;;AAED,WAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AACvB,QAAIK,KAAK,GAAGd,OAAO,CAACW,KAAR,CAAc,WAAd,EAA2B;AACrCI,MAAAA,WAAW,EAAE,MADwB;AAErCP,MAAAA,QAAQ,EAAEA;AAF2B,KAA3B,CAAZ;;AAKA,QAAIA,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACQ,IAAT,GAAgBF,KAAhB;AACD;;AAEDN,IAAAA,QAAQ,GAAGM,KAAX;AACA,WAAOG,IAAI,CAACR,IAAD,CAAX;AACD;;AAED,WAASQ,IAAT,CAAcR,IAAd,EAAoB;AAClB,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBT,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACAZ,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACAZ,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAED,QAAId,kBAAkB,CAACc,IAAD,CAAtB,EAA8B;AAC5BT,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACAT,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACA,aAAOC,SAAP;AACD,KAZiB,CAYhB;;;AAEFb,IAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA,WAAOQ,IAAP;AACD;AACF;;AAEDxB,OAAO,CAACK,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict'\r\n\r\nObject.defineProperty(exports, '__esModule', {value: true})\r\n\r\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\r\nvar factorySpace = require('../tokenize/factory-space.js')\r\n\r\nvar tokenize = initializeContent\r\n\r\nfunction initializeContent(effects) {\r\n  var contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  var previous\r\n  return contentStart\r\n\r\n  function afterContentStartConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return factorySpace(effects, contentStart, 'linePrefix')\r\n  }\r\n\r\n  function paragraphInitial(code) {\r\n    effects.enter('paragraph')\r\n    return lineStart(code)\r\n  }\r\n\r\n  function lineStart(code) {\r\n    var token = effects.enter('chunkText', {\r\n      contentType: 'text',\r\n      previous: previous\r\n    })\r\n\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n\r\n    previous = token\r\n    return data(code)\r\n  }\r\n\r\n  function data(code) {\r\n    if (code === null) {\r\n      effects.exit('chunkText')\r\n      effects.exit('paragraph')\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit('chunkText')\r\n      return lineStart\r\n    } // Data.\r\n\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n\r\nexports.tokenize = tokenize\r\n"]},"metadata":{},"sourceType":"script"}
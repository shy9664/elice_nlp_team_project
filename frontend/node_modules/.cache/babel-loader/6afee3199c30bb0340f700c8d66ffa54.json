{"ast":null,"code":"import _styled from 'styled-components';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clsx from 'clsx';\n\nconst Divider = props => /*#__PURE__*/React.createElement(_StyledDiv$1, props);\n\nvar _StyledDiv$1 = _styled(\"div\").withConfig({\n  displayName: \"Divider___StyledDiv\",\n  componentId: \"sc-n6iu2k-0\"\n})({\n  \"marginLeft\": \"0.5rem\",\n  \"marginRight\": \"0.5rem\",\n  \"marginTop\": \"0.125rem\",\n  \"marginBottom\": \"0.125rem\",\n  \"width\": \"1px\",\n  \"--tw-bg-opacity\": \"1\",\n  \"backgroundColor\": \"rgba(229, 231, 235, var(--tw-bg-opacity))\"\n});\n\nconst PortalBody = ({\n  children,\n  element\n}) => /*#__PURE__*/ReactDOM.createPortal(children, element || document.body);\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\n\n\nvar isArray = Array.isArray;\nvar isArray_1 = isArray;\n/**\r\n * Casts `value` as an array if it's not one.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.4.0\r\n * @category Lang\r\n * @param {*} value The value to inspect.\r\n * @returns {Array} Returns the cast array.\r\n * @example\r\n *\r\n * _.castArray(1);\r\n * // => [1]\r\n *\r\n * _.castArray({ 'a': 1 });\r\n * // => [{ 'a': 1 }]\r\n *\r\n * _.castArray('abc');\r\n * // => ['abc']\r\n *\r\n * _.castArray(null);\r\n * // => [null]\r\n *\r\n * _.castArray(undefined);\r\n * // => [undefined]\r\n *\r\n * _.castArray();\r\n * // => []\r\n *\r\n * var array = [1, 2, 3];\r\n * console.log(_.castArray(array) === array);\r\n * // => true\r\n */\n\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n\n  var value = arguments[0];\n  return isArray_1(value) ? value : [value];\n}\n\nvar castArray_1 = castArray;\n\nconst getRootProps = props => {\n  const {\n    editor,\n    attributes,\n    children,\n    nodeProps,\n    styles,\n    classNames,\n    prefixClassNames,\n    element,\n    leaf,\n    text,\n    ...rootProps\n  } = props;\n  return rootProps;\n};\n\nconst createStyles = (props, styles) => {\n  const stylesArray = castArray_1(styles);\n  const allStyles = {};\n  stylesArray.forEach(_styles => {\n    Object.keys(_styles).forEach(key => {\n      var _props$classNames, _props$styles;\n\n      const cssProp = castArray_1(_styles[key]); // Init css and className props\n\n      if (!allStyles[key]) {\n        let className = '';\n\n        if (props.prefixClassNames) {\n          if (key === 'root') {\n            className = `slate-${props.prefixClassNames}`;\n          } else {\n            className = `slate-${props.prefixClassNames}-${key}`;\n          }\n        }\n\n        allStyles[key] = {\n          css: cssProp,\n          className: clsx(props.prefixClassNames && className)\n        };\n      } // Extend className with `classNames` prop\n\n\n      const classNameProp = props === null || props === void 0 ? void 0 : (_props$classNames = props.classNames) === null || _props$classNames === void 0 ? void 0 : _props$classNames[key];\n\n      if (classNameProp) {\n        allStyles[key].className = clsx(allStyles[key].className, classNameProp);\n      } // Extend css with `styles` prop\n\n\n      const cssPropOverride = props === null || props === void 0 ? void 0 : (_props$styles = props.styles) === null || _props$styles === void 0 ? void 0 : _props$styles[key];\n      if (!cssPropOverride) return;\n      const cssPropOverrideArray = castArray_1(cssPropOverride);\n      allStyles[key].css.push(...cssPropOverrideArray);\n    });\n  });\n  return allStyles;\n};\n\nconst getStyledNodeStyles = props => createStyles(props, {\n  root: [{}]\n});\n/**\r\n * StyledElement with no default styles.\r\n */\n\n\nconst StyledElement = props => {\n  var _styles$root, _nodeProps$styles$roo, _nodeProps$styles, _nodeProps$styles$roo2;\n\n  const {\n    attributes,\n    children,\n    nodeProps,\n    styles\n  } = props;\n  const rootProps = getRootProps(props);\n  const rootStyles = castArray_1((_styles$root = styles === null || styles === void 0 ? void 0 : styles.root) !== null && _styles$root !== void 0 ? _styles$root : []);\n  const nodePropsStyles = (_nodeProps$styles$roo = nodeProps === null || nodeProps === void 0 ? void 0 : (_nodeProps$styles = nodeProps.styles) === null || _nodeProps$styles === void 0 ? void 0 : (_nodeProps$styles$roo2 = _nodeProps$styles.root) === null || _nodeProps$styles$roo2 === void 0 ? void 0 : _nodeProps$styles$roo2.css) !== null && _nodeProps$styles$roo !== void 0 ? _nodeProps$styles$roo : [];\n  const {\n    root\n  } = getStyledNodeStyles({ ...nodeProps,\n    styles: {\n      root: [...rootStyles, ...nodePropsStyles]\n    }\n  });\n  return /*#__PURE__*/React.createElement(_StyledDiv, _extends({}, attributes, rootProps, nodeProps, {\n    $_css: root.css\n  }), children);\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"StyledElement___StyledDiv\",\n  componentId: \"sc-2e063k-0\"\n})([\"\", \"\"], p => p.$_css);\n/**\r\n * StyledLeaf with no default styles.\r\n */\n\n\nconst StyledLeaf = props => {\n  var _styles$root, _nodeProps$styles$roo, _nodeProps$styles, _nodeProps$styles$roo2;\n\n  const {\n    attributes,\n    children,\n    nodeProps,\n    styles\n  } = props;\n  const rootProps = getRootProps(props);\n  const rootStyles = castArray_1((_styles$root = styles === null || styles === void 0 ? void 0 : styles.root) !== null && _styles$root !== void 0 ? _styles$root : []);\n  const nodePropsStyles = (_nodeProps$styles$roo = nodeProps === null || nodeProps === void 0 ? void 0 : (_nodeProps$styles = nodeProps.styles) === null || _nodeProps$styles === void 0 ? void 0 : (_nodeProps$styles$roo2 = _nodeProps$styles.root) === null || _nodeProps$styles$roo2 === void 0 ? void 0 : _nodeProps$styles$roo2.css) !== null && _nodeProps$styles$roo !== void 0 ? _nodeProps$styles$roo : [];\n  const {\n    root\n  } = getStyledNodeStyles({ ...nodeProps,\n    styles: {\n      root: [...rootStyles, ...nodePropsStyles]\n    }\n  });\n  return /*#__PURE__*/React.createElement(_StyledSpan, _extends({}, attributes, rootProps, nodeProps, {\n    $_css: root.css\n  }), children);\n};\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"StyledLeaf___StyledSpan\",\n  componentId: \"sc-129cvv1-0\"\n})([\"\", \"\"], p => p.$_css);\n/**\r\n * HOC mapping element/leaf props to component styles\r\n */\n\n\nconst withStyledProps = (Component, {\n  elementProps = {},\n  leafProps = {}\n}) => _props => {\n  const {\n    element,\n    leaf\n  } = _props;\n  const styles = {\n    root: {}\n  };\n  Object.keys(elementProps).forEach(nodeProp => {\n    const cssPropKeys = castArray_1(elementProps[nodeProp]);\n    cssPropKeys.forEach(key => {\n      styles.root[key] = element[nodeProp];\n    });\n  });\n  Object.keys(leafProps).forEach(nodeProp => {\n    const cssPropKeys = castArray_1(leafProps[nodeProp]);\n    cssPropKeys.forEach(key => {\n      styles.root[key] = leaf[nodeProp];\n    });\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({}, _props, {\n    styles: styles\n  }));\n};\n\nexport { Divider, PortalBody, StyledElement, StyledLeaf, createStyles, getRootProps, getStyledNodeStyles, withStyledProps };","map":{"version":3,"sources":["../src/Divider/Divider.tsx","../src/PortalBody/PortalBody.tsx","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../src/utils/getRootProps.ts","../src/utils/createStyles.ts","../src/utils/getStyledNodeStyles.ts","../src/StyledElement/StyledElement.tsx","../src/StyledLeaf/StyledLeaf.tsx","../src/hocs/withStyledProps.tsx"],"names":["Divider","props","PortalBody","element","ReactDOM","document","isArray","getRootProps","rootProps","createStyles","stylesArray","castArray","allStyles","_styles","Object","key","cssProp","className","prefixClassNames","css","clsx","classNameProp","cssPropOverride","cssPropOverrideArray","getStyledNodeStyles","root","StyledElement","styles","rootStyles","nodePropsStyles","nodeProps","StyledLeaf","withStyledProps","elementProps","leafProps","_props","leaf","nodeProp","cssPropKeys"],"mappings":"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","sourcesContent":["import React, { HTMLAttributes } from 'react';\n\nexport const Divider = (props: HTMLAttributes<HTMLDivElement>) => (\n  <div tw=\"mx-2 my-0.5 w-px bg-gray-200\" {...props} />\n);\n","import { ReactPortal } from 'react';\nimport ReactDOM from 'react-dom';\nimport { PortalBodyProps } from './PortalBody.types';\n\nexport const PortalBody: ({\n  children,\n  element,\n}: PortalBodyProps) => ReactPortal = ({ children, element }: PortalBodyProps) =>\n  ReactDOM.createPortal(children, element || document.body);\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import { AnyObject } from '@udecode/plate-core';\nimport { StyledElementProps } from '../StyledElement/StyledElement.types';\nimport { StyledLeafProps } from '../StyledLeaf/StyledLeaf.types';\n\nexport const getRootProps = (\n  props: StyledElementProps | StyledLeafProps | AnyObject\n) => {\n  const {\n    editor,\n    attributes,\n    children,\n    nodeProps,\n    styles,\n    classNames,\n    prefixClassNames,\n    element,\n    leaf,\n    text,\n    ...rootProps\n  } = props;\n\n  return rootProps;\n};\n","import clsx from 'clsx';\nimport castArray from 'lodash/castArray';\nimport { CSSProp } from 'styled-components';\nimport { StyledProps } from '../types/StyledProps';\n\nexport interface Style {\n  css: CSSProp[];\n  className: string;\n}\n\nexport const createStyles = <\n  T extends {\n    styles?: NonNullable<T['styles']>;\n    classNames?: any;\n    prefixClassNames?: string;\n  } = StyledProps\n>(\n  props: T,\n  styles: NonNullable<T['styles']> | NonNullable<T['styles']>[]\n): { root: Style } & Record<\n  keyof NonNullable<T['styles']>,\n  Style | undefined\n> => {\n  const stylesArray = castArray(styles);\n\n  const allStyles = {} as any;\n\n  stylesArray.forEach((_styles) => {\n    Object.keys(_styles).forEach((key) => {\n      const cssProp = castArray(_styles[key]);\n\n      // Init css and className props\n      if (!allStyles[key]) {\n        let className = '';\n        if (props.prefixClassNames) {\n          if (key === 'root') {\n            className = `slate-${props.prefixClassNames}`;\n          } else {\n            className = `slate-${props.prefixClassNames}-${key}`;\n          }\n        }\n\n        allStyles[key as any] = {\n          css: cssProp,\n          className: clsx(props.prefixClassNames && className),\n        };\n      }\n\n      // Extend className with `classNames` prop\n      const classNameProp = props?.classNames?.[key];\n      if (classNameProp) {\n        allStyles[key].className = clsx(\n          allStyles[key].className,\n          classNameProp\n        );\n      }\n\n      // Extend css with `styles` prop\n      const cssPropOverride = props?.styles?.[key];\n      if (!cssPropOverride) return;\n\n      const cssPropOverrideArray = castArray(cssPropOverride);\n      allStyles[key].css.push(...cssPropOverrideArray);\n    });\n  });\n\n  return allStyles;\n};\n","import { AnyObject } from '@udecode/plate-core';\nimport { StyledProps } from '../types/StyledProps';\nimport { createStyles } from './createStyles';\n\nexport const getStyledNodeStyles = (\n  props: Pick<StyledProps, 'styles'> & AnyObject\n) =>\n  createStyles(props, {\n    root: [{}],\n  });\n","import React from 'react';\nimport castArray from 'lodash/castArray';\nimport { getRootProps } from '../utils/getRootProps';\nimport { getStyledNodeStyles } from '../utils/getStyledNodeStyles';\nimport { StyledElementProps } from './StyledElement.types';\n\n/**\n * StyledElement with no default styles.\n */\nexport const StyledElement = (props: StyledElementProps) => {\n  const { attributes, children, nodeProps, styles } = props;\n\n  const rootProps = getRootProps(props);\n  const rootStyles = castArray(styles?.root ?? []);\n  const nodePropsStyles = nodeProps?.styles?.root?.css ?? [];\n\n  const { root } = getStyledNodeStyles({\n    ...nodeProps,\n    styles: { root: [...rootStyles, ...nodePropsStyles] },\n  });\n\n  return (\n    <div {...attributes} css={root.css} {...rootProps} {...nodeProps}>\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport castArray from 'lodash/castArray';\nimport { getRootProps } from '../utils/getRootProps';\nimport { getStyledNodeStyles } from '../utils/getStyledNodeStyles';\nimport { StyledLeafProps } from './StyledLeaf.types';\n\n/**\n * StyledLeaf with no default styles.\n */\nexport const StyledLeaf = (props: StyledLeafProps) => {\n  const { attributes, children, nodeProps, styles } = props;\n\n  const rootProps = getRootProps(props);\n  const rootStyles = castArray(styles?.root ?? []);\n  const nodePropsStyles = nodeProps?.styles?.root?.css ?? [];\n\n  const { root } = getStyledNodeStyles({\n    ...nodeProps,\n    styles: { root: [...rootStyles, ...nodePropsStyles] },\n  });\n\n  return (\n    <span {...attributes} css={root.css} {...rootProps} {...nodeProps}>\n      {children}\n    </span>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { TElement, TText } from '@udecode/plate-core';\nimport castArray from 'lodash/castArray';\nimport { CSSProp, CSSProperties } from 'styled-components';\n\n/**\n * HOC mapping element/leaf props to component styles\n */\nexport const withStyledProps = <T extends { element: TElement; leaf: TText }>(\n  Component: FunctionComponent<any>,\n  {\n    elementProps = {},\n    leafProps = {},\n  }: {\n    elementProps?: {\n      [key: string]: keyof CSSProperties | (keyof CSSProperties)[];\n    };\n    leafProps?: {\n      [key: string]: keyof CSSProperties | (keyof CSSProperties)[];\n    };\n  }\n): FunctionComponent<any> => (_props: T) => {\n  const { element, leaf } = _props;\n\n  const styles: { root: CSSProp } = {\n    root: {},\n  };\n\n  Object.keys(elementProps).forEach((nodeProp) => {\n    const cssPropKeys = castArray(elementProps[nodeProp]);\n    cssPropKeys.forEach((key) => {\n      styles.root[key] = element[nodeProp];\n    });\n  });\n\n  Object.keys(leafProps).forEach((nodeProp) => {\n    const cssPropKeys = castArray(leafProps[nodeProp]);\n    cssPropKeys.forEach((key) => {\n      styles.root[key] = leaf[nodeProp];\n    });\n  });\n\n  return <Component {..._props} styles={styles} />;\n};\n"]},"metadata":{},"sourceType":"module"}
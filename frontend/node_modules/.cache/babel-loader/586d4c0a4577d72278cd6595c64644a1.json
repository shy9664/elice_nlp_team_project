{"ast":null,"code":"import { createStyles, getRootProps } from '@udecode/plate-styled-components';\nimport _styled, { css } from 'styled-components';\nimport React from 'react';\nimport { usePlateEditorState, getPluginType, someNode } from '@udecode/plate-core';\nimport { ELEMENT_LINK, getAndUpsertLink } from '@udecode/plate-link';\nimport { ToolbarButton } from '@udecode/plate-toolbar';\n\nconst getLinkElementStyles = props => createStyles({\n  prefixClassNames: 'LinkElement',\n  ...props\n}, {\n  root: css([\"color:#0078d4;text-decoration:initial;:hover,:visited:hover{color:#004578;text-decoration:underline;}:visited{color:#0078d4;}\"])\n});\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst LinkElement = props => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element\n  } = props;\n  const rootProps = getRootProps(props);\n  const {\n    root\n  } = getLinkElementStyles(props);\n  return /*#__PURE__*/React.createElement(_StyledA, _extends({}, attributes, {\n    href: element.url,\n    className: root.className\n  }, rootProps, nodeProps, {\n    $_css: root.css\n  }), children);\n};\n\nvar _StyledA = _styled(\"a\").withConfig({\n  displayName: \"LinkElement___StyledA\",\n  componentId: \"sc-1rpm6sw-0\"\n})([\"\", \"\"], p => p.$_css);\n\nconst LinkToolbarButton = ({\n  getLinkUrl,\n  ...props\n}) => {\n  const editor = usePlateEditorState();\n  const type = getPluginType(editor, ELEMENT_LINK);\n  const isLink = !!(editor !== null && editor !== void 0 && editor.selection) && someNode(editor, {\n    match: {\n      type\n    }\n  });\n  return /*#__PURE__*/React.createElement(ToolbarButton, _extends({\n    active: isLink,\n    onMouseDown: async event => {\n      if (!editor) return;\n      event.preventDefault();\n      getAndUpsertLink(editor, getLinkUrl);\n    }\n  }, props));\n};\n\nexport { LinkElement, LinkToolbarButton, getLinkElementStyles };","map":{"version":3,"sources":["../src/LinkElement/LinkElement.styles.ts","../src/LinkElement/LinkElement.tsx","../src/LinkToolbarButton/LinkToolbarButton.tsx"],"names":["getLinkElementStyles","props","createStyles","prefixClassNames","root","css","LinkElement","element","rootProps","getRootProps","className","LinkToolbarButton","editor","usePlateEditorState","type","getPluginType","isLink","someNode","match","event","getAndUpsertLink"],"mappings":";;;;;;;MAMaA,oBAAoB,GAAIC,KAAD,IAClCC,YAAY,CACV;AAAEC,EAAAA,gBAAgB,EAAlB,aAAA;AAAmC,KAAGF;AAAtC,CADU,EAEV;AACEG,EAAAA,IAAI,EAAEC,GAAF,CAAA,CAAA,+HAAA,CAAA;AADN,CAFU,C;;;;;;;;;;;;;;;;;;;;MCCDC,WAAW,GAAIL,KAAD,IAA6C;AACtE,QAAM;AAAA,IAAA,UAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAmCM,IAAAA;AAAnC,MAAN,KAAA;AAEA,QAAMC,SAAS,GAAGC,YAAY,CAA9B,KAA8B,CAA9B;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAWJ,oBAAoB,CAArC,KAAqC,CAArC;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,IAAI,EAAEO,OAAO,CAFf,GAAA;AAIE,IAAA,SAAS,EAAEH,IAAI,CAACM;AAJlB,GAAA,EAAA,SAAA,EAAA,SAAA,EAAA;AAAA,IAAA,KAAA,EAGON,IAAI,CAACC;AAHZ,GAAA,CAAA,EADF,QACE,CADF;AAYD,C;;;;;;;MCVYM,iBAAiB,GAAG,CAAC;AAAA,EAAA,UAAA;AAEhC,KAAGV;AAF6B,CAAD,KAGH;AAC5B,QAAMW,MAAM,GAAGC,mBAAf,EAAA;AAEA,QAAMC,IAAI,GAAGC,aAAa,CAAA,MAAA,EAA1B,YAA0B,CAA1B;AACA,QAAMC,MAAM,GAAG,CAAC,EAACJ,MAAD,KAAA,IAACA,IAAAA,MAAD,KAAA,KAAA,CAACA,IAAAA,MAAM,CAAR,SAAC,CAAD,IAAuBK,QAAQ,CAAA,MAAA,EAAS;AAAEC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF;AAAT,GAAT,CAA9C;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,WAAW,EAAE,MAAA,KAAA,IAAiB;AAC5B,UAAI,CAAJ,MAAA,EAAa;AAEbK,MAAAA,KAAK,CAALA,cAAAA;AACAC,MAAAA,gBAAgB,CAAA,MAAA,EAAhBA,UAAgB,CAAhBA;AACD;AAPH,GAAA,EADF,KACE,CAAA,CADF;AAYD,C","sourcesContent":["import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\n\nexport const getLinkElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'LinkElement', ...props },\n    {\n      root: css`\n        color: #0078d4;\n        text-decoration: initial;\n\n        :hover,\n        :visited:hover {\n          color: #004578;\n          text-decoration: underline;\n        }\n\n        :visited {\n          color: #0078d4;\n        }\n      `,\n    }\n  );\n","import React from 'react';\nimport { LinkNodeData } from '@udecode/plate-link';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getLinkElementStyles } from './LinkElement.styles';\n\nexport const LinkElement = (props: StyledElementProps<LinkNodeData>) => {\n  const { attributes, children, nodeProps, element } = props;\n\n  const rootProps = getRootProps(props);\n  const { root } = getLinkElementStyles(props);\n\n  return (\n    <a\n      {...attributes}\n      href={element.url}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </a>\n  );\n};\n","import React from 'react';\nimport {\n  getPluginType,\n  someNode,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ELEMENT_LINK, getAndUpsertLink } from '@udecode/plate-link';\nimport { ToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport interface LinkToolbarButtonProps extends ToolbarButtonProps {\n  /**\n   * Default onMouseDown is getting the link url by calling this promise before inserting the image.\n   */\n  getLinkUrl?: (prevUrl: string | null) => Promise<string | null>;\n}\n\nexport const LinkToolbarButton = ({\n  getLinkUrl,\n  ...props\n}: LinkToolbarButtonProps) => {\n  const editor = usePlateEditorState()!;\n\n  const type = getPluginType(editor, ELEMENT_LINK);\n  const isLink = !!editor?.selection && someNode(editor, { match: { type } });\n\n  return (\n    <ToolbarButton\n      active={isLink}\n      onMouseDown={async (event) => {\n        if (!editor) return;\n\n        event.preventDefault();\n        getAndUpsertLink(editor, getLinkUrl);\n      }}\n      {...props}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
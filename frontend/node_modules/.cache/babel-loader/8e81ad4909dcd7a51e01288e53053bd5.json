{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghdus\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\team-project\\\\nlp-project-team2\\\\frontend\\\\src\\\\components\\\\BasicEditor.jsx\";\nimport React from \"react\";\nimport { Plate, ELEMENT_PARAGRAPH, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4, ELEMENT_H5, ELEMENT_H6, ELEMENT_BLOCKQUOTE, ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE, MARK_BOLD, MARK_ITALIC, MARK_UNDERLINE, MARK_STRIKETHROUGH, MARK_CODE, createParagraphPlugin, createBlockquotePlugin, createCodeBlockPlugin, createHeadingPlugin, createBoldPlugin, createItalicPlugin, createUnderlinePlugin, createStrikethroughPlugin, createCodePlugin, createPlugins, createPlateUI } from \"@udecode/plate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst editableProps = {\n  placeholder: \"Type…\",\n  style: {\n    padding: \"15px\"\n  }\n};\n\nconst BasicEditor = () => {\n  // Not important, quick helper to create a block element with (marked) text\n  const createElement = (text, {\n    type = ELEMENT_PARAGRAPH,\n    mark\n  } = {}) => {\n    const leaf = {\n      text\n    };\n\n    if (mark) {\n      leaf[mark] = true;\n    }\n\n    return {\n      type,\n      children: [leaf]\n    };\n  }; // Initial value, stored in VALUES.basicNodes\n\n\n  const initialValue = [createElement(\"🧱 기본 Plate 에디터에요!\", {\n    type: ELEMENT_H1\n  }), createElement(\"🔥 사용하기 어렵다면 그냥 textField 써도 됩니다\", {\n    type: ELEMENT_H2\n  }), createElement(\"요 아래는 블록들을 여러종류 써놓았습니다.\"), createElement(\"Heading 1\", {\n    type: ELEMENT_H1\n  }), createElement(\"Heading 2\", {\n    type: ELEMENT_H2\n  }), createElement(\"Heading 3\", {\n    type: ELEMENT_H3\n  }), createElement(\"Heading 4\", {\n    type: ELEMENT_H4\n  }), createElement(\"Heading 5\", {\n    type: ELEMENT_H5\n  }), createElement(\"Heading 6\", {\n    type: ELEMENT_H6\n  }), createElement(\"Blockquote\", {\n    type: ELEMENT_BLOCKQUOTE\n  }), {\n    type: ELEMENT_CODE_BLOCK,\n    children: [{\n      type: ELEMENT_CODE_LINE,\n      children: [{\n        text: \"const a = 'Hello';\"\n      }]\n    }, {\n      type: ELEMENT_CODE_LINE,\n      children: [{\n        text: \"const b = 'World';\"\n      }]\n    }]\n  }, createElement(\"💅 표시하기\", {\n    type: ELEMENT_H1\n  }), createElement(\"💧 기본 마킹\", {\n    type: ELEMENT_H2\n  }), createElement(\"The basic marks consist of text formatting such as bold, italic, underline, strikethrough, subscript, superscript, and code.\"), createElement(\"You can customize the type, the component and the hotkey for each of these.\"), createElement(\"This text is bold.\", {\n    mark: MARK_BOLD\n  }), createElement(\"This text is italic.\", {\n    mark: MARK_ITALIC\n  }), createElement(\"This text is underlined.\", {\n    mark: MARK_UNDERLINE\n  }), {\n    type: ELEMENT_PARAGRAPH,\n    children: [{\n      text: \"This text is bold, italic and underlined.\",\n      [MARK_BOLD]: true,\n      [MARK_ITALIC]: true,\n      [MARK_UNDERLINE]: true\n    }]\n  }, createElement(\"This is a strikethrough text.\", {\n    mark: MARK_STRIKETHROUGH\n  }), createElement(\"This is an inline code.\", {\n    mark: MARK_CODE\n  })];\n  const plugins = createPlugins([// elements\n  createParagraphPlugin(), // paragraph element\n  createBlockquotePlugin(), // blockquote element\n  createCodeBlockPlugin(), // code block element\n  createHeadingPlugin(), // heading elements\n  // marks\n  createBoldPlugin(), // bold mark\n  createItalicPlugin(), // italic mark\n  createUnderlinePlugin(), // underline mark\n  createStrikethroughPlugin(), // strikethrough mark\n  createCodePlugin() // code mark\n  ], {\n    components: createPlateUI()\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Plate, {\n      id: \"1\",\n      editableProps: editableProps,\n      initialValue: initialValue,\n      plugins: plugins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c = BasicEditor;\nexport default BasicEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicEditor\");","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/src/components/BasicEditor.jsx"],"names":["React","Plate","ELEMENT_PARAGRAPH","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","ELEMENT_BLOCKQUOTE","ELEMENT_CODE_BLOCK","ELEMENT_CODE_LINE","MARK_BOLD","MARK_ITALIC","MARK_UNDERLINE","MARK_STRIKETHROUGH","MARK_CODE","createParagraphPlugin","createBlockquotePlugin","createCodeBlockPlugin","createHeadingPlugin","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createStrikethroughPlugin","createCodePlugin","createPlugins","createPlateUI","editableProps","placeholder","style","padding","BasicEditor","createElement","text","type","mark","leaf","children","initialValue","plugins","components"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Plate,\r\n    ELEMENT_PARAGRAPH,\r\n    ELEMENT_H1,\r\n    ELEMENT_H2,\r\n    ELEMENT_H3,\r\n    ELEMENT_H4,\r\n    ELEMENT_H5,\r\n    ELEMENT_H6,\r\n    ELEMENT_BLOCKQUOTE,\r\n    ELEMENT_CODE_BLOCK,\r\n    ELEMENT_CODE_LINE,\r\n    MARK_BOLD,\r\n    MARK_ITALIC,\r\n    MARK_UNDERLINE,\r\n    MARK_STRIKETHROUGH,\r\n    MARK_CODE,\r\n    createParagraphPlugin,\r\n    createBlockquotePlugin,\r\n    createCodeBlockPlugin,\r\n    createHeadingPlugin,\r\n    createBoldPlugin,\r\n    createItalicPlugin,\r\n    createUnderlinePlugin,\r\n    createStrikethroughPlugin,\r\n    createCodePlugin,\r\n    createPlugins,\r\n    createPlateUI,\r\n} from \"@udecode/plate\";\r\n\r\nconst editableProps = {\r\n    placeholder: \"Type…\",\r\n    style: {\r\n        padding: \"15px\",\r\n    },\r\n};\r\n\r\nconst BasicEditor = () => {\r\n    // Not important, quick helper to create a block element with (marked) text\r\n    const createElement = (text, { type = ELEMENT_PARAGRAPH, mark } = {}) => {\r\n        const leaf = { text };\r\n        if (mark) {\r\n            leaf[mark] = true;\r\n        }\r\n\r\n        return {\r\n            type,\r\n            children: [leaf],\r\n        };\r\n    };\r\n\r\n    // Initial value, stored in VALUES.basicNodes\r\n    const initialValue = [\r\n        createElement(\"🧱 기본 Plate 에디터에요!\", { type: ELEMENT_H1 }),\r\n        createElement(\"🔥 사용하기 어렵다면 그냥 textField 써도 됩니다\", {\r\n            type: ELEMENT_H2,\r\n        }),\r\n        createElement(\"요 아래는 블록들을 여러종류 써놓았습니다.\"),\r\n        createElement(\"Heading 1\", { type: ELEMENT_H1 }),\r\n        createElement(\"Heading 2\", { type: ELEMENT_H2 }),\r\n        createElement(\"Heading 3\", { type: ELEMENT_H3 }),\r\n        createElement(\"Heading 4\", { type: ELEMENT_H4 }),\r\n        createElement(\"Heading 5\", { type: ELEMENT_H5 }),\r\n        createElement(\"Heading 6\", { type: ELEMENT_H6 }),\r\n        createElement(\"Blockquote\", { type: ELEMENT_BLOCKQUOTE }),\r\n        {\r\n            type: ELEMENT_CODE_BLOCK,\r\n            children: [\r\n                {\r\n                    type: ELEMENT_CODE_LINE,\r\n                    children: [\r\n                        {\r\n                            text: \"const a = 'Hello';\",\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    type: ELEMENT_CODE_LINE,\r\n                    children: [\r\n                        {\r\n                            text: \"const b = 'World';\",\r\n                        },\r\n                    ],\r\n                },\r\n            ],\r\n        },\r\n        createElement(\"💅 표시하기\", { type: ELEMENT_H1 }),\r\n        createElement(\"💧 기본 마킹\", { type: ELEMENT_H2 }),\r\n        createElement(\r\n            \"The basic marks consist of text formatting such as bold, italic, underline, strikethrough, subscript, superscript, and code.\"\r\n        ),\r\n        createElement(\r\n            \"You can customize the type, the component and the hotkey for each of these.\"\r\n        ),\r\n        createElement(\"This text is bold.\", { mark: MARK_BOLD }),\r\n        createElement(\"This text is italic.\", { mark: MARK_ITALIC }),\r\n        createElement(\"This text is underlined.\", {\r\n            mark: MARK_UNDERLINE,\r\n        }),\r\n        {\r\n            type: ELEMENT_PARAGRAPH,\r\n            children: [\r\n                {\r\n                    text: \"This text is bold, italic and underlined.\",\r\n                    [MARK_BOLD]: true,\r\n                    [MARK_ITALIC]: true,\r\n                    [MARK_UNDERLINE]: true,\r\n                },\r\n            ],\r\n        },\r\n        createElement(\"This is a strikethrough text.\", {\r\n            mark: MARK_STRIKETHROUGH,\r\n        }),\r\n        createElement(\"This is an inline code.\", { mark: MARK_CODE }),\r\n    ];\r\n\r\n    const plugins = createPlugins(\r\n        [\r\n            // elements\r\n            createParagraphPlugin(), // paragraph element\r\n            createBlockquotePlugin(), // blockquote element\r\n            createCodeBlockPlugin(), // code block element\r\n            createHeadingPlugin(), // heading elements\r\n\r\n            // marks\r\n            createBoldPlugin(), // bold mark\r\n            createItalicPlugin(), // italic mark\r\n            createUnderlinePlugin(), // underline mark\r\n            createStrikethroughPlugin(), // strikethrough mark\r\n            createCodePlugin(), // code mark\r\n        ],\r\n        {\r\n            components: createPlateUI(),\r\n        }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Plate\r\n                id=\"1\"\r\n                editableProps={editableProps}\r\n                initialValue={initialValue}\r\n                plugins={plugins}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicEditor;\r\n"]},"metadata":{},"sourceType":"module"}
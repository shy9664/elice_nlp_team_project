{"ast":null,"code":"var _jsxFileName = \"/Users/hyun/Desktop/vmvmvmvm/frontend/src/components/ReadonlyEditor.jsx\";\nimport React from \"react\";\nimport { Plate, createParagraphPlugin, createBlockquotePlugin, createCodeBlockPlugin, createHeadingPlugin, createPlugins, createPlateUI, createAlignPlugin, createBasicMarksPlugin, createFontColorPlugin, createFontBackgroundColorPlugin, ELEMENT_PARAGRAPH, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4, ELEMENT_H5, ELEMENT_H6 } from \"@udecode/plate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst editableProps = {\n  placeholder: \"Type…\",\n  style: {\n    padding: 15,\n    backgroundColor: \"white\",\n    marginTop: 15\n  }\n};\n\nconst ReadonlyEditor = ({\n  selectedDate,\n  isDataContent\n}) => {\n  // const initVal = () => {\n  //     console.log(selectedDate);\n  //     const str = );\n  //     return JSON.parse(str);\n  // };\n  // const initialValue = [\n  //     createElement(\"🧱 기본 Plate 에디터에요!\", { type: ELEMENT_H1 }),\n  //     createElement(\"🔥 사용하기 어렵다면 그냥 textField 써도 됩니다\", {\n  //         type: ELEMENT_H2,\n  //     }),\n  //     createElement(\"요 아래는 블록들을 여러종류 써놓았습니다.\"),\n  //     createElement(\"Heading 1\", { type: ELEMENT_H1 }),\n  //     createElement(\"Heading 2\", { type: ELEMENT_H2 }),\n  //     createElement(\"Heading 3\", { type: ELEMENT_H3 }),\n  //     createElement(\"Heading 4\", { type: ELEMENT_H4 }),\n  //     createElement(\"Heading 5\", { type: ELEMENT_H5 }),\n  //     createElement(\"Heading 6\", { type: ELEMENT_H6 }),\n  //     createElement(\"Blockquote\", { type: ELEMENT_BLOCKQUOTE }),\n  // {\n  //     type: ELEMENT_CODE_BLOCK,\n  //     children: [\n  //         {\n  //             type: ELEMENT_CODE_LINE,\n  //             children: [\n  //                 {\n  //                     text: \"const a = 'Hello';\",\n  //                 },\n  //             ],\n  //         },\n  //         {\n  //             type: ELEMENT_CODE_LINE,\n  //             children: [\n  //                 {\n  //                     text: \"const b = 'World';\",\n  //                 },\n  //             ],\n  //         },\n  //     ],\n  // },\n  // createElement(\"💅 표시하기\", { type: ELEMENT_H1 }),\n  // createElement(\"💧 기본 마킹\", { type: ELEMENT_H2 }),\n  // createElement(\n  //     \"The basic marks consist of text formatting such as bold, italic, underline, strikethrough, subscript, superscript, and code.\"\n  // ),\n  // createElement(\n  //     \"You can customize the type, the component and the hotkey for each of these.\"\n  // ),\n  // createElement(\"This text is bold.\", { mark: MARK_BOLD }),\n  // createElement(\"This text is italic.\", { mark: MARK_ITALIC }),\n  // createElement(\"This text is underlined.\", {\n  //     mark: MARK_UNDERLINE,\n  // }),\n  // {\n  //     type: ELEMENT_PARAGRAPH,\n  //     children: [\n  //         {\n  //             text: \"This text is bold, italic and underlined.\",\n  //             [MARK_BOLD]: true,\n  //             [MARK_ITALIC]: true,\n  //             [MARK_UNDERLINE]: true,\n  //         },\n  //     ],\n  // },\n  // createElement(\"This is a strikethrough text.\", {\n  //     mark: MARK_STRIKETHROUGH,\n  // }),\n  // createElement(\"This is an inline code.\", { mark: MARK_CODE }),\n  // ];\n  const plugins = createPlugins([// elements\n  createParagraphPlugin(), // paragraph element\n  createBlockquotePlugin(), // blockquote element\n  createCodeBlockPlugin(), // code block element\n  createHeadingPlugin(), // heading elements\n  // marks\n  // createBoldPlugin(), // bold mark\n  // createItalicPlugin(), // italic mark\n  // createUnderlinePlugin(), // underline mark\n  // createStrikethroughPlugin(), // strikethrough mark\n  // createCodePlugin(), // code mark\n  createAlignPlugin({\n    inject: {\n      props: {\n        validTypes: [ELEMENT_PARAGRAPH, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4, ELEMENT_H5, ELEMENT_H6]\n      }\n    }\n  }), createBasicMarksPlugin(), // 진하게 등등\n  createFontColorPlugin(), createFontBackgroundColorPlugin()], {\n    components: createPlateUI()\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Plate, {\n      id: \"1\",\n      editableProps: editableProps,\n      value: isDataContent ? JSON.parse(selectedDate) : JSON.parse(localStorage.getItem(selectedDate)),\n      plugins: plugins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c = ReadonlyEditor;\nexport default ReadonlyEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadonlyEditor\");","map":{"version":3,"sources":["/Users/hyun/Desktop/vmvmvmvm/frontend/src/components/ReadonlyEditor.jsx"],"names":["React","Plate","createParagraphPlugin","createBlockquotePlugin","createCodeBlockPlugin","createHeadingPlugin","createPlugins","createPlateUI","createAlignPlugin","createBasicMarksPlugin","createFontColorPlugin","createFontBackgroundColorPlugin","ELEMENT_PARAGRAPH","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","editableProps","placeholder","style","padding","backgroundColor","marginTop","ReadonlyEditor","selectedDate","isDataContent","plugins","inject","props","validTypes","components","JSON","parse","localStorage","getItem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,KADJ,EAEIC,qBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,EAKIC,mBALJ,EAMIC,aANJ,EAOIC,aAPJ,EAQIC,iBARJ,EASIC,sBATJ,EAUIC,qBAVJ,EAWIC,+BAXJ,EAYIC,iBAZJ,EAaIC,UAbJ,EAcIC,UAdJ,EAeIC,UAfJ,EAgBIC,UAhBJ,EAiBIC,UAjBJ,EAkBIC,UAlBJ,QAmBO,gBAnBP;;;AAqBA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE,OADK;AAElBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAE,EADN;AAEHC,IAAAA,eAAe,EAAE,OAFd;AAGHC,IAAAA,SAAS,EAAE;AAHR;AAFW,CAAtB;;AASA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAqC;AACxD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,OAAO,GAAGtB,aAAa,CACzB,CACI;AACAJ,EAAAA,qBAAqB,EAFzB,EAE6B;AACzBC,EAAAA,sBAAsB,EAH1B,EAG8B;AAC1BC,EAAAA,qBAAqB,EAJzB,EAI6B;AACzBC,EAAAA,mBAAmB,EALvB,EAK2B;AAEvB;AACA;AACA;AACA;AACA;AACA;AACAG,EAAAA,iBAAiB,CAAC;AACdqB,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE;AACHC,QAAAA,UAAU,EAAE,CACRnB,iBADQ,EAERC,UAFQ,EAGRC,UAHQ,EAIRC,UAJQ,EAKRC,UALQ,EAMRC,UANQ,EAORC,UAPQ;AADT;AADH;AADM,GAAD,CAbrB,EA4BIT,sBAAsB,EA5B1B,EA4B8B;AAC1BC,EAAAA,qBAAqB,EA7BzB,EA8BIC,+BAA+B,EA9BnC,CADyB,EAiCzB;AACIqB,IAAAA,UAAU,EAAEzB,aAAa;AAD7B,GAjCyB,CAA7B;AAsCA,sBACI;AAAA,2BACI,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,GADP;AAEI,MAAA,aAAa,EAAEY,aAFnB;AAGI,MAAA,KAAK,EACDQ,aAAa,GACPM,IAAI,CAACC,KAAL,CAAWR,YAAX,CADO,GAEPO,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBV,YAArB,CAAX,CANd;AAQI,MAAA,OAAO,EAAEE;AARb;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAcH,CA3HD;;KAAMH,c;AA6HN,eAAeA,cAAf","sourcesContent":["import React from \"react\";\nimport {\n    Plate,\n    createParagraphPlugin,\n    createBlockquotePlugin,\n    createCodeBlockPlugin,\n    createHeadingPlugin,\n    createPlugins,\n    createPlateUI,\n    createAlignPlugin,\n    createBasicMarksPlugin,\n    createFontColorPlugin,\n    createFontBackgroundColorPlugin,\n    ELEMENT_PARAGRAPH,\n    ELEMENT_H1,\n    ELEMENT_H2,\n    ELEMENT_H3,\n    ELEMENT_H4,\n    ELEMENT_H5,\n    ELEMENT_H6,\n} from \"@udecode/plate\";\n\nconst editableProps = {\n    placeholder: \"Type…\",\n    style: {\n        padding: 15,\n        backgroundColor: \"white\",\n        marginTop: 15,\n    },\n};\n\nconst ReadonlyEditor = ({ selectedDate, isDataContent }) => {\n    // const initVal = () => {\n    //     console.log(selectedDate);\n    //     const str = );\n    //     return JSON.parse(str);\n    // };\n\n    // const initialValue = [\n    //     createElement(\"🧱 기본 Plate 에디터에요!\", { type: ELEMENT_H1 }),\n    //     createElement(\"🔥 사용하기 어렵다면 그냥 textField 써도 됩니다\", {\n    //         type: ELEMENT_H2,\n    //     }),\n    //     createElement(\"요 아래는 블록들을 여러종류 써놓았습니다.\"),\n    //     createElement(\"Heading 1\", { type: ELEMENT_H1 }),\n    //     createElement(\"Heading 2\", { type: ELEMENT_H2 }),\n    //     createElement(\"Heading 3\", { type: ELEMENT_H3 }),\n    //     createElement(\"Heading 4\", { type: ELEMENT_H4 }),\n    //     createElement(\"Heading 5\", { type: ELEMENT_H5 }),\n    //     createElement(\"Heading 6\", { type: ELEMENT_H6 }),\n    //     createElement(\"Blockquote\", { type: ELEMENT_BLOCKQUOTE }),\n    // {\n    //     type: ELEMENT_CODE_BLOCK,\n    //     children: [\n    //         {\n    //             type: ELEMENT_CODE_LINE,\n    //             children: [\n    //                 {\n    //                     text: \"const a = 'Hello';\",\n    //                 },\n    //             ],\n    //         },\n    //         {\n    //             type: ELEMENT_CODE_LINE,\n    //             children: [\n    //                 {\n    //                     text: \"const b = 'World';\",\n    //                 },\n    //             ],\n    //         },\n    //     ],\n    // },\n    // createElement(\"💅 표시하기\", { type: ELEMENT_H1 }),\n    // createElement(\"💧 기본 마킹\", { type: ELEMENT_H2 }),\n    // createElement(\n    //     \"The basic marks consist of text formatting such as bold, italic, underline, strikethrough, subscript, superscript, and code.\"\n    // ),\n    // createElement(\n    //     \"You can customize the type, the component and the hotkey for each of these.\"\n    // ),\n    // createElement(\"This text is bold.\", { mark: MARK_BOLD }),\n    // createElement(\"This text is italic.\", { mark: MARK_ITALIC }),\n    // createElement(\"This text is underlined.\", {\n    //     mark: MARK_UNDERLINE,\n    // }),\n    // {\n    //     type: ELEMENT_PARAGRAPH,\n    //     children: [\n    //         {\n    //             text: \"This text is bold, italic and underlined.\",\n    //             [MARK_BOLD]: true,\n    //             [MARK_ITALIC]: true,\n    //             [MARK_UNDERLINE]: true,\n    //         },\n    //     ],\n    // },\n    // createElement(\"This is a strikethrough text.\", {\n    //     mark: MARK_STRIKETHROUGH,\n    // }),\n    // createElement(\"This is an inline code.\", { mark: MARK_CODE }),\n    // ];\n\n    const plugins = createPlugins(\n        [\n            // elements\n            createParagraphPlugin(), // paragraph element\n            createBlockquotePlugin(), // blockquote element\n            createCodeBlockPlugin(), // code block element\n            createHeadingPlugin(), // heading elements\n\n            // marks\n            // createBoldPlugin(), // bold mark\n            // createItalicPlugin(), // italic mark\n            // createUnderlinePlugin(), // underline mark\n            // createStrikethroughPlugin(), // strikethrough mark\n            // createCodePlugin(), // code mark\n            createAlignPlugin({\n                inject: {\n                    props: {\n                        validTypes: [\n                            ELEMENT_PARAGRAPH,\n                            ELEMENT_H1,\n                            ELEMENT_H2,\n                            ELEMENT_H3,\n                            ELEMENT_H4,\n                            ELEMENT_H5,\n                            ELEMENT_H6,\n                        ],\n                    },\n                },\n            }),\n            createBasicMarksPlugin(), // 진하게 등등\n            createFontColorPlugin(),\n            createFontBackgroundColorPlugin(),\n        ],\n        {\n            components: createPlateUI(),\n        }\n    );\n\n    return (\n        <>\n            <Plate\n                id=\"1\"\n                editableProps={editableProps}\n                value={\n                    isDataContent\n                        ? JSON.parse(selectedDate)\n                        : JSON.parse(localStorage.getItem(selectedDate))\n                }\n                plugins={plugins}\n            ></Plate>\n        </>\n    );\n};\n\nexport default ReadonlyEditor;\n"]},"metadata":{},"sourceType":"module"}
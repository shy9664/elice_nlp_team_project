{"ast":null,"code":"'use strict'; // A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexports.basename = basename;\nexports.dirname = dirname;\nexports.extname = extname;\nexports.join = join;\nexports.sep = '/';\n\nfunction basename(path, ext) {\n  var start = 0;\n  var end = -1;\n  var index;\n  var firstNonSlashEnd;\n  var seenNonSlash;\n  var extIndex;\n\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n\n  assertPath(path);\n  index = path.length;\n\n  if (ext === undefined || !ext.length || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47\n      /* `/` */\n      ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now.\n          if (seenNonSlash) {\n            start = index + 1;\n            break;\n          }\n        } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end);\n  }\n\n  if (ext === path) {\n    return '';\n  }\n\n  firstNonSlashEnd = -1;\n  extIndex = ext.length - 1;\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n\n  return path.slice(start, end);\n}\n\nfunction dirname(path) {\n  var end;\n  var unmatchedSlash;\n  var index;\n  assertPath(path);\n\n  if (!path.length) {\n    return '.';\n  }\n\n  end = -1;\n  index = path.length; // Prefix `--` is important to not run on `0`.\n\n  while (--index) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n        if (unmatchedSlash) {\n          end = index;\n          break;\n        }\n      } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n\n  return end < 0 ? path.charCodeAt(0) === 47\n  /* `/` */\n  ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47\n  /* `/` */\n  ? '//' : path.slice(0, end);\n}\n\nfunction extname(path) {\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n\n  var preDotState = 0;\n  var unmatchedSlash;\n  var code;\n  var index;\n  assertPath(path);\n  index = path.length;\n\n  while (index--) {\n    code = path.charCodeAt(index);\n\n    if (code === 47\n    /* `/` */\n    ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (unmatchedSlash) {\n          startPart = index + 1;\n          break;\n        }\n\n        continue;\n      }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n\n    if (code === 46\n    /* `.` */\n    ) {\n        // If this is our first dot, mark it as the start of our extension.\n        if (startDot < 0) {\n          startDot = index;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n\n  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n}\n\nfunction join() {\n  var index = -1;\n  var joined;\n\n  while (++index < arguments.length) {\n    assertPath(arguments[index]);\n\n    if (arguments[index]) {\n      joined = joined === undefined ? arguments[index] : joined + '/' + arguments[index];\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined);\n} // Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\n\n\nfunction normalize(path) {\n  var absolute;\n  var value;\n  assertPath(path);\n  absolute = path.charCodeAt(0) === 47;\n  /* `/` */\n  // Normalize the path according to POSIX rules.\n\n  value = normalizeString(path, !absolute);\n\n  if (!value.length && !absolute) {\n    value = '.';\n  }\n\n  if (value.length && path.charCodeAt(path.length - 1) === 47\n  /* / */\n  ) {\n      value += '/';\n    }\n\n  return absolute ? '/' + value : value;\n} // Resolve `.` and `..` elements in a path with directory names.\n\n\nfunction normalizeString(path, allowAboveRoot) {\n  var result = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var index = -1;\n  var code;\n  var lastSlashIndex;\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47\n    /* `/` */\n    ) {\n        break;\n      } else {\n      code = 47;\n      /* `/` */\n    }\n\n    if (code === 47\n    /* `/` */\n    ) {\n        if (lastSlash === index - 1 || dots === 1) {// Empty.\n        } else if (lastSlash !== index - 1 && dots === 2) {\n          if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46\n          /* `.` */\n          || result.charCodeAt(result.length - 2) !== 46\n          /* `.` */\n          ) {\n              if (result.length > 2) {\n                lastSlashIndex = result.lastIndexOf('/');\n                /* istanbul ignore else - No clue how to cover it. */\n\n                if (lastSlashIndex !== result.length - 1) {\n                  if (lastSlashIndex < 0) {\n                    result = '';\n                    lastSegmentLength = 0;\n                  } else {\n                    result = result.slice(0, lastSlashIndex);\n                    lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n                  }\n\n                  lastSlash = index;\n                  dots = 0;\n                  continue;\n                }\n              } else if (result.length) {\n                result = '';\n                lastSegmentLength = 0;\n                lastSlash = index;\n                dots = 0;\n                continue;\n              }\n            }\n\n          if (allowAboveRoot) {\n            result = result.length ? result + '/..' : '..';\n            lastSegmentLength = 2;\n          }\n        } else {\n          if (result.length) {\n            result += '/' + path.slice(lastSlash + 1, index);\n          } else {\n            result = path.slice(lastSlash + 1, index);\n          }\n\n          lastSegmentLength = index - lastSlash - 1;\n        }\n\n        lastSlash = index;\n        dots = 0;\n      } else if (code === 46\n    /* `.` */\n    && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return result;\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/ë°”íƒ• í™”ë©´/team-project/nlp-project-team2/frontend/node_modules/vfile/lib/minpath.browser.js"],"names":["exports","basename","dirname","extname","join","sep","path","ext","start","end","index","firstNonSlashEnd","seenNonSlash","extIndex","undefined","TypeError","assertPath","length","charCodeAt","slice","unmatchedSlash","startDot","startPart","preDotState","code","joined","arguments","normalize","absolute","value","normalizeString","allowAboveRoot","result","lastSegmentLength","lastSlash","dots","lastSlashIndex","lastIndexOf","JSON","stringify"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAACC,QAAR,GAAmBA,QAAnB;AACAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACAH,OAAO,CAACI,IAAR,GAAeA,IAAf;AACAJ,OAAO,CAACK,GAAR,GAAc,GAAd;;AAEA,SAASJ,QAAT,CAAkBK,IAAlB,EAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,KAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAIN,GAAG,KAAKO,SAAR,IAAqB,OAAOP,GAAP,KAAe,QAAxC,EAAkD;AAChD,UAAM,IAAIQ,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAEDC,EAAAA,UAAU,CAACV,IAAD,CAAV;AACAI,EAAAA,KAAK,GAAGJ,IAAI,CAACW,MAAb;;AAEA,MAAIV,GAAG,KAAKO,SAAR,IAAqB,CAACP,GAAG,CAACU,MAA1B,IAAoCV,GAAG,CAACU,MAAJ,GAAaX,IAAI,CAACW,MAA1D,EAAkE;AAChE,WAAOP,KAAK,EAAZ,EAAgB;AACd,UAAIJ,IAAI,CAACY,UAAL,CAAgBR,KAAhB,MAA2B;AAAG;AAAlC,QAA6C;AAC3C;AACA;AACA,cAAIE,YAAJ,EAAkB;AAChBJ,YAAAA,KAAK,GAAGE,KAAK,GAAG,CAAhB;AACA;AACD;AACF,SAPD,MAOO,IAAID,GAAG,GAAG,CAAV,EAAa;AAClB;AACA;AACAG,QAAAA,YAAY,GAAG,IAAf;AACAH,QAAAA,GAAG,GAAGC,KAAK,GAAG,CAAd;AACD;AACF;;AAED,WAAOD,GAAG,GAAG,CAAN,GAAU,EAAV,GAAeH,IAAI,CAACa,KAAL,CAAWX,KAAX,EAAkBC,GAAlB,CAAtB;AACD;;AAED,MAAIF,GAAG,KAAKD,IAAZ,EAAkB;AAChB,WAAO,EAAP;AACD;;AAEDK,EAAAA,gBAAgB,GAAG,CAAC,CAApB;AACAE,EAAAA,QAAQ,GAAGN,GAAG,CAACU,MAAJ,GAAa,CAAxB;;AAEA,SAAOP,KAAK,EAAZ,EAAgB;AACd,QAAIJ,IAAI,CAACY,UAAL,CAAgBR,KAAhB,MAA2B;AAAG;AAAlC,MAA6C;AAC3C;AACA;AACA,YAAIE,YAAJ,EAAkB;AAChBJ,UAAAA,KAAK,GAAGE,KAAK,GAAG,CAAhB;AACA;AACD;AACF,OAPD,MAOO;AACL,UAAIC,gBAAgB,GAAG,CAAvB,EAA0B;AACxB;AACA;AACAC,QAAAA,YAAY,GAAG,IAAf;AACAD,QAAAA,gBAAgB,GAAGD,KAAK,GAAG,CAA3B;AACD;;AAED,UAAIG,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACjB;AACA,YAAIP,IAAI,CAACY,UAAL,CAAgBR,KAAhB,MAA2BH,GAAG,CAACW,UAAJ,CAAeL,QAAQ,EAAvB,CAA/B,EAA2D;AACzD,cAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACA;AACAJ,YAAAA,GAAG,GAAGC,KAAN;AACD;AACF,SAND,MAMO;AACL;AACA;AACAG,UAAAA,QAAQ,GAAG,CAAC,CAAZ;AACAJ,UAAAA,GAAG,GAAGE,gBAAN;AACD;AACF;AACF;AACF;;AAED,MAAIH,KAAK,KAAKC,GAAd,EAAmB;AACjBA,IAAAA,GAAG,GAAGE,gBAAN;AACD,GAFD,MAEO,IAAIF,GAAG,GAAG,CAAV,EAAa;AAClBA,IAAAA,GAAG,GAAGH,IAAI,CAACW,MAAX;AACD;;AAED,SAAOX,IAAI,CAACa,KAAL,CAAWX,KAAX,EAAkBC,GAAlB,CAAP;AACD;;AAED,SAASP,OAAT,CAAiBI,IAAjB,EAAuB;AACrB,MAAIG,GAAJ;AACA,MAAIW,cAAJ;AACA,MAAIV,KAAJ;AAEAM,EAAAA,UAAU,CAACV,IAAD,CAAV;;AAEA,MAAI,CAACA,IAAI,CAACW,MAAV,EAAkB;AAChB,WAAO,GAAP;AACD;;AAEDR,EAAAA,GAAG,GAAG,CAAC,CAAP;AACAC,EAAAA,KAAK,GAAGJ,IAAI,CAACW,MAAb,CAZqB,CAcrB;;AACA,SAAO,EAAEP,KAAT,EAAgB;AACd,QAAIJ,IAAI,CAACY,UAAL,CAAgBR,KAAhB,MAA2B;AAAG;AAAlC,MAA6C;AAC3C,YAAIU,cAAJ,EAAoB;AAClBX,UAAAA,GAAG,GAAGC,KAAN;AACA;AACD;AACF,OALD,MAKO,IAAI,CAACU,cAAL,EAAqB;AAC1B;AACAA,MAAAA,cAAc,GAAG,IAAjB;AACD;AACF;;AAED,SAAOX,GAAG,GAAG,CAAN,GACHH,IAAI,CAACY,UAAL,CAAgB,CAAhB,MAAuB;AAAG;AAA1B,IACE,GADF,GAEE,GAHC,GAIHT,GAAG,KAAK,CAAR,IAAaH,IAAI,CAACY,UAAL,CAAgB,CAAhB,MAAuB;AAAG;AAAvC,IACA,IADA,GAEAZ,IAAI,CAACa,KAAL,CAAW,CAAX,EAAcV,GAAd,CANJ;AAOD;;AAED,SAASN,OAAT,CAAiBG,IAAjB,EAAuB;AACrB,MAAIe,QAAQ,GAAG,CAAC,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIb,GAAG,GAAG,CAAC,CAAX,CAHqB,CAIrB;AACA;;AACA,MAAIc,WAAW,GAAG,CAAlB;AACA,MAAIH,cAAJ;AACA,MAAII,IAAJ;AACA,MAAId,KAAJ;AAEAM,EAAAA,UAAU,CAACV,IAAD,CAAV;AAEAI,EAAAA,KAAK,GAAGJ,IAAI,CAACW,MAAb;;AAEA,SAAOP,KAAK,EAAZ,EAAgB;AACdc,IAAAA,IAAI,GAAGlB,IAAI,CAACY,UAAL,CAAgBR,KAAhB,CAAP;;AAEA,QAAIc,IAAI,KAAK;AAAG;AAAhB,MAA2B;AACzB;AACA;AACA,YAAIJ,cAAJ,EAAoB;AAClBE,UAAAA,SAAS,GAAGZ,KAAK,GAAG,CAApB;AACA;AACD;;AAED;AACD;;AAED,QAAID,GAAG,GAAG,CAAV,EAAa;AACX;AACA;AACAW,MAAAA,cAAc,GAAG,IAAjB;AACAX,MAAAA,GAAG,GAAGC,KAAK,GAAG,CAAd;AACD;;AAED,QAAIc,IAAI,KAAK;AAAG;AAAhB,MAA2B;AACzB;AACA,YAAIH,QAAQ,GAAG,CAAf,EAAkB;AAChBA,UAAAA,QAAQ,GAAGX,KAAX;AACD,SAFD,MAEO,IAAIa,WAAW,KAAK,CAApB,EAAuB;AAC5BA,UAAAA,WAAW,GAAG,CAAd;AACD;AACF,OAPD,MAOO,IAAIF,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACxB;AACA;AACAE,MAAAA,WAAW,GAAG,CAAC,CAAf;AACD;AACF;;AAED,MACEF,QAAQ,GAAG,CAAX,IACAZ,GAAG,GAAG,CADN,IAEA;AACAc,EAAAA,WAAW,KAAK,CAHhB,IAIA;AACCA,EAAAA,WAAW,KAAK,CAAhB,IAAqBF,QAAQ,KAAKZ,GAAG,GAAG,CAAxC,IAA6CY,QAAQ,KAAKC,SAAS,GAAG,CANzE,EAOE;AACA,WAAO,EAAP;AACD;;AAED,SAAOhB,IAAI,CAACa,KAAL,CAAWE,QAAX,EAAqBZ,GAArB,CAAP;AACD;;AAED,SAASL,IAAT,GAAgB;AACd,MAAIM,KAAK,GAAG,CAAC,CAAb;AACA,MAAIe,MAAJ;;AAEA,SAAO,EAAEf,KAAF,GAAUgB,SAAS,CAACT,MAA3B,EAAmC;AACjCD,IAAAA,UAAU,CAACU,SAAS,CAAChB,KAAD,CAAV,CAAV;;AAEA,QAAIgB,SAAS,CAAChB,KAAD,CAAb,EAAsB;AACpBe,MAAAA,MAAM,GACJA,MAAM,KAAKX,SAAX,GACIY,SAAS,CAAChB,KAAD,CADb,GAEIe,MAAM,GAAG,GAAT,GAAeC,SAAS,CAAChB,KAAD,CAH9B;AAID;AACF;;AAED,SAAOe,MAAM,KAAKX,SAAX,GAAuB,GAAvB,GAA6Ba,SAAS,CAACF,MAAD,CAA7C;AACD,C,CAED;AACA;;;AACA,SAASE,SAAT,CAAmBrB,IAAnB,EAAyB;AACvB,MAAIsB,QAAJ;AACA,MAAIC,KAAJ;AAEAb,EAAAA,UAAU,CAACV,IAAD,CAAV;AAEAsB,EAAAA,QAAQ,GAAGtB,IAAI,CAACY,UAAL,CAAgB,CAAhB,MAAuB,EAAlC;AAAqC;AAErC;;AACAW,EAAAA,KAAK,GAAGC,eAAe,CAACxB,IAAD,EAAO,CAACsB,QAAR,CAAvB;;AAEA,MAAI,CAACC,KAAK,CAACZ,MAAP,IAAiB,CAACW,QAAtB,EAAgC;AAC9BC,IAAAA,KAAK,GAAG,GAAR;AACD;;AAED,MAAIA,KAAK,CAACZ,MAAN,IAAgBX,IAAI,CAACY,UAAL,CAAgBZ,IAAI,CAACW,MAAL,GAAc,CAA9B,MAAqC;AAAG;AAA5D,IAAqE;AACnEY,MAAAA,KAAK,IAAI,GAAT;AACD;;AAED,SAAOD,QAAQ,GAAG,MAAMC,KAAT,GAAiBA,KAAhC;AACD,C,CAED;;;AACA,SAASC,eAAT,CAAyBxB,IAAzB,EAA+ByB,cAA/B,EAA+C;AAC7C,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,iBAAiB,GAAG,CAAxB;AACA,MAAIC,SAAS,GAAG,CAAC,CAAjB;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIzB,KAAK,GAAG,CAAC,CAAb;AACA,MAAIc,IAAJ;AACA,MAAIY,cAAJ;;AAEA,SAAO,EAAE1B,KAAF,IAAWJ,IAAI,CAACW,MAAvB,EAA+B;AAC7B,QAAIP,KAAK,GAAGJ,IAAI,CAACW,MAAjB,EAAyB;AACvBO,MAAAA,IAAI,GAAGlB,IAAI,CAACY,UAAL,CAAgBR,KAAhB,CAAP;AACD,KAFD,MAEO,IAAIc,IAAI,KAAK;AAAG;AAAhB,MAA2B;AAChC;AACD,OAFM,MAEA;AACLA,MAAAA,IAAI,GAAG,EAAP;AAAU;AACX;;AAED,QAAIA,IAAI,KAAK;AAAG;AAAhB,MAA2B;AACzB,YAAIU,SAAS,KAAKxB,KAAK,GAAG,CAAtB,IAA2ByB,IAAI,KAAK,CAAxC,EAA2C,CACzC;AACD,SAFD,MAEO,IAAID,SAAS,KAAKxB,KAAK,GAAG,CAAtB,IAA2ByB,IAAI,KAAK,CAAxC,EAA2C;AAChD,cACEH,MAAM,CAACf,MAAP,GAAgB,CAAhB,IACAgB,iBAAiB,KAAK,CADtB,IAEAD,MAAM,CAACd,UAAP,CAAkBc,MAAM,CAACf,MAAP,GAAgB,CAAlC,MAAyC;AAAG;AAF5C,aAGAe,MAAM,CAACd,UAAP,CAAkBc,MAAM,CAACf,MAAP,GAAgB,CAAlC,MAAyC;AAAG;AAJ9C,YAKE;AACA,kBAAIe,MAAM,CAACf,MAAP,GAAgB,CAApB,EAAuB;AACrBmB,gBAAAA,cAAc,GAAGJ,MAAM,CAACK,WAAP,CAAmB,GAAnB,CAAjB;AAEA;;AACA,oBAAID,cAAc,KAAKJ,MAAM,CAACf,MAAP,GAAgB,CAAvC,EAA0C;AACxC,sBAAImB,cAAc,GAAG,CAArB,EAAwB;AACtBJ,oBAAAA,MAAM,GAAG,EAAT;AACAC,oBAAAA,iBAAiB,GAAG,CAApB;AACD,mBAHD,MAGO;AACLD,oBAAAA,MAAM,GAAGA,MAAM,CAACb,KAAP,CAAa,CAAb,EAAgBiB,cAAhB,CAAT;AACAH,oBAAAA,iBAAiB,GAAGD,MAAM,CAACf,MAAP,GAAgB,CAAhB,GAAoBe,MAAM,CAACK,WAAP,CAAmB,GAAnB,CAAxC;AACD;;AAEDH,kBAAAA,SAAS,GAAGxB,KAAZ;AACAyB,kBAAAA,IAAI,GAAG,CAAP;AACA;AACD;AACF,eAjBD,MAiBO,IAAIH,MAAM,CAACf,MAAX,EAAmB;AACxBe,gBAAAA,MAAM,GAAG,EAAT;AACAC,gBAAAA,iBAAiB,GAAG,CAApB;AACAC,gBAAAA,SAAS,GAAGxB,KAAZ;AACAyB,gBAAAA,IAAI,GAAG,CAAP;AACA;AACD;AACF;;AAED,cAAIJ,cAAJ,EAAoB;AAClBC,YAAAA,MAAM,GAAGA,MAAM,CAACf,MAAP,GAAgBe,MAAM,GAAG,KAAzB,GAAiC,IAA1C;AACAC,YAAAA,iBAAiB,GAAG,CAApB;AACD;AACF,SArCM,MAqCA;AACL,cAAID,MAAM,CAACf,MAAX,EAAmB;AACjBe,YAAAA,MAAM,IAAI,MAAM1B,IAAI,CAACa,KAAL,CAAWe,SAAS,GAAG,CAAvB,EAA0BxB,KAA1B,CAAhB;AACD,WAFD,MAEO;AACLsB,YAAAA,MAAM,GAAG1B,IAAI,CAACa,KAAL,CAAWe,SAAS,GAAG,CAAvB,EAA0BxB,KAA1B,CAAT;AACD;;AAEDuB,UAAAA,iBAAiB,GAAGvB,KAAK,GAAGwB,SAAR,GAAoB,CAAxC;AACD;;AAEDA,QAAAA,SAAS,GAAGxB,KAAZ;AACAyB,QAAAA,IAAI,GAAG,CAAP;AACD,OApDD,MAoDO,IAAIX,IAAI,KAAK;AAAG;AAAZ,OAAyBW,IAAI,GAAG,CAAC,CAArC,EAAwC;AAC7CA,MAAAA,IAAI;AACL,KAFM,MAEA;AACLA,MAAAA,IAAI,GAAG,CAAC,CAAR;AACD;AACF;;AAED,SAAOH,MAAP;AACD;;AAED,SAAShB,UAAT,CAAoBV,IAApB,EAA0B;AACxB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIS,SAAJ,CACJ,qCAAqCuB,IAAI,CAACC,SAAL,CAAejC,IAAf,CADjC,CAAN;AAGD;AACF","sourcesContent":["'use strict'\r\n\r\n// A derivative work based on:\r\n// <https://github.com/browserify/path-browserify>.\r\n// Which is licensed:\r\n//\r\n// MIT License\r\n//\r\n// Copyright (c) 2013 James Halliday\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n// this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to\r\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n// the Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// A derivative work based on:\r\n//\r\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\r\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\r\n// Which is licensed:\r\n//\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nexports.basename = basename\r\nexports.dirname = dirname\r\nexports.extname = extname\r\nexports.join = join\r\nexports.sep = '/'\r\n\r\nfunction basename(path, ext) {\r\n  var start = 0\r\n  var end = -1\r\n  var index\r\n  var firstNonSlashEnd\r\n  var seenNonSlash\r\n  var extIndex\r\n\r\n  if (ext !== undefined && typeof ext !== 'string') {\r\n    throw new TypeError('\"ext\" argument must be a string')\r\n  }\r\n\r\n  assertPath(path)\r\n  index = path.length\r\n\r\n  if (ext === undefined || !ext.length || ext.length > path.length) {\r\n    while (index--) {\r\n      if (path.charCodeAt(index) === 47 /* `/` */) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now.\r\n        if (seenNonSlash) {\r\n          start = index + 1\r\n          break\r\n        }\r\n      } else if (end < 0) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component.\r\n        seenNonSlash = true\r\n        end = index + 1\r\n      }\r\n    }\r\n\r\n    return end < 0 ? '' : path.slice(start, end)\r\n  }\r\n\r\n  if (ext === path) {\r\n    return ''\r\n  }\r\n\r\n  firstNonSlashEnd = -1\r\n  extIndex = ext.length - 1\r\n\r\n  while (index--) {\r\n    if (path.charCodeAt(index) === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (seenNonSlash) {\r\n        start = index + 1\r\n        break\r\n      }\r\n    } else {\r\n      if (firstNonSlashEnd < 0) {\r\n        // We saw the first non-path separator, remember this index in case\r\n        // we need it if the extension ends up not matching.\r\n        seenNonSlash = true\r\n        firstNonSlashEnd = index + 1\r\n      }\r\n\r\n      if (extIndex > -1) {\r\n        // Try to match the explicit extension.\r\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\r\n          if (extIndex < 0) {\r\n            // We matched the extension, so mark this as the end of our path\r\n            // component\r\n            end = index\r\n          }\r\n        } else {\r\n          // Extension does not match, so our result is the entire path\r\n          // component\r\n          extIndex = -1\r\n          end = firstNonSlashEnd\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    end = firstNonSlashEnd\r\n  } else if (end < 0) {\r\n    end = path.length\r\n  }\r\n\r\n  return path.slice(start, end)\r\n}\r\n\r\nfunction dirname(path) {\r\n  var end\r\n  var unmatchedSlash\r\n  var index\r\n\r\n  assertPath(path)\r\n\r\n  if (!path.length) {\r\n    return '.'\r\n  }\r\n\r\n  end = -1\r\n  index = path.length\r\n\r\n  // Prefix `--` is important to not run on `0`.\r\n  while (--index) {\r\n    if (path.charCodeAt(index) === 47 /* `/` */) {\r\n      if (unmatchedSlash) {\r\n        end = index\r\n        break\r\n      }\r\n    } else if (!unmatchedSlash) {\r\n      // We saw the first non-path separator\r\n      unmatchedSlash = true\r\n    }\r\n  }\r\n\r\n  return end < 0\r\n    ? path.charCodeAt(0) === 47 /* `/` */\r\n      ? '/'\r\n      : '.'\r\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\r\n    ? '//'\r\n    : path.slice(0, end)\r\n}\r\n\r\nfunction extname(path) {\r\n  var startDot = -1\r\n  var startPart = 0\r\n  var end = -1\r\n  // Track the state of characters (if any) we see before our first dot and\r\n  // after any path separator we find.\r\n  var preDotState = 0\r\n  var unmatchedSlash\r\n  var code\r\n  var index\r\n\r\n  assertPath(path)\r\n\r\n  index = path.length\r\n\r\n  while (index--) {\r\n    code = path.charCodeAt(index)\r\n\r\n    if (code === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (unmatchedSlash) {\r\n        startPart = index + 1\r\n        break\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    if (end < 0) {\r\n      // We saw the first non-path separator, mark this as the end of our\r\n      // extension.\r\n      unmatchedSlash = true\r\n      end = index + 1\r\n    }\r\n\r\n    if (code === 46 /* `.` */) {\r\n      // If this is our first dot, mark it as the start of our extension.\r\n      if (startDot < 0) {\r\n        startDot = index\r\n      } else if (preDotState !== 1) {\r\n        preDotState = 1\r\n      }\r\n    } else if (startDot > -1) {\r\n      // We saw a non-dot and non-path separator before our dot, so we should\r\n      // have a good chance at having a non-empty extension.\r\n      preDotState = -1\r\n    }\r\n  }\r\n\r\n  if (\r\n    startDot < 0 ||\r\n    end < 0 ||\r\n    // We saw a non-dot character immediately before the dot.\r\n    preDotState === 0 ||\r\n    // The (right-most) trimmed path component is exactly `..`.\r\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return path.slice(startDot, end)\r\n}\r\n\r\nfunction join() {\r\n  var index = -1\r\n  var joined\r\n\r\n  while (++index < arguments.length) {\r\n    assertPath(arguments[index])\r\n\r\n    if (arguments[index]) {\r\n      joined =\r\n        joined === undefined\r\n          ? arguments[index]\r\n          : joined + '/' + arguments[index]\r\n    }\r\n  }\r\n\r\n  return joined === undefined ? '.' : normalize(joined)\r\n}\r\n\r\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\r\n// manually removed from it.\r\nfunction normalize(path) {\r\n  var absolute\r\n  var value\r\n\r\n  assertPath(path)\r\n\r\n  absolute = path.charCodeAt(0) === 47 /* `/` */\r\n\r\n  // Normalize the path according to POSIX rules.\r\n  value = normalizeString(path, !absolute)\r\n\r\n  if (!value.length && !absolute) {\r\n    value = '.'\r\n  }\r\n\r\n  if (value.length && path.charCodeAt(path.length - 1) === 47 /* / */) {\r\n    value += '/'\r\n  }\r\n\r\n  return absolute ? '/' + value : value\r\n}\r\n\r\n// Resolve `.` and `..` elements in a path with directory names.\r\nfunction normalizeString(path, allowAboveRoot) {\r\n  var result = ''\r\n  var lastSegmentLength = 0\r\n  var lastSlash = -1\r\n  var dots = 0\r\n  var index = -1\r\n  var code\r\n  var lastSlashIndex\r\n\r\n  while (++index <= path.length) {\r\n    if (index < path.length) {\r\n      code = path.charCodeAt(index)\r\n    } else if (code === 47 /* `/` */) {\r\n      break\r\n    } else {\r\n      code = 47 /* `/` */\r\n    }\r\n\r\n    if (code === 47 /* `/` */) {\r\n      if (lastSlash === index - 1 || dots === 1) {\r\n        // Empty.\r\n      } else if (lastSlash !== index - 1 && dots === 2) {\r\n        if (\r\n          result.length < 2 ||\r\n          lastSegmentLength !== 2 ||\r\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\r\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\r\n        ) {\r\n          if (result.length > 2) {\r\n            lastSlashIndex = result.lastIndexOf('/')\r\n\r\n            /* istanbul ignore else - No clue how to cover it. */\r\n            if (lastSlashIndex !== result.length - 1) {\r\n              if (lastSlashIndex < 0) {\r\n                result = ''\r\n                lastSegmentLength = 0\r\n              } else {\r\n                result = result.slice(0, lastSlashIndex)\r\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\r\n              }\r\n\r\n              lastSlash = index\r\n              dots = 0\r\n              continue\r\n            }\r\n          } else if (result.length) {\r\n            result = ''\r\n            lastSegmentLength = 0\r\n            lastSlash = index\r\n            dots = 0\r\n            continue\r\n          }\r\n        }\r\n\r\n        if (allowAboveRoot) {\r\n          result = result.length ? result + '/..' : '..'\r\n          lastSegmentLength = 2\r\n        }\r\n      } else {\r\n        if (result.length) {\r\n          result += '/' + path.slice(lastSlash + 1, index)\r\n        } else {\r\n          result = path.slice(lastSlash + 1, index)\r\n        }\r\n\r\n        lastSegmentLength = index - lastSlash - 1\r\n      }\r\n\r\n      lastSlash = index\r\n      dots = 0\r\n    } else if (code === 46 /* `.` */ && dots > -1) {\r\n      dots++\r\n    } else {\r\n      dots = -1\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError(\r\n      'Path must be a string. Received ' + JSON.stringify(path)\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
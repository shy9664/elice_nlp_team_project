{"ast":null,"code":"/* **********************************************\r\n     Begin prism-core.js\r\n********************************************** */\n/// <reference lib=\"WebWorker\"/>\nvar _self = typeof window !== 'undefined' ? window // if in browser\n: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\n: {} // if in node js\n;\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\n\n\nvar Prism = function (_self) {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0; // The grammar object for plaintext\n\n  var plainTextGrammar = {};\n  var _ = {\n    /**\r\n     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n     * additional languages or plugins yourself.\r\n     *\r\n     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n     *\r\n     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n     * empty Prism object into the global scope before loading the Prism script like this:\r\n     *\r\n     * ```js\r\n     * window.Prism = window.Prism || {};\r\n     * Prism.manual = true;\r\n     * // add a new <script> to load Prism's script\r\n     * ```\r\n     *\r\n     * @default false\r\n     * @type {boolean}\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    manual: _self.Prism && _self.Prism.manual,\n    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n    /**\r\n     * A namespace for utility methods.\r\n     *\r\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n     * change or disappear at any time.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n\n      /**\r\n       * Returns the name of the type of the given value.\r\n       *\r\n       * @param {any} o\r\n       * @returns {string}\r\n       * @example\r\n       * type(null)      === 'Null'\r\n       * type(undefined) === 'Undefined'\r\n       * type(123)       === 'Number'\r\n       * type('foo')     === 'String'\r\n       * type(true)      === 'Boolean'\r\n       * type([1, 2])    === 'Array'\r\n       * type({})        === 'Object'\r\n       * type(String)    === 'Function'\r\n       * type(/abc+/)    === 'RegExp'\r\n       */\n      type: function (o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n\n      /**\r\n       * Returns a unique number for the given object. Later calls will still return the same number.\r\n       *\r\n       * @param {Object} obj\r\n       * @returns {number}\r\n       */\n      objId: function (obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n\n        return obj['__id'];\n      },\n\n      /**\r\n       * Creates a deep clone of the given object.\r\n       *\r\n       * The main intended use of this function is to clone language definitions.\r\n       *\r\n       * @param {T} o\r\n       * @param {Record<number, any>} [visited]\r\n       * @returns {T}\r\n       * @template T\r\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone =\n            /** @type {Record<string, any>} */\n            {};\n            visited[id] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          case 'Array':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = [];\n            visited[id] = clone;\n\n            /** @type {Array} */\n\n            /** @type {any} */\n            o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          default:\n            return o;\n        }\n      },\n\n      /**\r\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n       *\r\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n       *\r\n       * @param {Element} element\r\n       * @returns {string}\r\n       */\n      getLanguage: function (element) {\n        while (element && !lang.test(element.className)) {\n          element = element.parentElement;\n        }\n\n        if (element) {\n          return (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n        }\n\n        return 'none';\n      },\n\n      /**\r\n       * Returns the script element that is currently executing.\r\n       *\r\n       * This does __not__ work for line script element.\r\n       *\r\n       * @returns {HTMLScriptElement | null}\r\n       */\n      currentScript: function () {\n        if (typeof document === 'undefined') {\n          return null;\n        }\n\n        if ('currentScript' in document && 1 < 2\n        /* hack to trip TS' flow analysis */\n        ) {\n            return (\n              /** @type {any} */\n              document.currentScript\n            );\n          } // IE11 workaround\n        // we'll get the src of the current script by parsing IE11's error stack trace\n        // this will not work for inline scripts\n\n\n        try {\n          throw new Error();\n        } catch (err) {\n          // Get file src url from stack. Specifically works with the format of stack traces in IE.\n          // A stack will look like this:\n          //\n          // Error\n          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n          //    at Global code (http://localhost/components/prism-core.js:606:1)\n          var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\n          if (src) {\n            var scripts = document.getElementsByTagName('script');\n\n            for (var i in scripts) {\n              if (scripts[i].src == src) {\n                return scripts[i];\n              }\n            }\n          }\n\n          return null;\n        }\n      },\n\n      /**\r\n       * Returns whether a given class is active for `element`.\r\n       *\r\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n       * given class is just the given class with a `no-` prefix.\r\n       *\r\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n       *\r\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n       * version of it, the class is considered active.\r\n       *\r\n       * @param {Element} element\r\n       * @param {string} className\r\n       * @param {boolean} [defaultActivation=false]\r\n       * @returns {boolean}\r\n       */\n      isActive: function (element, className, defaultActivation) {\n        var no = 'no-' + className;\n\n        while (element) {\n          var classList = element.classList;\n\n          if (classList.contains(className)) {\n            return true;\n          }\n\n          if (classList.contains(no)) {\n            return false;\n          }\n\n          element = element.parentElement;\n        }\n\n        return !!defaultActivation;\n      }\n    },\n\n    /**\r\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n     *\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    languages: {\n      /**\r\n       * The grammar for plain, unformatted text.\r\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n\n      /**\r\n       * Creates a deep copy of the language with the given id and appends the given tokens.\r\n       *\r\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n       * will be overwritten at its original position.\r\n       *\r\n       * ## Best practices\r\n       *\r\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n       *\r\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n       *\r\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n       * @param {Grammar} redef The new tokens to append.\r\n       * @returns {Grammar} The new language created.\r\n       * @public\r\n       * @example\r\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n       *     // at its original position\r\n       *     'comment': { ... },\r\n       *     // CSS doesn't have a 'color' token, so this token will be appended\r\n       *     'color': /\\b(?:red|green|blue)\\b/\r\n       * });\r\n       */\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n       *\r\n       * ## Usage\r\n       *\r\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n       * this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.markup.style = {\r\n       *     // token\r\n       * };\r\n       * ```\r\n       *\r\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n       * before existing tokens. For the CSS example above, you would use it like this:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'cdata', {\r\n       *     'style': {\r\n       *         // token\r\n       *     }\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Special cases\r\n       *\r\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n       * will be ignored.\r\n       *\r\n       * This behavior can be used to insert tokens after `before`:\r\n       *\r\n       * ```js\r\n       * Prism.languages.insertBefore('markup', 'comment', {\r\n       *     'comment': Prism.languages.markup.comment,\r\n       *     // tokens after 'comment'\r\n       * });\r\n       * ```\r\n       *\r\n       * ## Limitations\r\n       *\r\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n       * deleting properties which is necessary to insert at arbitrary positions.\r\n       *\r\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n       *\r\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n       * you hold the target object in a variable, then the value of the variable will not change.\r\n       *\r\n       * ```js\r\n       * var oldMarkup = Prism.languages.markup;\r\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n       *\r\n       * assert(oldMarkup !== Prism.languages.markup);\r\n       * assert(newMarkup === Prism.languages.markup);\r\n       * ```\r\n       *\r\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n       * object to be modified.\r\n       * @param {string} before The key to insert before.\r\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n       * object to be modified.\r\n       *\r\n       * Defaults to `Prism.languages`.\r\n       * @returns {Grammar} The new grammar object.\r\n       * @public\r\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root ||\n        /** @type {any} */\n        _.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            } // Do not insert token which also occur in insert. See #1525\n\n\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n\n        var old = root[inside];\n        root[inside] = ret; // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n\n            var propertyType = _.util.type(property);\n\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n\n    /**\r\n     * This is the most high-level function in Prism’s API.\r\n     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n     * each one of them.\r\n     *\r\n     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n     *\r\n     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAll: function (async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n\n    /**\r\n     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n     * {@link Prism.highlightElement} on each one of them.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-highlightall`\r\n     * 2. `before-all-elements-highlight`\r\n     * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n     *\r\n     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightAllUnder: function (container, async, callback) {\n      var env = {\n        callback: callback,\n        container: container,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n\n      _.hooks.run('before-highlightall', env);\n\n      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n      _.hooks.run('before-all-elements-highlight', env);\n\n      for (var i = 0, element; element = env.elements[i++];) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n\n    /**\r\n     * Highlights the code inside a single element.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-sanity-check`\r\n     * 2. `before-highlight`\r\n     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n     * 4. `before-insert`\r\n     * 5. `after-highlight`\r\n     * 6. `complete`\r\n     *\r\n     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n     * the element's language.\r\n     *\r\n     * @param {Element} element The element containing the code.\r\n     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n     *\r\n     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n     * asynchronous highlighting to work. You can build your own bundle on the\r\n     * [Download page](https://prismjs.com/download.html).\r\n     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    highlightElement: function (element, async, callback) {\n      // Find language\n      var language = _.util.getLanguage(element);\n\n      var grammar = _.languages[language]; // Set language on the element, if not present\n\n      element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language; // Set language on the parent, for styling\n\n      var parent = element.parentElement;\n\n      if (parent && parent.nodeName.toLowerCase() === 'pre') {\n        parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n      }\n\n      var code = element.textContent;\n      var env = {\n        element: element,\n        language: language,\n        grammar: grammar,\n        code: code\n      };\n\n      function insertHighlightedCode(highlightedCode) {\n        env.highlightedCode = highlightedCode;\n\n        _.hooks.run('before-insert', env);\n\n        env.element.innerHTML = env.highlightedCode;\n\n        _.hooks.run('after-highlight', env);\n\n        _.hooks.run('complete', env);\n\n        callback && callback.call(env.element);\n      }\n\n      _.hooks.run('before-sanity-check', env); // plugins may change/add the parent/element\n\n\n      parent = env.element.parentElement;\n\n      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n        parent.setAttribute('tabindex', '0');\n      }\n\n      if (!env.code) {\n        _.hooks.run('complete', env);\n\n        callback && callback.call(env.element);\n        return;\n      }\n\n      _.hooks.run('before-highlight', env);\n\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n\n      if (async && _self.Worker) {\n        var worker = new Worker(_.filename);\n\n        worker.onmessage = function (evt) {\n          insertHighlightedCode(evt.data);\n        };\n\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n\n    /**\r\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n     * and the language definitions to use, and returns a string with the HTML produced.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `before-tokenize`\r\n     * 2. `after-tokenize`\r\n     * 3. `wrap`: On each {@link Token}.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @param {string} language The name of the language definition passed to `grammar`.\r\n     * @returns {string} The highlighted HTML.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n     */\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run('before-tokenize', env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run('after-tokenize', env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n\n    /**\r\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n     * and the language definitions to use, and returns an array with the tokenized code.\r\n     *\r\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n     *\r\n     * This method could be useful in other contexts as well, as a very crude parser.\r\n     *\r\n     * @param {string} text A string with the code to be highlighted.\r\n     * @param {Grammar} grammar An object containing the tokens to use.\r\n     *\r\n     * Usually a language definition like `Prism.languages.markup`.\r\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n     * @memberof Prism\r\n     * @public\r\n     * @example\r\n     * let code = `var foo = 0;`;\r\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n     * tokens.forEach(token => {\r\n     *     if (token instanceof Prism.Token && token.type === 'number') {\r\n     *         console.log(`Found numeric literal: ${token.content}`);\r\n     *     }\r\n     * });\r\n     */\n    tokenize: function (text, grammar) {\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n\n    /**\r\n     * @namespace\r\n     * @memberof Prism\r\n     * @public\r\n     */\n    hooks: {\n      all: {},\n\n      /**\r\n       * Adds the given callback to the list of callbacks for the given hook.\r\n       *\r\n       * The callback will be invoked when the hook it is registered for is run.\r\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n       *\r\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {HookCallback} callback The callback function which is given environment variables.\r\n       * @public\r\n       */\n      add: function (name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n\n      /**\r\n       * Runs a hook invoking all registered callbacks with the given environment variables.\r\n       *\r\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n       *\r\n       * @param {string} name The name of the hook.\r\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n       * @public\r\n       */\n      run: function (name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n  _self.Prism = _; // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\r\n   * Creates a new token.\r\n   *\r\n   * @param {string} type See {@link Token#type type}\r\n   * @param {string | TokenStream} content See {@link Token#content content}\r\n   * @param {string|string[]} [alias] The alias(es) of the token.\r\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n   * @class\r\n   * @global\r\n   * @public\r\n   */\n\n  function Token(type, content, alias, matchedStr) {\n    /**\r\n     * The type of the token.\r\n     *\r\n     * This is usually the key of a pattern in a {@link Grammar}.\r\n     *\r\n     * @type {string}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n    this.type = type;\n    /**\r\n     * The strings or tokens contained by this token.\r\n     *\r\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n     *\r\n     * @type {string | TokenStream}\r\n     * @public\r\n     */\n\n    this.content = content;\n    /**\r\n     * The alias(es) of the token.\r\n     *\r\n     * @type {string|string[]}\r\n     * @see GrammarToken\r\n     * @public\r\n     */\n\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || '').length | 0;\n  }\n  /**\r\n   * A token stream is an array of strings and {@link Token Token} objects.\r\n   *\r\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n   * them.\r\n   *\r\n   * 1. No adjacent strings.\r\n   * 2. No empty strings.\r\n   *\r\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n   *\r\n   * @typedef {Array<string | Token>} TokenStream\r\n   * @global\r\n   * @public\r\n   */\n\n  /**\r\n   * Converts the given token or token stream to an HTML representation.\r\n   *\r\n   * The following hooks will be run:\r\n   * 1. `wrap`: On each {@link Token}.\r\n   *\r\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n   * @param {string} language The name of current language.\r\n   * @returns {string} The HTML representation of the token or token stream.\r\n   * @memberof Token\r\n   * @static\r\n   */\n\n\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = '';\n\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n  /**\r\n   * @param {RegExp} pattern\r\n   * @param {number} pos\r\n   * @param {string} text\r\n   * @param {boolean} lookbehind\r\n   * @returns {RegExpExecArray | null}\r\n   */\n\n\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n\n    return match;\n  }\n  /**\r\n   * @param {string} text\r\n   * @param {LinkedList<string | Token>} tokenList\r\n   * @param {any} grammar\r\n   * @param {LinkedListNode<string | Token>} startNode\r\n   * @param {number} startPos\r\n   * @param {RematchOptions} [rematch]\r\n   * @returns {void}\r\n   * @private\r\n   *\r\n   * @typedef RematchOptions\r\n   * @property {string} cause\r\n   * @property {number} reach\r\n   */\n\n\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n        /** @type {RegExp} */\n\n\n        var pattern = patternObj.pattern || patternObj;\n\n        for ( // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n\n          var str = currentNode.value;\n\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n\n          if (str instanceof Token) {\n            continue;\n          }\n\n          var removeCount = 1; // this is the to parameter of removeBetween\n\n          var match;\n\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n\n            if (!match) {\n              break;\n            }\n\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos; // find the node that contains the match\n\n            p += currentNode.value.length;\n\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            } // adjust pos (and p)\n\n\n            p -= currentNode.value.length;\n            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid\n\n            if (currentNode.value instanceof Token) {\n              continue;\n            } // find the last node which is affected by this match\n\n\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n\n            removeCount--; // replace with the new match\n\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n\n            if (!match) {\n              continue;\n            }\n          } // eslint-disable-next-line no-redeclare\n\n\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n\n          var removeFrom = currentNode.prev;\n\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching\n\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * @typedef LinkedListNode\r\n   * @property {T} value\r\n   * @property {LinkedListNode<T> | null} prev The previous node.\r\n   * @property {LinkedListNode<T> | null} next The next node.\r\n   * @template T\r\n   * @private\r\n   */\n\n  /**\r\n   * @template T\r\n   * @private\r\n   */\n\n\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n    /** @type {LinkedListNode<T>} */\n\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n\n    this.tail = tail;\n    this.length = 0;\n  }\n  /**\r\n   * Adds a new node with the given value to the list.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {T} value\r\n   * @returns {LinkedListNode<T>} The added node.\r\n   * @template T\r\n   */\n\n\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\r\n   * Removes `count` nodes after the given node. The given node will not be removed.\r\n   *\r\n   * @param {LinkedList<T>} list\r\n   * @param {LinkedListNode<T>} node\r\n   * @param {number} count\r\n   * @template T\r\n   */\n\n\n  function removeRange(list, node, count) {\n    var next = node.next;\n\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\r\n   * @param {LinkedList<T>} list\r\n   * @returns {T[]}\r\n   * @template T\r\n   */\n\n\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n\n    return array;\n  }\n\n  if (!_self.document) {\n    if (!_self.addEventListener) {\n      // in Node.js\n      return _;\n    }\n\n    if (!_.disableWorkerMessageHandler) {\n      // In worker\n      _self.addEventListener('message', function (evt) {\n        var message = JSON.parse(evt.data);\n        var lang = message.language;\n        var code = message.code;\n        var immediateClose = message.immediateClose;\n\n        _self.postMessage(_.highlight(code, _.languages[lang], lang));\n\n        if (immediateClose) {\n          _self.close();\n        }\n      }, false);\n    }\n\n    return _;\n  } // Get current script and highlight\n\n\n  var script = _.util.currentScript();\n\n  if (script) {\n    _.filename = script.src;\n\n    if (script.hasAttribute('data-manual')) {\n      _.manual = true;\n    }\n  }\n\n  function highlightAutomaticallyCallback() {\n    if (!_.manual) {\n      _.highlightAll();\n    }\n  }\n\n  if (!_.manual) {\n    // If the document state is \"loading\", then we'll use DOMContentLoaded.\n    // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n    // might take longer one animation frame to execute which can create a race condition where only some plugins have\n    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n    // See https://github.com/PrismJS/prism/issues/2102\n    var readyState = document.readyState;\n\n    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n    } else {\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(highlightAutomaticallyCallback);\n      } else {\n        window.setTimeout(highlightAutomaticallyCallback, 16);\n      }\n    }\n  }\n\n  return _;\n}(_self);\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Prism;\n} // hack for components to work correctly in node.js\n\n\nif (typeof global !== 'undefined') {\n  global.Prism = Prism;\n} // some additional documentation/types\n\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\n\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\n\n/* **********************************************\r\n     Begin prism-markup.js\r\n********************************************** */\n\n\nPrism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\r\n   * Adds an inlined language to markup.\r\n   *\r\n   * An example of an inlined language is CSS with `<style>` tags.\r\n   *\r\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n   * case insensitive.\r\n   * @param {string} lang The language key.\r\n   * @example\r\n   * addInlined('style', 'css');\r\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n  /**\r\n   * Adds an pattern to highlight languages embedded in HTML attributes.\r\n   *\r\n   * An example of an inlined language is CSS with `style` attributes.\r\n   *\r\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n   * case insensitive.\r\n   * @param {string} lang The language key.\r\n   * @example\r\n   * addAttribute('style', 'css');\r\n   */\n  value: function (attrName, lang) {\n    Prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: Prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* **********************************************\r\n     Begin prism-css.js\r\n********************************************** */\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(Prism);\n/* **********************************************\r\n     Begin prism-clike.js\r\n********************************************** */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* **********************************************\r\n     Begin prism-javascript.js\r\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* **********************************************\r\n     Begin prism-file-highlight.js\r\n********************************************** */\n\n(function () {\n  if (typeof Prism === 'undefined' || typeof document === 'undefined') {\n    return;\n  } // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  var LOADING_MESSAGE = 'Loading…';\n\n  var FAILURE_MESSAGE = function (status, message) {\n    return '✖ Error ' + status + ' while fetching file: ' + message;\n  };\n\n  var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n  var EXTENSIONS = {\n    'js': 'javascript',\n    'py': 'python',\n    'rb': 'ruby',\n    'ps1': 'powershell',\n    'psm1': 'powershell',\n    'sh': 'bash',\n    'bat': 'batch',\n    'h': 'c',\n    'tex': 'latex'\n  };\n  var STATUS_ATTR = 'data-src-status';\n  var STATUS_LOADING = 'loading';\n  var STATUS_LOADED = 'loaded';\n  var STATUS_FAILED = 'failed';\n  var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])' + ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  /**\r\n   * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.\r\n   *\r\n   * @param {HTMLElement} element\r\n   * @param {string} language\r\n   * @returns {void}\r\n   */\n\n  function setLanguageClass(element, language) {\n    var className = element.className;\n    className = className.replace(lang, ' ') + ' language-' + language;\n    element.className = className.replace(/\\s+/g, ' ').trim();\n  }\n\n  Prism.hooks.add('before-highlightall', function (env) {\n    env.selector += ', ' + SELECTOR;\n  });\n  Prism.hooks.add('before-sanity-check', function (env) {\n    var pre =\n    /** @type {HTMLPreElement} */\n    env.element;\n\n    if (pre.matches(SELECTOR)) {\n      env.code = ''; // fast-path the whole thing and go to complete\n\n      pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n      // add code element with loading message\n\n      var code = pre.appendChild(document.createElement('CODE'));\n      code.textContent = LOADING_MESSAGE;\n      var src = pre.getAttribute('data-src');\n      var language = env.language;\n\n      if (language === 'none') {\n        // the language might be 'none' because there is no language set;\n        // in this case, we want to use the extension as the language\n        var extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n        language = EXTENSIONS[extension] || extension;\n      } // set language classes\n\n\n      setLanguageClass(code, language);\n      setLanguageClass(pre, language); // preload the language\n\n      var autoloader = Prism.plugins.autoloader;\n\n      if (autoloader) {\n        autoloader.loadLanguages(language);\n      } // load file\n\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', src, true);\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          if (xhr.status < 400 && xhr.responseText) {\n            // mark as loaded\n            pre.setAttribute(STATUS_ATTR, STATUS_LOADED); // highlight code\n\n            code.textContent = xhr.responseText;\n            Prism.highlightElement(code);\n          } else {\n            // mark as failed\n            pre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n            if (xhr.status >= 400) {\n              code.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);\n            } else {\n              code.textContent = FAILURE_EMPTY_MESSAGE;\n            }\n          }\n        }\n      };\n\n      xhr.send(null);\n    }\n  });\n  Prism.plugins.fileHighlight = {\n    /**\r\n     * Executes the File Highlight plugin for all matching `pre` elements under the given container.\r\n     *\r\n     * Note: Elements which are already loaded or currently loading will not be touched by this method.\r\n     *\r\n     * @param {ParentNode} [container=document]\r\n     */\n    highlight: function highlight(container) {\n      var elements = (container || document).querySelectorAll(SELECTOR);\n\n      for (var i = 0, element; element = elements[i++];) {\n        Prism.highlightElement(element);\n      }\n    }\n  };\n  var logged = false;\n  /** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\n  Prism.fileHighlight = function () {\n    if (!logged) {\n      console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n      logged = true;\n    }\n\n    Prism.plugins.fileHighlight.highlight.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/prismjs/prism.js"],"names":["_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","test","className","parentElement","match","toLowerCase","currentScript","document","Error","err","src","exec","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","classList","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","language","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","add","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","join","matchPattern","pattern","pos","lookbehind","lastIndex","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","RegExp","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports","markup","addInlined","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","string","css","addAttribute","clike","javascript","regex","js","Element","matches","msMatchesSelector","webkitMatchesSelector","LOADING_MESSAGE","FAILURE_MESSAGE","status","FAILURE_EMPTY_MESSAGE","EXTENSIONS","STATUS_ATTR","STATUS_LOADING","STATUS_LOADED","STATUS_FAILED","SELECTOR","setLanguageClass","trim","pre","appendChild","createElement","getAttribute","extension","autoloader","loadLanguages","xhr","XMLHttpRequest","open","onreadystatechange","responseText","statusText","send","fileHighlight","logged","console","warn","arguments"],"mappings":"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","sourcesContent":["\r\n/* **********************************************\r\n     Begin prism-core.js\r\n********************************************** */\r\n\r\n/// <reference lib=\"WebWorker\"/>\r\n\r\nvar _self = (typeof window !== 'undefined')\r\n\t? window   // if in browser\r\n\t: (\r\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\r\n\t\t\t? self // if in worker\r\n\t\t\t: {}   // if in node js\r\n\t);\r\n\r\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n *\r\n * @license MIT <https://opensource.org/licenses/MIT>\r\n * @author Lea Verou <https://lea.verou.me>\r\n * @namespace\r\n * @public\r\n */\r\nvar Prism = (function (_self) {\r\n\r\n\t// Private helper vars\r\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\r\n\tvar uniqueId = 0;\r\n\r\n\t// The grammar object for plaintext\r\n\tvar plainTextGrammar = {};\r\n\r\n\r\n\tvar _ = {\r\n\t\t/**\r\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n\t\t * additional languages or plugins yourself.\r\n\t\t *\r\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n\t\t *\r\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * window.Prism = window.Prism || {};\r\n\t\t * Prism.manual = true;\r\n\t\t * // add a new <script> to load Prism's script\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @default false\r\n\t\t * @type {boolean}\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tmanual: _self.Prism && _self.Prism.manual,\r\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n\t\t/**\r\n\t\t * A namespace for utility methods.\r\n\t\t *\r\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n\t\t * change or disappear at any time.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t */\r\n\t\tutil: {\r\n\t\t\tencode: function encode(tokens) {\r\n\t\t\t\tif (tokens instanceof Token) {\r\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n\t\t\t\t} else if (Array.isArray(tokens)) {\r\n\t\t\t\t\treturn tokens.map(encode);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the name of the type of the given value.\r\n\t\t\t *\r\n\t\t\t * @param {any} o\r\n\t\t\t * @returns {string}\r\n\t\t\t * @example\r\n\t\t\t * type(null)      === 'Null'\r\n\t\t\t * type(undefined) === 'Undefined'\r\n\t\t\t * type(123)       === 'Number'\r\n\t\t\t * type('foo')     === 'String'\r\n\t\t\t * type(true)      === 'Boolean'\r\n\t\t\t * type([1, 2])    === 'Array'\r\n\t\t\t * type({})        === 'Object'\r\n\t\t\t * type(String)    === 'Function'\r\n\t\t\t * type(/abc+/)    === 'RegExp'\r\n\t\t\t */\r\n\t\t\ttype: function (o) {\r\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\r\n\t\t\t *\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @returns {number}\r\n\t\t\t */\r\n\t\t\tobjId: function (obj) {\r\n\t\t\t\tif (!obj['__id']) {\r\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\r\n\t\t\t\t}\r\n\t\t\t\treturn obj['__id'];\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep clone of the given object.\r\n\t\t\t *\r\n\t\t\t * The main intended use of this function is to clone language definitions.\r\n\t\t\t *\r\n\t\t\t * @param {T} o\r\n\t\t\t * @param {Record<number, any>} [visited]\r\n\t\t\t * @returns {T}\r\n\t\t\t * @template T\r\n\t\t\t */\r\n\t\t\tclone: function deepClone(o, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar clone; var id;\r\n\t\t\t\tswitch (_.util.type(o)) {\r\n\t\t\t\t\tcase 'Object':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\tfor (var key in o) {\r\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tcase 'Array':\r\n\t\t\t\t\t\tid = _.util.objId(o);\r\n\t\t\t\t\t\tif (visited[id]) {\r\n\t\t\t\t\t\t\treturn visited[id];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclone = [];\r\n\t\t\t\t\t\tvisited[id] = clone;\r\n\r\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\r\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n\t\t\t *\r\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @returns {string}\r\n\t\t\t */\r\n\t\t\tgetLanguage: function (element) {\r\n\t\t\t\twhile (element && !lang.test(element.className)) {\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\treturn 'none';\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns the script element that is currently executing.\r\n\t\t\t *\r\n\t\t\t * This does __not__ work for line script element.\r\n\t\t\t *\r\n\t\t\t * @returns {HTMLScriptElement | null}\r\n\t\t\t */\r\n\t\t\tcurrentScript: function () {\r\n\t\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\r\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// IE11 workaround\r\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\r\n\t\t\t\t// this will not work for inline scripts\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n\t\t\t\t\t// A stack will look like this:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\r\n\r\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\t\t\t\t\tif (src) {\r\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\r\n\t\t\t\t\t\tfor (var i in scripts) {\r\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\r\n\t\t\t\t\t\t\t\treturn scripts[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns whether a given class is active for `element`.\r\n\t\t\t *\r\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n\t\t\t * given class is just the given class with a `no-` prefix.\r\n\t\t\t *\r\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n\t\t\t *\r\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n\t\t\t * version of it, the class is considered active.\r\n\t\t\t *\r\n\t\t\t * @param {Element} element\r\n\t\t\t * @param {string} className\r\n\t\t\t * @param {boolean} [defaultActivation=false]\r\n\t\t\t * @returns {boolean}\r\n\t\t\t */\r\n\t\t\tisActive: function (element, className, defaultActivation) {\r\n\t\t\t\tvar no = 'no-' + className;\r\n\r\n\t\t\t\twhile (element) {\r\n\t\t\t\t\tvar classList = element.classList;\r\n\t\t\t\t\tif (classList.contains(className)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (classList.contains(no)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement = element.parentElement;\r\n\t\t\t\t}\r\n\t\t\t\treturn !!defaultActivation;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\tlanguages: {\r\n\t\t\t/**\r\n\t\t\t * The grammar for plain, unformatted text.\r\n\t\t\t */\r\n\t\t\tplain: plainTextGrammar,\r\n\t\t\tplaintext: plainTextGrammar,\r\n\t\t\ttext: plainTextGrammar,\r\n\t\t\ttxt: plainTextGrammar,\r\n\r\n\t\t\t/**\r\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\r\n\t\t\t *\r\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n\t\t\t * will be overwritten at its original position.\r\n\t\t\t *\r\n\t\t\t * ## Best practices\r\n\t\t\t *\r\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n\t\t\t *\r\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n\t\t\t *\r\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n\t\t\t * @param {Grammar} redef The new tokens to append.\r\n\t\t\t * @returns {Grammar} The new language created.\r\n\t\t\t * @public\r\n\t\t\t * @example\r\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n\t\t\t *     // at its original position\r\n\t\t\t *     'comment': { ... },\r\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\r\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\r\n\t\t\t * });\r\n\t\t\t */\r\n\t\t\textend: function (id, redef) {\r\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\r\n\r\n\t\t\t\tfor (var key in redef) {\r\n\t\t\t\t\tlang[key] = redef[key];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lang;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n\t\t\t *\r\n\t\t\t * ## Usage\r\n\t\t\t *\r\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n\t\t\t * this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.markup.style = {\r\n\t\t\t *     // token\r\n\t\t\t * };\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\r\n\t\t\t *     'style': {\r\n\t\t\t *         // token\r\n\t\t\t *     }\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Special cases\r\n\t\t\t *\r\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n\t\t\t * will be ignored.\r\n\t\t\t *\r\n\t\t\t * This behavior can be used to insert tokens after `before`:\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\r\n\t\t\t *     'comment': Prism.languages.markup.comment,\r\n\t\t\t *     // tokens after 'comment'\r\n\t\t\t * });\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * ## Limitations\r\n\t\t\t *\r\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\r\n\t\t\t *\r\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n\t\t\t *\r\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\r\n\t\t\t *\r\n\t\t\t * ```js\r\n\t\t\t * var oldMarkup = Prism.languages.markup;\r\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n\t\t\t *\r\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\r\n\t\t\t * assert(newMarkup === Prism.languages.markup);\r\n\t\t\t * ```\r\n\t\t\t *\r\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t * @param {string} before The key to insert before.\r\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n\t\t\t * object to be modified.\r\n\t\t\t *\r\n\t\t\t * Defaults to `Prism.languages`.\r\n\t\t\t * @returns {Grammar} The new grammar object.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tinsertBefore: function (inside, before, insert, root) {\r\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\r\n\t\t\t\tvar grammar = root[inside];\r\n\t\t\t\t/** @type {Grammar} */\r\n\t\t\t\tvar ret = {};\r\n\r\n\t\t\t\tfor (var token in grammar) {\r\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\r\n\r\n\t\t\t\t\t\tif (token == before) {\r\n\t\t\t\t\t\t\tfor (var newToken in insert) {\r\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\r\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\r\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\r\n\t\t\t\t\t\t\tret[token] = grammar[token];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar old = root[inside];\r\n\t\t\t\troot[inside] = ret;\r\n\r\n\t\t\t\t// Update references in other language definitions\r\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\r\n\t\t\t\t\tif (value === old && key != inside) {\r\n\t\t\t\t\t\tthis[key] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\r\n\t\t\t// Traverse a language definition with Depth First Search\r\n\t\t\tDFS: function DFS(o, callback, type, visited) {\r\n\t\t\t\tvisited = visited || {};\r\n\r\n\t\t\t\tvar objId = _.util.objId;\r\n\r\n\t\t\t\tfor (var i in o) {\r\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\r\n\r\n\t\t\t\t\t\tvar property = o[i];\r\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\r\n\r\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\r\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\r\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tplugins: {},\r\n\r\n\t\t/**\r\n\t\t * This is the most high-level function in Prism’s API.\r\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n\t\t * each one of them.\r\n\t\t *\r\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n\t\t *\r\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAll: function (async, callback) {\r\n\t\t\t_.highlightAllUnder(document, async, callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n\t\t * {@link Prism.highlightElement} on each one of them.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-highlightall`\r\n\t\t * 2. `before-all-elements-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n\t\t *\r\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightAllUnder: function (container, async, callback) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcallback: callback,\r\n\t\t\t\tcontainer: container,\r\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n\t\t\t};\r\n\r\n\t\t\t_.hooks.run('before-highlightall', env);\r\n\r\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\r\n\r\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\r\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Highlights the code inside a single element.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-sanity-check`\r\n\t\t * 2. `before-highlight`\r\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n\t\t * 4. `before-insert`\r\n\t\t * 5. `after-highlight`\r\n\t\t * 6. `complete`\r\n\t\t *\r\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n\t\t * the element's language.\r\n\t\t *\r\n\t\t * @param {Element} element The element containing the code.\r\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n\t\t *\r\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\r\n\t\t * [Download page](https://prismjs.com/download.html).\r\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thighlightElement: function (element, async, callback) {\r\n\t\t\t// Find language\r\n\t\t\tvar language = _.util.getLanguage(element);\r\n\t\t\tvar grammar = _.languages[language];\r\n\r\n\t\t\t// Set language on the element, if not present\r\n\t\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\r\n\r\n\t\t\t// Set language on the parent, for styling\r\n\t\t\tvar parent = element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\r\n\t\t\t}\r\n\r\n\t\t\tvar code = element.textContent;\r\n\r\n\t\t\tvar env = {\r\n\t\t\t\telement: element,\r\n\t\t\t\tlanguage: language,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tcode: code\r\n\t\t\t};\r\n\r\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\r\n\t\t\t\tenv.highlightedCode = highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('before-insert', env);\r\n\r\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\r\n\r\n\t\t\t\t_.hooks.run('after-highlight', env);\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-sanity-check', env);\r\n\r\n\t\t\t// plugins may change/add the parent/element\r\n\t\t\tparent = env.element.parentElement;\r\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n\t\t\t\tparent.setAttribute('tabindex', '0');\r\n\t\t\t}\r\n\r\n\t\t\tif (!env.code) {\r\n\t\t\t\t_.hooks.run('complete', env);\r\n\t\t\t\tcallback && callback.call(env.element);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t_.hooks.run('before-highlight', env);\r\n\r\n\t\t\tif (!env.grammar) {\r\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (async && _self.Worker) {\r\n\t\t\t\tvar worker = new Worker(_.filename);\r\n\r\n\t\t\t\tworker.onmessage = function (evt) {\r\n\t\t\t\t\tinsertHighlightedCode(evt.data);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tworker.postMessage(JSON.stringify({\r\n\t\t\t\t\tlanguage: env.language,\r\n\t\t\t\t\tcode: env.code,\r\n\t\t\t\t\timmediateClose: true\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\r\n\t\t *\r\n\t\t * The following hooks will be run:\r\n\t\t * 1. `before-tokenize`\r\n\t\t * 2. `after-tokenize`\r\n\t\t * 3. `wrap`: On each {@link Token}.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\r\n\t\t * @returns {string} The highlighted HTML.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n\t\t */\r\n\t\thighlight: function (text, grammar, language) {\r\n\t\t\tvar env = {\r\n\t\t\t\tcode: text,\r\n\t\t\t\tgrammar: grammar,\r\n\t\t\t\tlanguage: language\r\n\t\t\t};\r\n\t\t\t_.hooks.run('before-tokenize', env);\r\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\r\n\t\t\t_.hooks.run('after-tokenize', env);\r\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\r\n\t\t *\r\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n\t\t *\r\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\r\n\t\t *\r\n\t\t * @param {string} text A string with the code to be highlighted.\r\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\r\n\t\t *\r\n\t\t * Usually a language definition like `Prism.languages.markup`.\r\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t * @example\r\n\t\t * let code = `var foo = 0;`;\r\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n\t\t * tokens.forEach(token => {\r\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\r\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\r\n\t\t *     }\r\n\t\t * });\r\n\t\t */\r\n\t\ttokenize: function (text, grammar) {\r\n\t\t\tvar rest = grammar.rest;\r\n\t\t\tif (rest) {\r\n\t\t\t\tfor (var token in rest) {\r\n\t\t\t\t\tgrammar[token] = rest[token];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete grammar.rest;\r\n\t\t\t}\r\n\r\n\t\t\tvar tokenList = new LinkedList();\r\n\t\t\taddAfter(tokenList, tokenList.head, text);\r\n\r\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n\r\n\t\t\treturn toArray(tokenList);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @namespace\r\n\t\t * @memberof Prism\r\n\t\t * @public\r\n\t\t */\r\n\t\thooks: {\r\n\t\t\tall: {},\r\n\r\n\t\t\t/**\r\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\r\n\t\t\t *\r\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\r\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n\t\t\t *\r\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tadd: function (name, callback) {\r\n\t\t\t\tvar hooks = _.hooks.all;\r\n\r\n\t\t\t\thooks[name] = hooks[name] || [];\r\n\r\n\t\t\t\thooks[name].push(callback);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\r\n\t\t\t *\r\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n\t\t\t *\r\n\t\t\t * @param {string} name The name of the hook.\r\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\trun: function (name, env) {\r\n\t\t\t\tvar callbacks = _.hooks.all[name];\r\n\r\n\t\t\t\tif (!callbacks || !callbacks.length) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\r\n\t\t\t\t\tcallback(env);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tToken: Token\r\n\t};\r\n\t_self.Prism = _;\r\n\r\n\r\n\t// Typescript note:\r\n\t// The following can be used to import the Token type in JSDoc:\r\n\t//\r\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n\t/**\r\n\t * Creates a new token.\r\n\t *\r\n\t * @param {string} type See {@link Token#type type}\r\n\t * @param {string | TokenStream} content See {@link Token#content content}\r\n\t * @param {string|string[]} [alias] The alias(es) of the token.\r\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n\t * @class\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\tfunction Token(type, content, alias, matchedStr) {\r\n\t\t/**\r\n\t\t * The type of the token.\r\n\t\t *\r\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.type = type;\r\n\t\t/**\r\n\t\t * The strings or tokens contained by this token.\r\n\t\t *\r\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n\t\t *\r\n\t\t * @type {string | TokenStream}\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.content = content;\r\n\t\t/**\r\n\t\t * The alias(es) of the token.\r\n\t\t *\r\n\t\t * @type {string|string[]}\r\n\t\t * @see GrammarToken\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.alias = alias;\r\n\t\t// Copy of the full string this token was created from\r\n\t\tthis.length = (matchedStr || '').length | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * A token stream is an array of strings and {@link Token Token} objects.\r\n\t *\r\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n\t * them.\r\n\t *\r\n\t * 1. No adjacent strings.\r\n\t * 2. No empty strings.\r\n\t *\r\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n\t *\r\n\t * @typedef {Array<string | Token>} TokenStream\r\n\t * @global\r\n\t * @public\r\n\t */\r\n\r\n\t/**\r\n\t * Converts the given token or token stream to an HTML representation.\r\n\t *\r\n\t * The following hooks will be run:\r\n\t * 1. `wrap`: On each {@link Token}.\r\n\t *\r\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n\t * @param {string} language The name of current language.\r\n\t * @returns {string} The HTML representation of the token or token stream.\r\n\t * @memberof Token\r\n\t * @static\r\n\t */\r\n\tToken.stringify = function stringify(o, language) {\r\n\t\tif (typeof o == 'string') {\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\tif (Array.isArray(o)) {\r\n\t\t\tvar s = '';\r\n\t\t\to.forEach(function (e) {\r\n\t\t\t\ts += stringify(e, language);\r\n\t\t\t});\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\tvar env = {\r\n\t\t\ttype: o.type,\r\n\t\t\tcontent: stringify(o.content, language),\r\n\t\t\ttag: 'span',\r\n\t\t\tclasses: ['token', o.type],\r\n\t\t\tattributes: {},\r\n\t\t\tlanguage: language\r\n\t\t};\r\n\r\n\t\tvar aliases = o.alias;\r\n\t\tif (aliases) {\r\n\t\t\tif (Array.isArray(aliases)) {\r\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\r\n\t\t\t} else {\r\n\t\t\t\tenv.classes.push(aliases);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.hooks.run('wrap', env);\r\n\r\n\t\tvar attributes = '';\r\n\t\tfor (var name in env.attributes) {\r\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n\t\t}\r\n\r\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n\t};\r\n\r\n\t/**\r\n\t * @param {RegExp} pattern\r\n\t * @param {number} pos\r\n\t * @param {string} text\r\n\t * @param {boolean} lookbehind\r\n\t * @returns {RegExpExecArray | null}\r\n\t */\r\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\r\n\t\tpattern.lastIndex = pos;\r\n\t\tvar match = pattern.exec(text);\r\n\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\tvar lookbehindLength = match[1].length;\r\n\t\t\tmatch.index += lookbehindLength;\r\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t}\r\n\t\treturn match;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @param {LinkedList<string | Token>} tokenList\r\n\t * @param {any} grammar\r\n\t * @param {LinkedListNode<string | Token>} startNode\r\n\t * @param {number} startPos\r\n\t * @param {RematchOptions} [rematch]\r\n\t * @returns {void}\r\n\t * @private\r\n\t *\r\n\t * @typedef RematchOptions\r\n\t * @property {string} cause\r\n\t * @property {number} reach\r\n\t */\r\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n\t\tfor (var token in grammar) {\r\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar patterns = grammar[token];\r\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\r\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar patternObj = patterns[j];\r\n\t\t\t\tvar inside = patternObj.inside;\r\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\r\n\t\t\t\tvar greedy = !!patternObj.greedy;\r\n\t\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\r\n\t\t\t\t\t// Without the global flag, lastIndex won't work\r\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/** @type {RegExp} */\r\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\r\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\r\n\t\t\t\t\tcurrentNode !== tokenList.tail;\r\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar str = currentNode.value;\r\n\r\n\t\t\t\t\tif (tokenList.length > text.length) {\r\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\r\n\t\t\t\t\tvar match;\r\n\r\n\t\t\t\t\tif (greedy) {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\t\tvar to = match.index + match[0].length;\r\n\t\t\t\t\t\tvar p = pos;\r\n\r\n\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\twhile (from >= p) {\r\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\r\n\t\t\t\t\t\t\tp += currentNode.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// adjust pos (and p)\r\n\t\t\t\t\t\tp -= currentNode.value.length;\r\n\t\t\t\t\t\tpos = p;\r\n\r\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar k = currentNode;\r\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n\t\t\t\t\t\t\tk = k.next\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tremoveCount++;\r\n\t\t\t\t\t\t\tp += k.value.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tremoveCount--;\r\n\r\n\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\t\tvar from = match.index;\r\n\t\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\t\tvar before = str.slice(0, from);\r\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\r\n\t\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\r\n\t\t\t\t\t\trematch.reach = reach;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar removeFrom = currentNode.prev;\r\n\r\n\t\t\t\t\tif (before) {\r\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\r\n\t\t\t\t\t\tpos += before.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\r\n\r\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n\t\t\t\t\tif (after) {\r\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (removeCount > 1) {\r\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\t\t/** @type {RematchOptions} */\r\n\t\t\t\t\t\tvar nestedRematch = {\r\n\t\t\t\t\t\t\tcause: token + ',' + j,\r\n\t\t\t\t\t\t\treach: reach\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\r\n\r\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\r\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\r\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @typedef LinkedListNode\r\n\t * @property {T} value\r\n\t * @property {LinkedListNode<T> | null} prev The previous node.\r\n\t * @property {LinkedListNode<T> | null} next The next node.\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @private\r\n\t */\r\n\tfunction LinkedList() {\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar head = { value: null, prev: null, next: null };\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tvar tail = { value: null, prev: head, next: null };\r\n\t\thead.next = tail;\r\n\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.head = head;\r\n\t\t/** @type {LinkedListNode<T>} */\r\n\t\tthis.tail = tail;\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new node with the given value to the list.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {T} value\r\n\t * @returns {LinkedListNode<T>} The added node.\r\n\t * @template T\r\n\t */\r\n\tfunction addAfter(list, node, value) {\r\n\t\t// assumes that node != list.tail && values.length >= 0\r\n\t\tvar next = node.next;\r\n\r\n\t\tvar newNode = { value: value, prev: node, next: next };\r\n\t\tnode.next = newNode;\r\n\t\tnext.prev = newNode;\r\n\t\tlist.length++;\r\n\r\n\t\treturn newNode;\r\n\t}\r\n\t/**\r\n\t * Removes `count` nodes after the given node. The given node will not be removed.\r\n\t *\r\n\t * @param {LinkedList<T>} list\r\n\t * @param {LinkedListNode<T>} node\r\n\t * @param {number} count\r\n\t * @template T\r\n\t */\r\n\tfunction removeRange(list, node, count) {\r\n\t\tvar next = node.next;\r\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\tnode.next = next;\r\n\t\tnext.prev = node;\r\n\t\tlist.length -= i;\r\n\t}\r\n\t/**\r\n\t * @param {LinkedList<T>} list\r\n\t * @returns {T[]}\r\n\t * @template T\r\n\t */\r\n\tfunction toArray(list) {\r\n\t\tvar array = [];\r\n\t\tvar node = list.head.next;\r\n\t\twhile (node !== list.tail) {\r\n\t\t\tarray.push(node.value);\r\n\t\t\tnode = node.next;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\tif (!_self.document) {\r\n\t\tif (!_self.addEventListener) {\r\n\t\t\t// in Node.js\r\n\t\t\treturn _;\r\n\t\t}\r\n\r\n\t\tif (!_.disableWorkerMessageHandler) {\r\n\t\t\t// In worker\r\n\t\t\t_self.addEventListener('message', function (evt) {\r\n\t\t\t\tvar message = JSON.parse(evt.data);\r\n\t\t\t\tvar lang = message.language;\r\n\t\t\t\tvar code = message.code;\r\n\t\t\t\tvar immediateClose = message.immediateClose;\r\n\r\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\t\t\t\tif (immediateClose) {\r\n\t\t\t\t\t_self.close();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\t\t}\r\n\r\n\t\treturn _;\r\n\t}\r\n\r\n\t// Get current script and highlight\r\n\tvar script = _.util.currentScript();\r\n\r\n\tif (script) {\r\n\t\t_.filename = script.src;\r\n\r\n\t\tif (script.hasAttribute('data-manual')) {\r\n\t\t\t_.manual = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction highlightAutomaticallyCallback() {\r\n\t\tif (!_.manual) {\r\n\t\t\t_.highlightAll();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!_.manual) {\r\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n\t\t// See https://github.com/PrismJS/prism/issues/2102\r\n\t\tvar readyState = document.readyState;\r\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n\t\t} else {\r\n\t\t\tif (window.requestAnimationFrame) {\r\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\r\n\t\t\t} else {\r\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn _;\r\n\r\n}(_self));\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n\tmodule.exports = Prism;\r\n}\r\n\r\n// hack for components to work correctly in node.js\r\nif (typeof global !== 'undefined') {\r\n\tglobal.Prism = Prism;\r\n}\r\n\r\n// some additional documentation/types\r\n\r\n/**\r\n * The expansion of a simple `RegExp` literal to support additional properties.\r\n *\r\n * @typedef GrammarToken\r\n * @property {RegExp} pattern The regular expression of the token.\r\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n * @property {boolean} [greedy=false] Whether the token is greedy.\r\n * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n * @property {Grammar} [inside] The nested grammar of this token.\r\n *\r\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n *\r\n * This can be used to make nested and even recursive language definitions.\r\n *\r\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n * each another.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @typedef Grammar\r\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * A function which will invoked after an element was successfully highlighted.\r\n *\r\n * @callback HighlightCallback\r\n * @param {Element} element The element successfully highlighted.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @callback HookCallback\r\n * @param {Object<string, any>} env The environment variables of the hook.\r\n * @returns {void}\r\n * @global\r\n * @public\r\n */\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-markup.js\r\n********************************************** */\r\n\r\nPrism.languages.markup = {\r\n\t'comment': {\r\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'prolog': {\r\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'doctype': {\r\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\r\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'internal-subset': {\r\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tgreedy: true,\r\n\t\t\t\tinside: null // see below\r\n\t\t\t},\r\n\t\t\t'string': {\r\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\r\n\t\t\t\tgreedy: true\r\n\t\t\t},\r\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\r\n\t\t\t'doctype-tag': /^DOCTYPE/i,\r\n\t\t\t'name': /[^\\s<>'\"]+/\r\n\t\t}\r\n\t},\r\n\t'cdata': {\r\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\tgreedy: true\r\n\t},\r\n\t'tag': {\r\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'tag': {\r\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /^<\\/?/,\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'special-attr': [],\r\n\t\t\t'attr-value': {\r\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'punctuation': /\\/?>/,\r\n\t\t\t'attr-name': {\r\n\t\t\t\tpattern: /[^\\s>\\/]+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t},\r\n\t'entity': [\r\n\t\t{\r\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\r\n\t\t\talias: 'named-entity'\r\n\t\t},\r\n\t\t/&#x?[\\da-f]{1,8};/i\r\n\t]\r\n};\r\n\r\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\r\n\tPrism.languages.markup['entity'];\r\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\r\n\r\n// Plugin to make entity title show the real entity, idea by Roman Komarov\r\nPrism.hooks.add('wrap', function (env) {\r\n\r\n\tif (env.type === 'entity') {\r\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\r\n\t}\r\n});\r\n\r\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n\t/**\r\n\t * Adds an inlined language to markup.\r\n\t *\r\n\t * An example of an inlined language is CSS with `<style>` tags.\r\n\t *\r\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addInlined('style', 'css');\r\n\t */\r\n\tvalue: function addInlined(tagName, lang) {\r\n\t\tvar includedCdataInside = {};\r\n\t\tincludedCdataInside['language-' + lang] = {\r\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\r\n\r\n\t\tvar inside = {\r\n\t\t\t'included-cdata': {\r\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n\t\t\t\tinside: includedCdataInside\r\n\t\t\t}\r\n\t\t};\r\n\t\tinside['language-' + lang] = {\r\n\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\tinside: Prism.languages[lang]\r\n\t\t};\r\n\r\n\t\tvar def = {};\r\n\t\tdef[tagName] = {\r\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: inside\r\n\t\t};\r\n\r\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\r\n\t}\r\n});\r\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\r\n\t/**\r\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\r\n\t *\r\n\t * An example of an inlined language is CSS with `style` attributes.\r\n\t *\r\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n\t * case insensitive.\r\n\t * @param {string} lang The language key.\r\n\t * @example\r\n\t * addAttribute('style', 'css');\r\n\t */\r\n\tvalue: function (attrName, lang) {\r\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\r\n\t\t\tpattern: RegExp(\r\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\r\n\t\t\t\t'i'\r\n\t\t\t),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'attr-name': /^[^\\s=]+/,\r\n\t\t\t\t'attr-value': {\r\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'value': {\r\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\r\n\t\t\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\r\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'punctuation': [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpattern: /^=/,\r\n\t\t\t\t\t\t\t\talias: 'attr-equals'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t/\"|'/\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n\r\nPrism.languages.html = Prism.languages.markup;\r\nPrism.languages.mathml = Prism.languages.markup;\r\nPrism.languages.svg = Prism.languages.markup;\r\n\r\nPrism.languages.xml = Prism.languages.extend('markup', {});\r\nPrism.languages.ssml = Prism.languages.xml;\r\nPrism.languages.atom = Prism.languages.xml;\r\nPrism.languages.rss = Prism.languages.xml;\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-css.js\r\n********************************************** */\r\n\r\n(function (Prism) {\r\n\r\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\r\n\r\n\tPrism.languages.css = {\r\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\r\n\t\t'atrule': {\r\n\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\r\n\t\t\tinside: {\r\n\t\t\t\t'rule': /^@[\\w-]+/,\r\n\t\t\t\t'selector-function-argument': {\r\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: 'selector'\r\n\t\t\t\t},\r\n\t\t\t\t'keyword': {\r\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\r\n\t\t\t\t\tlookbehind: true\r\n\t\t\t\t}\r\n\t\t\t\t// See rest below\r\n\t\t\t}\r\n\t\t},\r\n\t\t'url': {\r\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\r\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'function': /^url/i,\r\n\t\t\t\t'punctuation': /^\\(|\\)$/,\r\n\t\t\t\t'string': {\r\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\r\n\t\t\t\t\talias: 'url'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'selector': {\r\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'string': {\r\n\t\t\tpattern: string,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t'property': {\r\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'important': /!important\\b/i,\r\n\t\t'function': {\r\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t'punctuation': /[(){};:,]/\r\n\t};\r\n\r\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\r\n\r\n\tvar markup = Prism.languages.markup;\r\n\tif (markup) {\r\n\t\tmarkup.tag.addInlined('style', 'css');\r\n\t\tmarkup.tag.addAttribute('style', 'css');\r\n\t}\r\n\r\n}(Prism));\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-clike.js\r\n********************************************** */\r\n\r\nPrism.languages.clike = {\r\n\t'comment': [\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t],\r\n\t'string': {\r\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n\t\tgreedy: true\r\n\t},\r\n\t'class-name': {\r\n\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /[.\\\\]/\r\n\t\t}\r\n\t},\r\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\r\n\t'boolean': /\\b(?:true|false)\\b/,\r\n\t'function': /\\b\\w+(?=\\()/,\r\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\r\n\t'punctuation': /[{}[\\];(),.:]/\r\n};\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-javascript.js\r\n********************************************** */\r\n\r\nPrism.languages.javascript = Prism.languages.extend('clike', {\r\n\t'class-name': [\r\n\t\tPrism.languages.clike['class-name'],\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t'keyword': [\r\n\t\t{\r\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t],\r\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\r\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\r\n});\r\n\r\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\r\n\r\nPrism.languages.insertBefore('javascript', 'keyword', {\r\n\t'regex': {\r\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\r\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'regex-source': {\r\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'language-regex',\r\n\t\t\t\tinside: Prism.languages.regex\r\n\t\t\t},\r\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\r\n\t\t\t'regex-flags': /^[a-z]+$/,\r\n\t\t}\r\n\t},\r\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\r\n\t'function-variable': {\r\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\r\n\t\talias: 'function'\r\n\t},\r\n\t'parameter': [\r\n\t\t{\r\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: Prism.languages.javascript\r\n\t\t}\r\n\t],\r\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\r\n});\r\n\r\nPrism.languages.insertBefore('javascript', 'string', {\r\n\t'hashbang': {\r\n\t\tpattern: /^#!.*/,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'template-string': {\r\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'template-punctuation': {\r\n\t\t\t\tpattern: /^`|`$/,\r\n\t\t\t\talias: 'string'\r\n\t\t\t},\r\n\t\t\t'interpolation': {\r\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\r\n\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t},\r\n\t\t\t\t\trest: Prism.languages.javascript\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t}\r\n});\r\n\r\nif (Prism.languages.markup) {\r\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\r\n\r\n\t// add attribute support for all DOM events.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\r\n\tPrism.languages.markup.tag.addAttribute(\r\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\r\n\t\t'javascript'\r\n\t);\r\n}\r\n\r\nPrism.languages.js = Prism.languages.javascript;\r\n\r\n\r\n/* **********************************************\r\n     Begin prism-file-highlight.js\r\n********************************************** */\r\n\r\n(function () {\r\n\r\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n\tif (!Element.prototype.matches) {\r\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\r\n\t}\r\n\r\n\tvar LOADING_MESSAGE = 'Loading…';\r\n\tvar FAILURE_MESSAGE = function (status, message) {\r\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\r\n\t};\r\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\r\n\r\n\tvar EXTENSIONS = {\r\n\t\t'js': 'javascript',\r\n\t\t'py': 'python',\r\n\t\t'rb': 'ruby',\r\n\t\t'ps1': 'powershell',\r\n\t\t'psm1': 'powershell',\r\n\t\t'sh': 'bash',\r\n\t\t'bat': 'batch',\r\n\t\t'h': 'c',\r\n\t\t'tex': 'latex'\r\n\t};\r\n\r\n\tvar STATUS_ATTR = 'data-src-status';\r\n\tvar STATUS_LOADING = 'loading';\r\n\tvar STATUS_LOADED = 'loaded';\r\n\tvar STATUS_FAILED = 'failed';\r\n\r\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\r\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\r\n\r\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\r\n\r\n\t/**\r\n\t * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.\r\n\t *\r\n\t * @param {HTMLElement} element\r\n\t * @param {string} language\r\n\t * @returns {void}\r\n\t */\r\n\tfunction setLanguageClass(element, language) {\r\n\t\tvar className = element.className;\r\n\t\tclassName = className.replace(lang, ' ') + ' language-' + language;\r\n\t\telement.className = className.replace(/\\s+/g, ' ').trim();\r\n\t}\r\n\r\n\r\n\tPrism.hooks.add('before-highlightall', function (env) {\r\n\t\tenv.selector += ', ' + SELECTOR;\r\n\t});\r\n\r\n\tPrism.hooks.add('before-sanity-check', function (env) {\r\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\r\n\t\tif (pre.matches(SELECTOR)) {\r\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\r\n\r\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\r\n\r\n\t\t\t// add code element with loading message\r\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\r\n\t\t\tcode.textContent = LOADING_MESSAGE;\r\n\r\n\t\t\tvar src = pre.getAttribute('data-src');\r\n\r\n\t\t\tvar language = env.language;\r\n\t\t\tif (language === 'none') {\r\n\t\t\t\t// the language might be 'none' because there is no language set;\r\n\t\t\t\t// in this case, we want to use the extension as the language\r\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\r\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\r\n\t\t\t}\r\n\r\n\t\t\t// set language classes\r\n\t\t\tsetLanguageClass(code, language);\r\n\t\t\tsetLanguageClass(pre, language);\r\n\r\n\t\t\t// preload the language\r\n\t\t\tvar autoloader = Prism.plugins.autoloader;\r\n\t\t\tif (autoloader) {\r\n\t\t\t\tautoloader.loadLanguages(language);\r\n\t\t\t}\r\n\r\n\t\t\t// load file\r\n\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\txhr.open('GET', src, true);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tif (xhr.readyState == 4) {\r\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\r\n\t\t\t\t\t\t// mark as loaded\r\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\r\n\r\n\t\t\t\t\t\t// highlight code\r\n\t\t\t\t\t\tcode.textContent = xhr.responseText;\r\n\t\t\t\t\t\tPrism.highlightElement(code);\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// mark as failed\r\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\r\n\r\n\t\t\t\t\t\tif (xhr.status >= 400) {\r\n\t\t\t\t\t\t\tcode.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcode.textContent = FAILURE_EMPTY_MESSAGE;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.send(null);\r\n\t\t}\r\n\t});\r\n\r\n\tPrism.plugins.fileHighlight = {\r\n\t\t/**\r\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\r\n\t\t *\r\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\r\n\t\t *\r\n\t\t * @param {ParentNode} [container=document]\r\n\t\t */\r\n\t\thighlight: function highlight(container) {\r\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\r\n\r\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\r\n\t\t\t\tPrism.highlightElement(element);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar logged = false;\r\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\r\n\tPrism.fileHighlight = function () {\r\n\t\tif (!logged) {\r\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\r\n\t\t\tlogged = true;\r\n\t\t}\r\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\r\n\t};\r\n\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}
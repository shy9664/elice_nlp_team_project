{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js');\n\nvar normalizeIdentifier = require('../util/normalize-identifier.js');\n\nvar factoryDestination = require('./factory-destination.js');\n\nvar factoryLabel = require('./factory-label.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar factoryWhitespace = require('./factory-whitespace.js');\n\nvar factoryTitle = require('./factory-title.js');\n\nvar definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\nvar titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n};\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this;\n  var identifier;\n  return start;\n\n  function start(code) {\n    effects.enter('definition');\n    return factoryLabel.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(effects, factoryDestination(effects, effects.attempt(titleConstruct, factorySpace(effects, after, 'whitespace'), factorySpace(effects, after, 'whitespace')), nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier);\n      }\n\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start;\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, before)(code) : nok(code);\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, factorySpace(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\n\nmodule.exports = definition;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/micromark/dist/tokenize/definition.js"],"names":["markdownLineEnding","require","markdownLineEndingOrSpace","normalizeIdentifier","factoryDestination","factoryLabel","factorySpace","factoryWhitespace","factoryTitle","definition","name","tokenize","tokenizeDefinition","titleConstruct","tokenizeTitle","partial","effects","ok","nok","self","identifier","start","code","enter","call","labelAfter","sliceSerialize","events","length","slice","consume","exit","attempt","after","parser","defined","indexOf","push","before","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\r\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\r\nvar normalizeIdentifier = require('../util/normalize-identifier.js')\r\nvar factoryDestination = require('./factory-destination.js')\r\nvar factoryLabel = require('./factory-label.js')\r\nvar factorySpace = require('./factory-space.js')\r\nvar factoryWhitespace = require('./factory-whitespace.js')\r\nvar factoryTitle = require('./factory-title.js')\r\n\r\nvar definition = {\r\n  name: 'definition',\r\n  tokenize: tokenizeDefinition\r\n}\r\nvar titleConstruct = {\r\n  tokenize: tokenizeTitle,\r\n  partial: true\r\n}\r\n\r\nfunction tokenizeDefinition(effects, ok, nok) {\r\n  var self = this\r\n  var identifier\r\n  return start\r\n\r\n  function start(code) {\r\n    effects.enter('definition')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      labelAfter,\r\n      nok,\r\n      'definitionLabel',\r\n      'definitionLabelMarker',\r\n      'definitionLabelString'\r\n    )(code)\r\n  }\r\n\r\n  function labelAfter(code) {\r\n    identifier = normalizeIdentifier(\r\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n    )\r\n\r\n    if (code === 58) {\r\n      effects.enter('definitionMarker')\r\n      effects.consume(code)\r\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\r\n\r\n      return factoryWhitespace(\r\n        effects,\r\n        factoryDestination(\r\n          effects,\r\n          effects.attempt(\r\n            titleConstruct,\r\n            factorySpace(effects, after, 'whitespace'),\r\n            factorySpace(effects, after, 'whitespace')\r\n          ),\r\n          nok,\r\n          'definitionDestination',\r\n          'definitionDestinationLiteral',\r\n          'definitionDestinationLiteralMarker',\r\n          'definitionDestinationRaw',\r\n          'definitionDestinationString'\r\n        )\r\n      )\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  function after(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('definition')\r\n\r\n      if (self.parser.defined.indexOf(identifier) < 0) {\r\n        self.parser.defined.push(identifier)\r\n      }\r\n\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\nfunction tokenizeTitle(effects, ok, nok) {\r\n  return start\r\n\r\n  function start(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, before)(code)\r\n      : nok(code)\r\n  }\r\n\r\n  function before(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      return factoryTitle(\r\n        effects,\r\n        factorySpace(effects, after, 'whitespace'),\r\n        nok,\r\n        'definitionTitle',\r\n        'definitionTitleMarker',\r\n        'definitionTitleString'\r\n      )(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  function after(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n\r\nmodule.exports = definition\r\n"]},"metadata":{},"sourceType":"script"}
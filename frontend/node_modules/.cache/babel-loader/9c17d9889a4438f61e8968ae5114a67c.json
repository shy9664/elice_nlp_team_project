{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous: previous\n};\n\nfunction resolveCodeText(events) {\n  var tailExitIndex = events.length - 4;\n  var headEnterIndex = 3;\n  var index;\n  var enter; // If we start and end with an EOL or a space.\n\n  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex; // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = events[headEnterIndex][1].type = 'codeTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {\n      events[enter][1].type = 'codeTextData';\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n\n      enter = undefined;\n    }\n  }\n\n  return events;\n}\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';\n}\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  var sizeOpen = 0;\n  var size;\n  var token;\n  return start;\n\n  function start(code) {\n    effects.enter('codeText');\n    effects.enter('codeTextSequence');\n    return openingSequence(code);\n  }\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return openingSequence;\n    }\n\n    effects.exit('codeTextSequence');\n    return gap(code);\n  }\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    } // Closing fence?\n    // Could also be data.\n\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence');\n      size = 0;\n      return closingSequence(code);\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return gap;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return gap;\n    } // Data.\n\n\n    effects.enter('codeTextData');\n    return data(code);\n  } // In code.\n\n\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit('codeTextData');\n      return gap(code);\n    }\n\n    effects.consume(code);\n    return data;\n  } // Closing fence.\n\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return closingSequence;\n    } // Done!\n\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence');\n      effects.exit('codeText');\n      return ok(code);\n    } // More or less accents: mark as data.\n\n\n    token.type = 'codeTextData';\n    return data(code);\n  }\n}\n\nmodule.exports = codeText;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/micromark/dist/tokenize/code-text.js"],"names":["markdownLineEnding","require","codeText","name","tokenize","tokenizeCodeText","resolve","resolveCodeText","previous","events","tailExitIndex","length","headEnterIndex","index","enter","type","undefined","end","splice","code","effects","ok","nok","sizeOpen","size","token","start","openingSequence","consume","exit","gap","closingSequence","data","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\r\n\r\nvar codeText = {\r\n  name: 'codeText',\r\n  tokenize: tokenizeCodeText,\r\n  resolve: resolveCodeText,\r\n  previous: previous\r\n}\r\n\r\nfunction resolveCodeText(events) {\r\n  var tailExitIndex = events.length - 4\r\n  var headEnterIndex = 3\r\n  var index\r\n  var enter // If we start and end with an EOL or a space.\r\n\r\n  if (\r\n    (events[headEnterIndex][1].type === 'lineEnding' ||\r\n      events[headEnterIndex][1].type === 'space') &&\r\n    (events[tailExitIndex][1].type === 'lineEnding' ||\r\n      events[tailExitIndex][1].type === 'space')\r\n  ) {\r\n    index = headEnterIndex // And we have data.\r\n\r\n    while (++index < tailExitIndex) {\r\n      if (events[index][1].type === 'codeTextData') {\r\n        // Then we have padding.\r\n        events[tailExitIndex][1].type = events[headEnterIndex][1].type =\r\n          'codeTextPadding'\r\n        headEnterIndex += 2\r\n        tailExitIndex -= 2\r\n        break\r\n      }\r\n    }\r\n  } // Merge adjacent spaces and data.\r\n\r\n  index = headEnterIndex - 1\r\n  tailExitIndex++\r\n\r\n  while (++index <= tailExitIndex) {\r\n    if (enter === undefined) {\r\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\r\n        enter = index\r\n      }\r\n    } else if (\r\n      index === tailExitIndex ||\r\n      events[index][1].type === 'lineEnding'\r\n    ) {\r\n      events[enter][1].type = 'codeTextData'\r\n\r\n      if (index !== enter + 2) {\r\n        events[enter][1].end = events[index - 1][1].end\r\n        events.splice(enter + 2, index - enter - 2)\r\n        tailExitIndex -= index - enter - 2\r\n        index = enter + 2\r\n      }\r\n\r\n      enter = undefined\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\nfunction previous(code) {\r\n  // If there is a previous code, there will always be a tail.\r\n  return (\r\n    code !== 96 ||\r\n    this.events[this.events.length - 1][1].type === 'characterEscape'\r\n  )\r\n}\r\n\r\nfunction tokenizeCodeText(effects, ok, nok) {\r\n  var sizeOpen = 0\r\n  var size\r\n  var token\r\n  return start\r\n\r\n  function start(code) {\r\n    effects.enter('codeText')\r\n    effects.enter('codeTextSequence')\r\n    return openingSequence(code)\r\n  }\r\n\r\n  function openingSequence(code) {\r\n    if (code === 96) {\r\n      effects.consume(code)\r\n      sizeOpen++\r\n      return openingSequence\r\n    }\r\n\r\n    effects.exit('codeTextSequence')\r\n    return gap(code)\r\n  }\r\n\r\n  function gap(code) {\r\n    // EOF.\r\n    if (code === null) {\r\n      return nok(code)\r\n    } // Closing fence?\r\n    // Could also be data.\r\n\r\n    if (code === 96) {\r\n      token = effects.enter('codeTextSequence')\r\n      size = 0\r\n      return closingSequence(code)\r\n    } // Tabs don’t work, and virtual spaces don’t make sense.\r\n\r\n    if (code === 32) {\r\n      effects.enter('space')\r\n      effects.consume(code)\r\n      effects.exit('space')\r\n      return gap\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return gap\r\n    } // Data.\r\n\r\n    effects.enter('codeTextData')\r\n    return data(code)\r\n  } // In code.\r\n\r\n  function data(code) {\r\n    if (\r\n      code === null ||\r\n      code === 32 ||\r\n      code === 96 ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      effects.exit('codeTextData')\r\n      return gap(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return data\r\n  } // Closing fence.\r\n\r\n  function closingSequence(code) {\r\n    // More.\r\n    if (code === 96) {\r\n      effects.consume(code)\r\n      size++\r\n      return closingSequence\r\n    } // Done!\r\n\r\n    if (size === sizeOpen) {\r\n      effects.exit('codeTextSequence')\r\n      effects.exit('codeText')\r\n      return ok(code)\r\n    } // More or less accents: mark as data.\r\n\r\n    token.type = 'codeTextData'\r\n    return data(code)\r\n  }\r\n}\r\n\r\nmodule.exports = codeText\r\n"]},"metadata":{},"sourceType":"script"}
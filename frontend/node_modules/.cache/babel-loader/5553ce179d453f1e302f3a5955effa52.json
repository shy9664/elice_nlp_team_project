{"ast":null,"code":"import { getNode, getPreviousPath, setNodes, unsetNodes, createPluginFactory, findNode } from '@udecode/plate-core';\nimport React from 'react';\nimport { KEY_INDENT, setIndent } from '@udecode/plate-indent';\nimport { Path } from 'slate';\n\nfunction toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (typeof mix === 'string' || typeof mix === 'number') {\n    str += mix;\n  } else if (typeof mix === 'object') {\n    if (Array.isArray(mix)) {\n      for (k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n          if (y = toVal(mix[k])) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else {\n      for (k in mix) {\n        if (mix[k]) {\n          str && (str += ' ');\n          str += k;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\nfunction clsx() {\n  var i = 0,\n      tmp,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (tmp = arguments[i++]) {\n      if (x = toVal(tmp)) {\n        str && (str += ' ');\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}\n\nlet ListStyleType;\n\n(function (ListStyleType) {\n  ListStyleType[\"Armenian\"] = \"armenian\";\n  ListStyleType[\"Circle\"] = \"circle\";\n  ListStyleType[\"CjkIdeographic\"] = \"cjk-ideographic\";\n  ListStyleType[\"Decimal\"] = \"decimal\";\n  ListStyleType[\"DecimalLeadingZero\"] = \"decimal-leading-zero\";\n  ListStyleType[\"Disc\"] = \"disc\";\n  ListStyleType[\"Georgian\"] = \"georgian\";\n  ListStyleType[\"Hebrew\"] = \"hebrew\";\n  ListStyleType[\"Hiragana\"] = \"hiragana\";\n  ListStyleType[\"HiraganaIroha\"] = \"hiragana-iroha\";\n  ListStyleType[\"Katakana\"] = \"katakana\";\n  ListStyleType[\"KatakanaIroha\"] = \"katakana-iroha\";\n  ListStyleType[\"LowerAlpha\"] = \"lower-alpha\";\n  ListStyleType[\"LowerGreek\"] = \"lower-greek\";\n  ListStyleType[\"LowerLatin\"] = \"lower-latin\";\n  ListStyleType[\"LowerRoman\"] = \"lower-roman\";\n  ListStyleType[\"None\"] = \"none\";\n  ListStyleType[\"Square\"] = \"square\";\n  ListStyleType[\"UpperAlpha\"] = \"upper-alpha\";\n  ListStyleType[\"UpperLatin\"] = \"upper-latin\";\n  ListStyleType[\"UpperRoman\"] = \"upper-roman\";\n  ListStyleType[\"Initial\"] = \"initial\";\n  ListStyleType[\"Inherit\"] = \"inherit\";\n})(ListStyleType || (ListStyleType = {}));\n\nconst injectIndentListComponent = props => {\n  const {\n    element\n  } = props;\n\n  if (element[KEY_LIST_STYLE_TYPE]) {\n    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${element[KEY_LIST_STYLE_TYPE]}`);\n    const style = {\n      padding: 0,\n      margin: 0,\n      listStyleType: element[KEY_LIST_STYLE_TYPE]\n    };\n\n    if ([ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(element[KEY_LIST_STYLE_TYPE])) {\n      className = clsx(className, 'slate-list-bullet');\n      return ({\n        children\n      }) => /*#__PURE__*/React.createElement(\"ul\", {\n        style: style,\n        className: className\n      }, /*#__PURE__*/React.createElement(\"li\", null, children));\n    }\n\n    className = clsx(className, 'slate-list-number');\n    return ({\n      children\n    }) => /*#__PURE__*/React.createElement(\"ol\", {\n      style: style,\n      className: className,\n      start: element[KEY_LIST_START]\n    }, /*#__PURE__*/React.createElement(\"li\", null, children));\n  }\n};\n\nconst getNextIndentList = (editor, [node, path], {\n  sameStyleType = true\n} = {}) => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n  let nextPath = Path.next(path);\n\n  while (true) {\n    const nextNode = getNode(editor, nextPath);\n\n    if (!nextNode || !nextNode[KEY_INDENT] || nextNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (nextNode[KEY_INDENT] === indent) {\n      if (sameStyleType && nextNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [nextNode, nextPath];\n    }\n\n    nextPath = Path.next(nextPath);\n  }\n};\n\nconst getPreviousIndentList = (editor, [node, path], {\n  sameStyleType = true\n} = {}) => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n  let prevPath = getPreviousPath(path);\n\n  while (true) {\n    if (!prevPath) return;\n    const prevNode = getNode(editor, prevPath);\n\n    if (!prevNode || !prevNode[KEY_INDENT] || prevNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (prevNode[KEY_INDENT] === indent) {\n      if (sameStyleType && prevNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [prevNode, prevPath];\n    }\n\n    prevPath = getPreviousPath(prevPath);\n  }\n};\n\nconst normalizeListStart = (editor, nodeEntry) => {\n  const [node, path] = nodeEntry;\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  if (listStyleType) {\n    var _node$KEY_LIST_START, _nextNode$KEY_LIST_ST;\n\n    const prevNodeEntry = getPreviousIndentList(editor, nodeEntry);\n\n    if (!prevNodeEntry && node[KEY_LIST_START] > 1) {\n      setNodes(editor, {\n        [KEY_LIST_START]: 1\n      }, {\n        at: path\n      });\n    }\n\n    const nextNodeEntry = getNextIndentList(editor, nodeEntry);\n    if (!nextNodeEntry) return;\n    const [nextNode, nextPath] = nextNodeEntry;\n    const listStart = (_node$KEY_LIST_START = node[KEY_LIST_START]) !== null && _node$KEY_LIST_START !== void 0 ? _node$KEY_LIST_START : 1;\n    const nextListStart = (_nextNode$KEY_LIST_ST = nextNode[KEY_LIST_START]) !== null && _nextNode$KEY_LIST_ST !== void 0 ? _nextNode$KEY_LIST_ST : 1;\n\n    if (nextListStart !== listStart + 1) {\n      setNodes(editor, {\n        [KEY_LIST_START]: listStart + 1\n      }, {\n        at: nextPath\n      });\n      normalizeListStart(editor, [nextNode, nextPath]);\n    }\n  }\n};\n\nconst withIndentList = editor => {\n  const {\n    apply,\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (node[KEY_LIST_STYLE_TYPE] && !node[KEY_INDENT]) {\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE, {\n        at: path\n      });\n    }\n\n    normalizeListStart(editor, [node, path]);\n    return normalizeNode([node, path]);\n  };\n\n  editor.apply = operation => {\n    const {\n      path\n    } = operation;\n    let nodeBefore = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode(editor, path);\n    } // FIXME: delete first list\n    // let nextNodeEntryBefore: any;\n    // if (\n    //   operation.type === 'merge_node' &&\n    //   operation.properties[KEY_LIST_STYLE_TYPE]\n    // ) {\n    //   const node = getNode(editor, path);\n    //\n    //   nextNodeEntryBefore = getNextIndentList(editor, [node as any, path]);\n    // }\n\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const {\n        properties\n      } = operation;\n\n      if (properties[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode(editor, path);\n        if (!node) return;\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n\n        if (!prevNodeEntry) {\n          normalizeListStart(editor, [node, path]);\n          return;\n        }\n\n        normalizeListStart(editor, prevNodeEntry); // FIXME: delete first list\n        // if (nextNodeEntryBefore) {\n        //   normalizeListStart(editor,nextNodeEntryBefore);\n        // }\n      }\n    }\n\n    if (operation.type === 'set_node' && nodeBefore) {\n      const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];\n      const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE]; // Remove list style type\n\n      if (prevListStyleType && !listStyleType) {\n        const node = getNode(editor, path);\n        if (!node) return;\n        const nextNodeEntry = getNextIndentList(editor, [node, path]);\n        if (!nextNodeEntry) return;\n        normalizeListStart(editor, nextNodeEntry);\n      } // Update list style type\n\n\n      if ((prevListStyleType || listStyleType) && prevListStyleType !== listStyleType) {\n        const node = getNode(editor, path);\n        if (!node) return;\n        /**\n         * Case:\n         * - 1-<o>-1 <- toggle ol\n         * - <1>-1-2 <- normalize\n         * - 1-2-3\n         */\n\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n        /**\n         * Case:\n         * - 1-<2>-3 <- toggle ul\n         * - 1-o-<3> <- normalize\n         * - 1-o-1\n         */\n\n\n        const nextNodeEntry = getNextIndentList(editor, [nodeBefore, path]);\n\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n\n      const prevIndent = operation.properties[KEY_INDENT];\n      const indent = operation.newProperties[KEY_INDENT]; // Update indent\n\n      if (prevIndent !== indent) {\n        const node = getNode(editor, path);\n        if (!node) return;\n        /**\n         * Case:\n         * - 1-<o>-1 <- indent\n         * - <1>-1o-1 <- normalize node before\n         * - 1-1o-2\n         */\n\n        let prevNodeEntry = getPreviousIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false\n        });\n\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n        /**\n         * Case:\n         * - 11-<1>-11 <- indent\n         * - <11>-11-12 <- normalize prev node after\n         * - 11-12-13\n         */\n\n\n        prevNodeEntry = getPreviousIndentList(editor, [node, path], {\n          sameStyleType: false\n        });\n\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n        /**\n         * Case:\n         * - 11-<12>-13 <- outdent\n         * - 11-2-<13> <- normalize next node before\n         * - 11-2-11\n         */\n\n\n        let nextNodeEntry = getNextIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false\n        });\n\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n        /**\n         * Case:\n         * - 1-<1o>-2 <- outdent\n         * - 1-o-<2> <- normalize next node after\n         * - 1-o-1\n         */\n\n\n        nextNodeEntry = getNextIndentList(editor, [node, path], {\n          sameStyleType: false\n        });\n\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n\nconst KEY_LIST_STYLE_TYPE = 'listStyleType';\nconst KEY_LIST_START = 'listStart';\nconst createIndentListPlugin = createPluginFactory({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent\n  },\n  withOverrides: withIndentList\n});\n/**\n * Increase the indentation of the selected blocks.\n */\n\nconst indentList = (editor, {\n  listStyleType = ListStyleType.Disc,\n  ...options\n} = {}) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType\n    }),\n    ...options\n  });\n};\n/**\n * Decrease the indentation of the selected blocks.\n */\n\n\nconst outdentList = (editor, options = {}) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options\n  });\n};\n/**\n * Increase the indentation of the selected blocks.\n */\n\n\nconst toggleIndentList = (editor, options) => {\n  const nodeEntry = findNode(editor, {\n    match: n => !!n[KEY_LIST_STYLE_TYPE]\n  });\n\n  if (!nodeEntry) {\n    indentList(editor, options);\n    return;\n  }\n\n  const [node, path] = nodeEntry;\n\n  if (node[KEY_LIST_STYLE_TYPE] && options !== null && options !== void 0 && options.listStyleType) {\n    if (node[KEY_LIST_STYLE_TYPE] === (options === null || options === void 0 ? void 0 : options.listStyleType)) {\n      outdentList(editor, options);\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE);\n      return;\n    }\n\n    setNodes(editor, {\n      [KEY_LIST_STYLE_TYPE]: options === null || options === void 0 ? void 0 : options.listStyleType\n    }, {\n      at: path\n    });\n  }\n};\n\nexport { KEY_LIST_START, KEY_LIST_STYLE_TYPE, ListStyleType, createIndentListPlugin, getNextIndentList, getPreviousIndentList, indentList, injectIndentListComponent, normalizeListStart, outdentList, toggleIndentList, withIndentList };","map":{"version":3,"sources":["../../../../node_modules/clsx/dist/clsx.m.js","../src/types.ts","../src/injectIndentListComponent.tsx","../src/queries/getNextIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/transforms/normalizeListStart.ts","../src/withIndentList.ts","../src/createIndentListPlugin.ts","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/toggleIndentList.ts"],"names":["ListStyleType","injectIndentListComponent","props","element","className","clsx","KEY_LIST_STYLE_TYPE","style","padding","margin","listStyleType","children","getNextIndentList","sameStyleType","indent","node","nextPath","Path","nextNode","getNode","getPreviousIndentList","prevPath","getPreviousPath","prevNode","normalizeListStart","prevNodeEntry","setNodes","at","path","nextNodeEntry","listStart","nextListStart","withIndentList","editor","normalizeNode","unsetNodes","operation","nodeBefore","apply","properties","prevListStyleType","prevIndent","KEY_LIST_START","createIndentListPlugin","createPluginFactory","key","inject","belowComponent","withOverrides","indentList","options","setIndent","offset","setNodesProps","outdentList","unsetNodesProps","toggleIndentList","nodeEntry","findNode","match","n"],"mappings":"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","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export enum ListStyleType {\n  // The marker is traditional Armenian numbering\n  Armenian = 'armenian',\n\n  // The marker is a circle\n  Circle = 'circle',\n\n  // The marker is plain ideographic numbers\n  CjkIdeographic = 'cjk-ideographic',\n\n  // The marker is a number. This is default for <ol>\n  Decimal = 'decimal',\n\n  // The marker is a number with leading zeros (01, 02, 03, etc.)\n  DecimalLeadingZero = 'decimal-leading-zero',\n\n  // The marker is a filled circle. This is default for <ul>\n  Disc = 'disc',\n\n  // The marker is traditional Georgian numbering\n  Georgian = 'georgian',\n\n  // The marker is traditional Hebrew numbering\n  Hebrew = 'hebrew',\n\n  // The marker is traditional Hiragana numbering\n  Hiragana = 'hiragana',\n\n  // The marker is traditional Hiragana iroha numbering\n  HiraganaIroha = 'hiragana-iroha',\n\n  // The marker is traditional Katakana numbering\n  Katakana = 'katakana',\n\n  // The marker is traditional Katakana iroha numbering\n  KatakanaIroha = 'katakana-iroha',\n\n  // The marker is lower-alpha (a, b, c, d, e, etc.)\n  LowerAlpha = 'lower-alpha',\n\n  // The marker is lower-greek\n  LowerGreek = 'lower-greek',\n\n  // The marker is lower-latin (a, b, c, d, e, etc.)\n  LowerLatin = 'lower-latin',\n\n  // The marker is lower-roman (i, ii, iii, iv, v, etc.)\n  LowerRoman = 'lower-roman',\n\n  // No marker is shown\n  None = 'none',\n\n  // The marker is a square\n  Square = 'square',\n\n  // The marker is upper-alpha (A, B, C, D, E, etc.)\n  UpperAlpha = 'upper-alpha',\n\n  // The marker is upper-latin (A, B, C, D, E, etc.)\n  UpperLatin = 'upper-latin',\n\n  // The marker is upper-roman (I, II, III, IV, V, etc.)\n  UpperRoman = 'upper-roman',\n\n  // Sets this property to its default value. Read about initial\n  Initial = 'initial',\n\n  // Inherits this property from its parent element. Read about inherit\n  Inherit = 'inherit',\n}\n","import React, { CSSProperties } from 'react';\nimport { InjectComponent } from '@udecode/plate-core';\nimport clsx from 'clsx';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\nimport { ListStyleType } from './types';\n\nexport const injectIndentListComponent: InjectComponent = (props) => {\n  const { element } = props;\n\n  if (element[KEY_LIST_STYLE_TYPE]) {\n    let className = clsx(\n      `slate-${KEY_LIST_STYLE_TYPE}-${element[KEY_LIST_STYLE_TYPE]}`\n    );\n    const style: CSSProperties = {\n      padding: 0,\n      margin: 0,\n      listStyleType: element[KEY_LIST_STYLE_TYPE],\n    };\n\n    if (\n      [ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(\n        element[KEY_LIST_STYLE_TYPE]\n      )\n    ) {\n      className = clsx(className, 'slate-list-bullet');\n\n      return ({ children }) => (\n        <ul style={style} className={className}>\n          <li>{children}</li>\n        </ul>\n      );\n    }\n\n    className = clsx(className, 'slate-list-number');\n\n    return ({ children }) => (\n      <ol style={style} className={className} start={element[KEY_LIST_START]}>\n        <li>{children}</li>\n      </ol>\n    );\n  }\n};\n","import { getNode, PlateEditor } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { NodeEntry, Path } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport const getNextIndentList = (\n  editor: PlateEditor,\n  [node, path]: NodeEntry,\n  {\n    sameStyleType = true,\n  }: { sameIndent?: boolean; sameStyleType?: boolean } = {}\n): NodeEntry | undefined => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  let nextPath = Path.next(path);\n\n  while (true) {\n    const nextNode = getNode(editor, nextPath);\n\n    if (!nextNode || !nextNode[KEY_INDENT] || nextNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (nextNode[KEY_INDENT] === indent) {\n      if (sameStyleType && nextNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [nextNode, nextPath];\n    }\n\n    nextPath = Path.next(nextPath);\n  }\n};\n","import { getNode, getPreviousPath, PlateEditor } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { NodeEntry } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport const getPreviousIndentList = (\n  editor: PlateEditor,\n  [node, path]: NodeEntry,\n  {\n    sameStyleType = true,\n  }: { sameIndent?: boolean; sameStyleType?: boolean } = {}\n): NodeEntry | undefined => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  let prevPath = getPreviousPath(path);\n\n  while (true) {\n    if (!prevPath) return;\n\n    const prevNode = getNode(editor, prevPath);\n\n    if (!prevNode || !prevNode[KEY_INDENT] || prevNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (prevNode[KEY_INDENT] === indent) {\n      if (sameStyleType && prevNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [prevNode, prevPath];\n    }\n\n    prevPath = getPreviousPath(prevPath);\n  }\n};\n","import { PlateEditor, setNodes } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\n\nexport const normalizeListStart = (\n  editor: PlateEditor,\n  nodeEntry: NodeEntry\n) => {\n  const [node, path] = nodeEntry;\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  if (listStyleType) {\n    const prevNodeEntry = getPreviousIndentList(editor, nodeEntry);\n    if (!prevNodeEntry && node[KEY_LIST_START] > 1) {\n      setNodes(editor, { [KEY_LIST_START]: 1 }, { at: path });\n    }\n\n    const nextNodeEntry = getNextIndentList(editor, nodeEntry);\n    if (!nextNodeEntry) return;\n\n    const [nextNode, nextPath] = nextNodeEntry;\n\n    const listStart = node[KEY_LIST_START] ?? 1;\n    const nextListStart = nextNode[KEY_LIST_START] ?? 1;\n\n    if (nextListStart !== listStart + 1) {\n      setNodes(editor, { [KEY_LIST_START]: listStart + 1 }, { at: nextPath });\n      normalizeListStart(editor, [nextNode, nextPath]);\n    }\n  }\n};\n","import { getNode, unsetNodes, WithOverride } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { Node } from 'slate';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport { normalizeListStart } from './transforms/normalizeListStart';\nimport { KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\n\nexport const withIndentList: WithOverride = (editor) => {\n  const { apply, normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (node[KEY_LIST_STYLE_TYPE] && !node[KEY_INDENT]) {\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n    }\n\n    normalizeListStart(editor, [node, path]);\n\n    return normalizeNode([node, path]);\n  };\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: Node | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode(editor, path);\n    }\n\n    // FIXME: delete first list\n    // let nextNodeEntryBefore: any;\n    // if (\n    //   operation.type === 'merge_node' &&\n    //   operation.properties[KEY_LIST_STYLE_TYPE]\n    // ) {\n    //   const node = getNode(editor, path);\n    //\n    //   nextNodeEntryBefore = getNextIndentList(editor, [node as any, path]);\n    // }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if (properties[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n        if (!prevNodeEntry) {\n          normalizeListStart(editor, [node as any, path]);\n          return;\n        }\n\n        normalizeListStart(editor, prevNodeEntry);\n        // FIXME: delete first list\n        // if (nextNodeEntryBefore) {\n        //   normalizeListStart(editor,nextNodeEntryBefore);\n        // }\n      }\n    }\n\n    if (operation.type === 'set_node' && nodeBefore) {\n      const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];\n      const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE];\n\n      // Remove list style type\n      if (prevListStyleType && !listStyleType) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        const nextNodeEntry = getNextIndentList(editor, [node, path]);\n        if (!nextNodeEntry) return;\n\n        normalizeListStart(editor, nextNodeEntry);\n      }\n\n      // Update list style type\n      if (\n        (prevListStyleType || listStyleType) &&\n        prevListStyleType !== listStyleType\n      ) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- toggle ol\n         * - <1>-1-2 <- normalize\n         * - 1-2-3\n         */\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 1-<2>-3 <- toggle ul\n         * - 1-o-<3> <- normalize\n         * - 1-o-1\n         */\n        const nextNodeEntry = getNextIndentList(editor, [nodeBefore, path]);\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n\n      const prevIndent = operation.properties[KEY_INDENT];\n      const indent = operation.newProperties[KEY_INDENT];\n\n      // Update indent\n      if (prevIndent !== indent) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- indent\n         * - <1>-1o-1 <- normalize node before\n         * - 1-1o-2\n         */\n        let prevNodeEntry = getPreviousIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false,\n        });\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 11-<1>-11 <- indent\n         * - <11>-11-12 <- normalize prev node after\n         * - 11-12-13\n         */\n        prevNodeEntry = getPreviousIndentList(editor, [node, path], {\n          sameStyleType: false,\n        });\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 11-<12>-13 <- outdent\n         * - 11-2-<13> <- normalize next node before\n         * - 11-2-11\n         */\n        let nextNodeEntry = getNextIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false,\n        });\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 1-<1o>-2 <- outdent\n         * - 1-o-<2> <- normalize next node after\n         * - 1-o-1\n         */\n        nextNodeEntry = getNextIndentList(editor, [node, path], {\n          sameStyleType: false,\n        });\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\nexport const KEY_LIST_START = 'listStart';\n\nexport const createIndentListPlugin = createPluginFactory({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  withOverrides: withIndentList,\n});\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions extends SetIndentOptions {\n  listStyleType?: ListStyleType | string;\n}\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indentList = (\n  editor: PlateEditor,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { IndentListOptions } from './indentList';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdentList = (\n  editor: PlateEditor,\n  options: IndentListOptions = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options,\n  });\n};\n","import {\n  findNode,\n  PlateEditor,\n  setNodes,\n  unsetNodes,\n} from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { indentList, IndentListOptions } from './indentList';\nimport { outdentList } from './outdentList';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const toggleIndentList = (\n  editor: PlateEditor,\n  options?: IndentListOptions\n) => {\n  const nodeEntry = findNode(editor, {\n    match: (n) => !!n[KEY_LIST_STYLE_TYPE],\n  });\n\n  if (!nodeEntry) {\n    indentList(editor, options);\n    return;\n  }\n\n  const [node, path] = nodeEntry;\n\n  if (node[KEY_LIST_STYLE_TYPE] && options?.listStyleType) {\n    if (node[KEY_LIST_STYLE_TYPE] === options?.listStyleType) {\n      outdentList(editor, options);\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE);\n      return;\n    }\n\n    setNodes(\n      editor,\n      { [KEY_LIST_STYLE_TYPE]: options?.listStyleType },\n      { at: path }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
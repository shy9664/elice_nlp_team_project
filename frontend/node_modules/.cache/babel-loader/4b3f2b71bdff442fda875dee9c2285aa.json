{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar markdownSpace = require('../character/markdown-space.js'); // eslint-disable-next-line max-params\n\n\nfunction labelFactory(effects, ok, nok, type, markerType, stringType) {\n  var self = this;\n  var size = 0;\n  var data;\n  return start;\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  function atBreak(code) {\n    if (code === null || code === 91 || code === 93 && !data ||\n    /* c8 ignore next */\n    code === 94 &&\n    /* c8 ignore next */\n    !size &&\n    /* c8 ignore next */\n    '_hiddenFootnoteSupport' in self.parser.constructs || size > 999) {\n      return nok(code);\n    }\n\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return label(code);\n  }\n\n  function label(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    data = data || !markdownSpace(code);\n    return code === 92 ? labelEscape : label;\n  }\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n\n    return label(code);\n  }\n}\n\nmodule.exports = labelFactory;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/micromark/dist/tokenize/factory-label.js"],"names":["markdownLineEnding","require","markdownSpace","labelFactory","effects","ok","nok","type","markerType","stringType","self","size","data","start","code","enter","consume","exit","atBreak","parser","constructs","contentType","label","labelEscape","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\r\nvar markdownSpace = require('../character/markdown-space.js')\r\n\r\n// eslint-disable-next-line max-params\r\nfunction labelFactory(effects, ok, nok, type, markerType, stringType) {\r\n  var self = this\r\n  var size = 0\r\n  var data\r\n  return start\r\n\r\n  function start(code) {\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  function atBreak(code) {\r\n    if (\r\n      code === null ||\r\n      code === 91 ||\r\n      (code === 93 && !data) ||\r\n      /* c8 ignore next */\r\n      (code === 94 &&\r\n        /* c8 ignore next */\r\n        !size &&\r\n        /* c8 ignore next */\r\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\r\n      size > 999\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === 93) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return label(code)\r\n  }\r\n\r\n  function label(code) {\r\n    if (\r\n      code === null ||\r\n      code === 91 ||\r\n      code === 93 ||\r\n      markdownLineEnding(code) ||\r\n      size++ > 999\r\n    ) {\r\n      effects.exit('chunkString')\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    data = data || !markdownSpace(code)\r\n    return code === 92 ? labelEscape : label\r\n  }\r\n\r\n  function labelEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code)\r\n      size++\r\n      return label\r\n    }\r\n\r\n    return label(code)\r\n  }\r\n}\r\n\r\nmodule.exports = labelFactory\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\n\nvar cheerio_select_1 = require(\"cheerio-select\");\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\n\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\n/**\r\n * Helper function to render a DOM.\r\n *\r\n * @param that - Cheerio instance to render.\r\n * @param dom - The DOM to render. Defaults to `that`'s root.\r\n * @param options - Options for rendering.\r\n * @returns The rendered document.\r\n */\n\n\nfunction render(that, dom, options) {\n  var _a;\n\n  var toRender = dom ? typeof dom === 'string' ? cheerio_select_1.select(dom, (_a = that === null || that === void 0 ? void 0 : that._root) !== null && _a !== void 0 ? _a : [], options) : dom : that === null || that === void 0 ? void 0 : that._root.children;\n  if (!toRender) return '';\n  return options.xmlMode || options._useHtmlParser2 ? htmlparser2_adapter_1.render(toRender, options) : parse5_adapter_1.render(toRender);\n}\n/**\r\n * Checks if a passed object is an options object.\r\n *\r\n * @param dom - Object to check if it is an options object.\r\n * @returns Whether the object is an options object.\r\n */\n\n\nfunction isOptions(dom) {\n  return typeof dom === 'object' && dom != null && !('length' in dom) && !('type' in dom);\n}\n\nfunction html(dom, options) {\n  /*\r\n   * Be flexible about parameters, sometimes we call html(),\r\n   * with options as only parameter\r\n   * check dom argument for dom element specific properties\r\n   * assume there is no 'length' or 'type' properties in the options object\r\n   */\n  if (!options && isOptions(dom)) {\n    options = dom;\n    dom = undefined;\n  }\n  /*\r\n   * Sometimes `$.html()` is used without preloading html,\r\n   * so fallback non-existing options to the default ones.\r\n   */\n\n\n  var opts = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), this ? this._options : {}), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n\n  return render(this || undefined, dom, opts);\n}\n\nexports.html = html;\n/**\r\n * Render the document as XML.\r\n *\r\n * @param dom - Element to render.\r\n * @returns THe rendered document.\r\n */\n\nfunction xml(dom) {\n  var options = tslib_1.__assign(tslib_1.__assign({}, this._options), {\n    xmlMode: true\n  });\n\n  return render(this, dom, options);\n}\n\nexports.xml = xml;\n/**\r\n * Render the document as text.\r\n *\r\n * @param elements - Elements to render.\r\n * @returns The rendered document.\r\n */\n\nfunction text(elements) {\n  var elems = elements ? elements : this ? this.root() : [];\n  var ret = '';\n\n  for (var i = 0; i < elems.length; i++) {\n    var elem = elems[i];\n    if (htmlparser2_1.DomUtils.isText(elem)) ret += elem.data;else if (htmlparser2_1.DomUtils.hasChildren(elem) && elem.type !== htmlparser2_1.ElementType.Comment && elem.type !== htmlparser2_1.ElementType.Script && elem.type !== htmlparser2_1.ElementType.Style) {\n      ret += text(elem.children);\n    }\n  }\n\n  return ret;\n}\n\nexports.text = text;\n\nfunction parseHTML(data, context, keepScripts) {\n  if (keepScripts === void 0) {\n    keepScripts = typeof context === 'boolean' ? context : false;\n  }\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  var parsed = this.load(data, options_1.default, false);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n  /*\r\n   * The `children` array is used by Cheerio internally to group elements that\r\n   * share the same parents. When nodes created through `parseHTML` are\r\n   * inserted into previously-existing DOM structures, they will be removed\r\n   * from the `children` array. The results of `parseHTML` should remain\r\n   * constant across these operations, so a shallow copy should be returned.\r\n   */\n\n\n  return parsed.root()[0].children.slice();\n}\n\nexports.parseHTML = parseHTML;\n/**\r\n * Sometimes you need to work with the top-level root element. To query it, you\r\n * can use `$.root()`.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\r\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\r\n * ```\r\n *\r\n * @returns Cheerio instance wrapping the root node.\r\n * @alias Cheerio.root\r\n */\n\nfunction root() {\n  return this(this._root);\n}\n\nexports.root = root;\n/**\r\n * Checks to see if the `contained` DOM element is a descendant of the\r\n * `container` DOM element.\r\n *\r\n * @param container - Potential parent node.\r\n * @param contained - Potential child node.\r\n * @returns Indicates if the nodes contain one another.\r\n * @alias Cheerio.contains\r\n * @see {@link https://api.jquery.com/jQuery.contains/}\r\n */\n\nfunction contains(container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n  /*\r\n   * Step up the descendants, stopping when the root element is reached\r\n   * (signaled by `.parent` returning a reference to the same object)\r\n   */\n\n\n  var next = contained;\n\n  while (next && next !== next.parent) {\n    next = next.parent;\n\n    if (next === container) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.contains = contains;\n/**\r\n * $.merge().\r\n *\r\n * @param arr1 - First array.\r\n * @param arr2 - Second array.\r\n * @returns `arr1`, with elements of `arr2` inserted.\r\n * @alias Cheerio.merge\r\n * @see {@link https://api.jquery.com/jQuery.merge/}\r\n */\n\nfunction merge(arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n\n  var newLength = arr1.length;\n  var len = +arr2.length;\n\n  for (var i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n\n  arr1.length = newLength;\n  return arr1;\n}\n\nexports.merge = merge;\n/**\r\n * @param item - Item to check.\r\n * @returns Indicates if the item is array-like.\r\n */\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/cheerio/lib/static.js"],"names":["Object","defineProperty","exports","value","merge","contains","root","parseHTML","text","xml","html","tslib_1","require","options_1","__importStar","cheerio_select_1","htmlparser2_1","parse5_adapter_1","htmlparser2_adapter_1","render","that","dom","options","_a","toRender","select","_root","children","xmlMode","_useHtmlParser2","isOptions","undefined","opts","__assign","default","_options","flatten","elements","elems","ret","i","length","elem","DomUtils","isText","data","hasChildren","type","ElementType","Comment","Script","Style","context","keepScripts","parsed","load","remove","slice","container","contained","next","parent","arr1","arr2","isArrayLike","newLength","len","item","Array","isArray","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\r\nvar tslib_1 = require(\"tslib\");\r\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\r\nvar cheerio_select_1 = require(\"cheerio-select\");\r\nvar htmlparser2_1 = require(\"htmlparser2\");\r\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\r\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\r\n/**\r\n * Helper function to render a DOM.\r\n *\r\n * @param that - Cheerio instance to render.\r\n * @param dom - The DOM to render. Defaults to `that`'s root.\r\n * @param options - Options for rendering.\r\n * @returns The rendered document.\r\n */\r\nfunction render(that, dom, options) {\r\n    var _a;\r\n    var toRender = dom\r\n        ? typeof dom === 'string'\r\n            ? cheerio_select_1.select(dom, (_a = that === null || that === void 0 ? void 0 : that._root) !== null && _a !== void 0 ? _a : [], options)\r\n            : dom\r\n        : that === null || that === void 0 ? void 0 : that._root.children;\r\n    if (!toRender)\r\n        return '';\r\n    return options.xmlMode || options._useHtmlParser2\r\n        ? htmlparser2_adapter_1.render(toRender, options)\r\n        : parse5_adapter_1.render(toRender);\r\n}\r\n/**\r\n * Checks if a passed object is an options object.\r\n *\r\n * @param dom - Object to check if it is an options object.\r\n * @returns Whether the object is an options object.\r\n */\r\nfunction isOptions(dom) {\r\n    return (typeof dom === 'object' &&\r\n        dom != null &&\r\n        !('length' in dom) &&\r\n        !('type' in dom));\r\n}\r\nfunction html(dom, options) {\r\n    /*\r\n     * Be flexible about parameters, sometimes we call html(),\r\n     * with options as only parameter\r\n     * check dom argument for dom element specific properties\r\n     * assume there is no 'length' or 'type' properties in the options object\r\n     */\r\n    if (!options && isOptions(dom)) {\r\n        options = dom;\r\n        dom = undefined;\r\n    }\r\n    /*\r\n     * Sometimes `$.html()` is used without preloading html,\r\n     * so fallback non-existing options to the default ones.\r\n     */\r\n    var opts = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), (this ? this._options : {})), options_1.flatten(options !== null && options !== void 0 ? options : {}));\r\n    return render(this || undefined, dom, opts);\r\n}\r\nexports.html = html;\r\n/**\r\n * Render the document as XML.\r\n *\r\n * @param dom - Element to render.\r\n * @returns THe rendered document.\r\n */\r\nfunction xml(dom) {\r\n    var options = tslib_1.__assign(tslib_1.__assign({}, this._options), { xmlMode: true });\r\n    return render(this, dom, options);\r\n}\r\nexports.xml = xml;\r\n/**\r\n * Render the document as text.\r\n *\r\n * @param elements - Elements to render.\r\n * @returns The rendered document.\r\n */\r\nfunction text(elements) {\r\n    var elems = elements ? elements : this ? this.root() : [];\r\n    var ret = '';\r\n    for (var i = 0; i < elems.length; i++) {\r\n        var elem = elems[i];\r\n        if (htmlparser2_1.DomUtils.isText(elem))\r\n            ret += elem.data;\r\n        else if (htmlparser2_1.DomUtils.hasChildren(elem) &&\r\n            elem.type !== htmlparser2_1.ElementType.Comment &&\r\n            elem.type !== htmlparser2_1.ElementType.Script &&\r\n            elem.type !== htmlparser2_1.ElementType.Style) {\r\n            ret += text(elem.children);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.text = text;\r\nfunction parseHTML(data, context, keepScripts) {\r\n    if (keepScripts === void 0) { keepScripts = typeof context === 'boolean' ? context : false; }\r\n    if (!data || typeof data !== 'string') {\r\n        return null;\r\n    }\r\n    if (typeof context === 'boolean') {\r\n        keepScripts = context;\r\n    }\r\n    var parsed = this.load(data, options_1.default, false);\r\n    if (!keepScripts) {\r\n        parsed('script').remove();\r\n    }\r\n    /*\r\n     * The `children` array is used by Cheerio internally to group elements that\r\n     * share the same parents. When nodes created through `parseHTML` are\r\n     * inserted into previously-existing DOM structures, they will be removed\r\n     * from the `children` array. The results of `parseHTML` should remain\r\n     * constant across these operations, so a shallow copy should be returned.\r\n     */\r\n    return parsed.root()[0].children.slice();\r\n}\r\nexports.parseHTML = parseHTML;\r\n/**\r\n * Sometimes you need to work with the top-level root element. To query it, you\r\n * can use `$.root()`.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\r\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\r\n * ```\r\n *\r\n * @returns Cheerio instance wrapping the root node.\r\n * @alias Cheerio.root\r\n */\r\nfunction root() {\r\n    return this(this._root);\r\n}\r\nexports.root = root;\r\n/**\r\n * Checks to see if the `contained` DOM element is a descendant of the\r\n * `container` DOM element.\r\n *\r\n * @param container - Potential parent node.\r\n * @param contained - Potential child node.\r\n * @returns Indicates if the nodes contain one another.\r\n * @alias Cheerio.contains\r\n * @see {@link https://api.jquery.com/jQuery.contains/}\r\n */\r\nfunction contains(container, contained) {\r\n    // According to the jQuery API, an element does not \"contain\" itself\r\n    if (contained === container) {\r\n        return false;\r\n    }\r\n    /*\r\n     * Step up the descendants, stopping when the root element is reached\r\n     * (signaled by `.parent` returning a reference to the same object)\r\n     */\r\n    var next = contained;\r\n    while (next && next !== next.parent) {\r\n        next = next.parent;\r\n        if (next === container) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexports.contains = contains;\r\n/**\r\n * $.merge().\r\n *\r\n * @param arr1 - First array.\r\n * @param arr2 - Second array.\r\n * @returns `arr1`, with elements of `arr2` inserted.\r\n * @alias Cheerio.merge\r\n * @see {@link https://api.jquery.com/jQuery.merge/}\r\n */\r\nfunction merge(arr1, arr2) {\r\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\r\n        return;\r\n    }\r\n    var newLength = arr1.length;\r\n    var len = +arr2.length;\r\n    for (var i = 0; i < len; i++) {\r\n        arr1[newLength++] = arr2[i];\r\n    }\r\n    arr1.length = newLength;\r\n    return arr1;\r\n}\r\nexports.merge = merge;\r\n/**\r\n * @param item - Item to check.\r\n * @returns Indicates if the item is array-like.\r\n */\r\nfunction isArrayLike(item) {\r\n    if (Array.isArray(item)) {\r\n        return true;\r\n    }\r\n    if (typeof item !== 'object' ||\r\n        !Object.prototype.hasOwnProperty.call(item, 'length') ||\r\n        typeof item.length !== 'number' ||\r\n        item.length < 0) {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < item.length; i++) {\r\n        if (!(i in item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
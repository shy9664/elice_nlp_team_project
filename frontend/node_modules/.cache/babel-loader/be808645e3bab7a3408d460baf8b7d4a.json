{"ast":null,"code":"import { getPlugin, getParent, isElement, getPluginType, someNode, getAbove, getNodes, isExpanded, getText, findNode, isSelectionAtBlockStart, setNodes, wrapNodes, insertNodes, ELEMENT_DEFAULT, isBlockAboveEmpty, unwrapNodes, createPluginFactory, KEY_DESERIALIZE_HTML } from '@udecode/plate-core';\nimport { languages, tokenize } from 'prismjs';\nimport { Node, Editor, Transforms, Path } from 'slate';\nconst ELEMENT_CODE_BLOCK = 'code_block';\nconst ELEMENT_CODE_LINE = 'code_line'; // `\n// javascript:\n// abap: ABAP\n// arduino: Arduino\n// bash: Bash\n// basic: BASIC\n// c: C\n// clojure: Clojure\n// coffeescript: CoffeeScript\n// cpp: C++\n// csharp: C#\n// css: CSS\n// dart: Dart\n// diff: Diff\n// docker: Docker\n// elixir: Elixir\n// elm: Elm\n// erlang: Erlang\n// flow: Flow\n// fortran: Fortran\n// fsharp: F#\n// gherkin: Gherkin\n// glsl: GLSL\n// go: Go\n// graphql: GraphQL\n// groovy: Groovy\n// haskell\n// less\n// livescript\n// lua\n// makefile\n// match\n// matlab\n// nix\n// objectivec\n// ocaml\n// pascal\n// perl\n// prolog\n// purebasic\n// r\n// reason\n// scss\n// scala\n// scheme\n// sql\n// swift\n// vbnet\n// verilog\n// vhdl\n// visual-basic\n// wasm\n// `;\n\nconst CODE_BLOCK_LANGUAGES_POPULAR = {\n  bash: 'Bash',\n  css: 'CSS',\n  git: 'Git',\n  graphql: 'GraphQL',\n  html: 'HTML',\n  javascript: 'JavaScript',\n  json: 'JSON',\n  jsx: 'JSX',\n  markdown: 'Markdown',\n  sql: 'SQL',\n  svg: 'SVG',\n  tsx: 'TSX',\n  typescript: 'TypeScript',\n  wasm: 'WebAssembly'\n};\nconst CODE_BLOCK_LANGUAGES = {\n  antlr4: 'ANTLR4',\n  bash: 'Bash',\n  c: 'C',\n  csharp: 'C#',\n  css: 'CSS',\n  coffeescript: 'CoffeeScript',\n  cmake: 'CMake',\n  dart: 'Dart',\n  django: 'Django',\n  docker: 'Docker',\n  ejs: 'EJS',\n  erlang: 'Erlang',\n  git: 'Git',\n  go: 'Go',\n  graphql: 'GraphQL',\n  groovy: 'Groovy',\n  html: 'HTML',\n  java: 'Java',\n  javascript: 'JavaScript',\n  json: 'JSON',\n  jsx: 'JSX',\n  kotlin: 'Kotlin',\n  latex: 'LaTeX',\n  less: 'Less',\n  lua: 'Lua',\n  makefile: 'Makefile',\n  markdown: 'Markdown',\n  matlab: 'MATLAB',\n  markup: 'Markup',\n  objectivec: 'Objective-C',\n  perl: 'Perl',\n  php: 'PHP',\n  powershell: 'PowerShell',\n  properties: '.properties',\n  protobuf: 'Protocol Buffers',\n  python: 'Python',\n  r: 'R',\n  ruby: 'Ruby',\n  sass: 'Sass (Sass)',\n  scss: 'Sass (Scss)',\n  // FIXME: Error with current scala grammar\n  // scala: 'Scala',\n  scheme: 'Scheme',\n  sql: 'SQL',\n  shell: 'Shell',\n  swift: 'Swift',\n  svg: 'SVG',\n  tsx: 'TSX',\n  typescript: 'TypeScript',\n  wasm: 'WebAssembly',\n  yaml: 'YAML',\n  xml: 'XML'\n};\nPrism.languages.antlr4 = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'string': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n    greedy: true\n  },\n  'character-class': {\n    pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n    greedy: true,\n    alias: 'regex',\n    inside: {\n      'range': {\n        pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'escape': /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n      'punctuation': /[\\[\\]]/\n    }\n  },\n  'action': {\n    pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n    greedy: true,\n    inside: {\n      'content': {\n        // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n        pattern: /(\\{)[\\s\\S]+(?=\\})/,\n        lookbehind: true\n      },\n      'punctuation': /[{}]/\n    }\n  },\n  'command': {\n    pattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n    lookbehind: true,\n    inside: {\n      'function': /\\b\\w+(?=\\s*(?:[,(]|$))/,\n      'punctuation': /[,()]/\n    }\n  },\n  'annotation': {\n    pattern: /@\\w+(?:::\\w+)*/,\n    alias: 'keyword'\n  },\n  'label': {\n    pattern: /#[ \\t]*\\w+/,\n    alias: 'punctuation'\n  },\n  'keyword': /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n  'definition': [{\n    pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n    alias: ['rule', 'class-name']\n  }, {\n    pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n    alias: ['token', 'constant']\n  }],\n  'constant': /\\b[A-Z][A-Z_]*\\b/,\n  'operator': /\\.\\.|->|[|~]|[*+?]\\??/,\n  'punctuation': /[;:()=]/\n};\nPrism.languages.g4 = Prism.languages.antlr4;\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\nPrism.languages.cmake = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$\\{(?:[^{}$]|\\$\\{[^{}$]*\\})*\\}/,\n        inside: {\n          'punctuation': /\\$\\{|\\}/,\n          'variable': /\\w+/\n        }\n      }\n    }\n  },\n  'variable': /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n  'property': /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n  'keyword': /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n  'boolean': /\\b(?:ON|OFF|TRUE|FALSE)\\b/,\n  'namespace': /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,\n  'operator': /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,\n  'inserted': {\n    pattern: /\\b\\w+::\\w+\\b/,\n    alias: 'class-name'\n  },\n  'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n  'punctuation': /[()>}]|\\$[<{]/\n};\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:module|import)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n\n(function (Prism) {\n  /**\r\n   * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\r\n   *\r\n   * Note: This is a simple text based replacement. Be careful when using backreferences!\r\n   *\r\n   * @param {string} pattern the given pattern.\r\n   * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\r\n   * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\r\n   * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\r\n   */\n  function replace(pattern, replacements) {\n    return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n      return '(?:' + replacements[+index] + ')';\n    });\n  }\n  /**\r\n   * @param {string} pattern\r\n   * @param {string[]} replacements\r\n   * @param {string} [flags]\r\n   * @returns {RegExp}\r\n   */\n\n\n  function re(pattern, replacements, flags) {\n    return RegExp(replace(pattern, replacements), flags || '');\n  }\n  /**\r\n   * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\r\n   *\r\n   * @param {string} pattern\r\n   * @param {number} depthLog2\r\n   * @returns {string}\r\n   */\n\n\n  function nested(pattern, depthLog2) {\n    for (var i = 0; i < depthLog2; i++) {\n      pattern = pattern.replace(/<<self>>/g, function () {\n        return '(?:' + pattern + ')';\n      });\n    }\n\n    return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]');\n  } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n\n\n  var keywordKinds = {\n    // keywords which represent a return or variable type\n    type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n    // keywords which are used to declare a type\n    typeDeclaration: 'class enum interface record struct',\n    // contextual keywords\n    // (\"var\" and \"dynamic\" are missing because they are used like types)\n    contextual: 'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n    // all other keywords\n    other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n  }; // keywords\n\n  function keywordsToPattern(words) {\n    return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b';\n  }\n\n  var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n  var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));\n  var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);\n  var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other); // types\n\n  var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n\n  var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n  var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n  var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);\n  var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);\n  var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n  var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);\n  var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);\n  var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);\n  var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [tuple, identifier, array]);\n  var typeInside = {\n    'keyword': keywords,\n    'punctuation': /[<>()?,.:[\\]]/\n  }; // strings & characters\n  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n\n  var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n\n  var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n  var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    'string': [{\n      pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: RegExp(character),\n      greedy: true,\n      alias: 'character'\n    }],\n    'class-name': [{\n      // Using static\n      // using static System.Math;\n      pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // Using alias (type)\n      // using Project = PC.MyCompany.Project;\n      pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // Using alias (alias)\n      // using Project = PC.MyCompany.Project;\n      pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n      lookbehind: true\n    }, {\n      // Type declarations\n      // class Foo<A, B>\n      // interface Foo<out A, B>\n      pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // Single catch exception declaration\n      // catch(Foo)\n      // (things like catch(Foo e) is covered by variable declaration)\n      pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // Name of the type parameter of generic constraints\n      // where Foo : class\n      pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n      lookbehind: true\n    }, {\n      // Casts and checks via as and is.\n      // as Foo<A>, is Bar<B>\n      // (things like if(a is Foo b) is covered by variable declaration)\n      pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),\n      lookbehind: true,\n      inside: typeInside\n    }, {\n      // Variable, field and parameter declaration\n      // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n      pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [typeExpression, nonContextualKeywords, name]),\n      inside: typeInside\n    }],\n    'keyword': keywords,\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n    'number': /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n    'operator': />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n    'punctuation': /\\?\\.?|::|[{}[\\];(),.:]/\n  });\n  Prism.languages.insertBefore('csharp', 'number', {\n    'range': {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('csharp', 'punctuation', {\n    'named-parameter': {\n      pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'namespace': {\n      // namespace Foo.Bar {}\n      // using Foo.Bar;\n      pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'type-expression': {\n      // default(Foo), typeof(Foo<Bar>), sizeof(int)\n      pattern: re(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [nestedRound]),\n      lookbehind: true,\n      alias: 'class-name',\n      inside: typeInside\n    },\n    'return-type': {\n      // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n      // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n      // int Foo => 0; int Foo { get; set } = 0;\n      pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [typeExpression, identifier]),\n      inside: typeInside,\n      alias: 'class-name'\n    },\n    'constructor-invocation': {\n      // new List<Foo<Bar[]>> { }\n      pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n      lookbehind: true,\n      inside: typeInside,\n      alias: 'class-name'\n    },\n\n    /*'explicit-implementation': {\r\n    \t// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\r\n    \tpattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\r\n    \tinside: classNameInside,\r\n    \talias: 'class-name'\r\n    },*/\n    'generic-method': {\n      // foo<Bar>()\n      pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n      inside: {\n        'function': re(/^<<0>>/.source, [name]),\n        'generic': {\n          pattern: RegExp(generic),\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    },\n    'type-list': {\n      // The list of types inherited or of generic constraints\n      // class Foo<F> : Bar, IList<FooBar>\n      // where F : Bar, IList<int>\n      pattern: re(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\\bnew\\s*\\(\\s*\\)/.source]),\n      lookbehind: true,\n      inside: {\n        'record-arguments': {\n          pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [genericName, nestedRound]),\n          lookbehind: true,\n          greedy: true,\n          inside: Prism.languages.csharp\n        },\n        'keyword': keywords,\n        'class-name': {\n          pattern: RegExp(typeExpression),\n          greedy: true,\n          inside: typeInside\n        },\n        'punctuation': /[,()]/\n      }\n    },\n    'preprocessor': {\n      pattern: /(^[\\t ]*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        'directive': {\n          pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  }); // attributes\n\n  var regularStringOrCharacter = regularString + '|' + character;\n  var regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [regularStringOrCharacter]);\n  var roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2); // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n\n  var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n  var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'attribute': {\n      // Attributes\n      // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n      pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [attrTarget, attr]),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'target': {\n          pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n          alias: 'keyword'\n        },\n        'attribute-arguments': {\n          pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n          inside: Prism.languages.csharp\n        },\n        'class-name': {\n          pattern: RegExp(identifier),\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'punctuation': /[:,]/\n      }\n    }\n  }); // string interpolation\n\n  var formatString = /:[^}\\r\\n]+/.source; // multi line\n\n  var mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2);\n  var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]); // single line\n\n  var sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [regularStringOrCharacter]), 2);\n  var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);\n\n  function createInterpolationInside(interpolation, interpolationRound) {\n    return {\n      'interpolation': {\n        pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n        lookbehind: true,\n        inside: {\n          'format-string': {\n            pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [interpolationRound, formatString]),\n            lookbehind: true,\n            inside: {\n              'punctuation': /^:/\n            }\n          },\n          'punctuation': /^\\{|\\}$/,\n          'expression': {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-csharp',\n            inside: Prism.languages.csharp\n          }\n        }\n      },\n      'string': /[\\s\\S]+/\n    };\n  }\n\n  Prism.languages.insertBefore('csharp', 'string', {\n    'interpolation-string': [{\n      pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),\n      lookbehind: true,\n      greedy: true,\n      inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n    }, {\n      pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),\n      lookbehind: true,\n      greedy: true,\n      inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n    }]\n  });\n})(Prism);\n\nPrism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(Prism);\n\n(function (Prism) {\n  var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n  var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n  var className = {\n    pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n    lookbehind: true,\n    inside: {\n      'namespace': {\n        pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n        inside: {\n          'punctuation': /\\./\n        }\n      }\n    }\n  };\n  Prism.languages.dart = Prism.languages.extend('clike', {\n    'string': [{\n      pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true\n    }, {\n      pattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    'class-name': [className, {\n      // variables and parameters\n      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n      pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n      lookbehind: true,\n      inside: className.inside\n    }],\n    'keyword': keywords,\n    'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n  });\n  Prism.languages.insertBefore('dart', 'function', {\n    'metadata': {\n      pattern: /@\\w+/,\n      alias: 'symbol'\n    }\n  });\n  Prism.languages.insertBefore('dart', 'class-name', {\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism); // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n\n\n(function (Prism) {\n  Prism.languages.django = {\n    'comment': /^\\{#[\\s\\S]*?#\\}$/,\n    'tag': {\n      pattern: /(^\\{%[+-]?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'delimiter': {\n      pattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n      alias: 'punctuation'\n    },\n    'string': {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'filter': {\n      pattern: /(\\|)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'test': {\n      pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'function': /\\b[a-z_]\\w+(?=\\s*\\()/i,\n    'keyword': /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n    'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n    'boolean': /[Tt]rue|[Ff]alse|[Nn]one/,\n    'variable': /\\b\\w+?\\b/,\n    'punctuation': /[{}[\\](),.:;]/\n  };\n  var pattern = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g;\n  var markupTemplating = Prism.languages['markup-templating'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    markupTemplating.buildPlaceholders(env, 'django', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    markupTemplating.tokenizePlaceholders(env, 'django');\n  }); // Add an Jinja2 alias\n\n  Prism.languages.jinja2 = Prism.languages.django;\n  Prism.hooks.add('before-tokenize', function (env) {\n    markupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    markupTemplating.tokenizePlaceholders(env, 'jinja2');\n  });\n})(Prism);\n\n(function (Prism) {\n  // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n  // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n  var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n  var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n    return spaceAfterBackSlash;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n  var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n    return string;\n  });\n  var stringRule = {\n    pattern: RegExp(string),\n    greedy: true\n  };\n  var commentRule = {\n    pattern: /(^[ \\t]*)#.*/m,\n    lookbehind: true,\n    greedy: true\n  };\n  /**\r\n   * @param {string} source\r\n   * @param {string} flags\r\n   * @returns {RegExp}\r\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<OPT>/g, function () {\n      return option;\n    }).replace(/<SP>/g, function () {\n      return space;\n    });\n    return RegExp(source, flags);\n  }\n\n  Prism.languages.docker = {\n    'instruction': {\n      pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'options': {\n          pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            'property': {\n              pattern: /(^|\\s)--[\\w-]+/,\n              lookbehind: true\n            },\n            'string': [stringRule, {\n              pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n              lookbehind: true\n            }],\n            'operator': /\\\\$/m,\n            'punctuation': /=/\n          }\n        },\n        'keyword': [{\n          // https://docs.docker.com/engine/reference/builder/#healthcheck\n          pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#from\n          pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          // https://docs.docker.com/engine/reference/builder/#onbuild\n          pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n          lookbehind: true,\n          greedy: true\n        }, {\n          pattern: /^\\w+/,\n          greedy: true\n        }],\n        'comment': commentRule,\n        'string': stringRule,\n        'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n        'operator': /\\\\$/m\n      }\n    },\n    'comment': commentRule\n  };\n  Prism.languages.dockerfile = Prism.languages.docker;\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.ejs = {\n    'delimiter': {\n      pattern: /^<%[-_=]?|[-_]?%>$/,\n      alias: 'punctuation'\n    },\n    'comment': /^#[\\s\\S]*/,\n    'language-javascript': {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages.javascript\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');\n  });\n  Prism.languages.eta = Prism.languages.ejs;\n})(Prism);\n\nPrism.languages.erlang = {\n  'comment': /%.+/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'quoted-function': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n    alias: 'function'\n  },\n  'quoted-atom': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n    alias: 'atom'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n  'number': [/\\$\\\\?./, /\\b\\d+#[a-z0-9]+/i, /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n  'function': /\\b[a-z][\\w@]*(?=\\()/,\n  'variable': {\n    // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n    pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n    lookbehind: true\n  },\n  'operator': [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/, {\n    // We don't want to match <<\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'atom': /\\b[a-z][\\w@]*/,\n  'punctuation': /[()[\\]{}:;,.#|]|<<|>>/\n};\nPrism.languages.git = {\n  /*\r\n   * A simple one line comment like in a git status command\r\n   * For instance:\r\n   * $ git status\r\n   * # On branch infinite-scroll\r\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\r\n   * # and have 1 and 2 different commits each, respectively.\r\n   * nothing to commit (working directory clean)\r\n   */\n  'comment': /^#.*/m,\n\n  /*\r\n   * Regexp to match the changed lines in a git diff output. Check the example below.\r\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\r\n   * a string (double and simple quote)\r\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\r\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\r\n   * For instance:\r\n   * $ git add file.txt\r\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\r\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\r\n       * For instance:\r\n       * $ git diff --cached\r\n       * $ git log -p\r\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\r\n   * Coordinates displayed in a git diff command\r\n   * For instance:\r\n   * $ git diff\r\n   * diff --git file.txt file.txt\r\n   * index 6214953..1d54a52 100644\r\n   * --- file.txt\r\n   * +++ file.txt\r\n   * @@ -1 +1,2 @@\r\n   * -Here's my tetx file\r\n   * +Here's my text file\r\n   * +And this is the second line\r\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\r\n   * Match a \"commit [SHA1]\" line in a git log output.\r\n   * For instance:\r\n   * $ git log\r\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\r\n   * Author: lgiraudel\r\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\r\n   *\r\n   *     Add of a new line\r\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /[A-Z]\\w*Input(?=!?.*$)/m,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nPrism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\r\n   * get the graphql token stream that we want to customize\r\n   *\r\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n   * @type {Token[]}\r\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\r\n   * Returns whether the token relative to the current index has the given type.\r\n   *\r\n   * @param {number} offset\r\n   * @returns {Token | undefined}\r\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\r\n   * Returns whether the token relative to the current index has the given type.\r\n   *\r\n   * @param {readonly string[]} types\r\n   * @param {number} [offset=0]\r\n   * @returns {boolean}\r\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Returns the index of the closing bracket to an opening bracket.\r\n   *\r\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\r\n   *\r\n   * If no closing bracket could be found, `-1` will be returned.\r\n   *\r\n   * @param {RegExp} open\r\n   * @param {RegExp} close\r\n   * @returns {number}\r\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\r\n   * Adds an alias to the given token.\r\n   *\r\n   * @param {Token} token\r\n   * @param {string} alias\r\n   * @returns {void}\r\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\nPrism.languages.groovy = Prism.languages.extend('clike', {\n  'string': [{\n    // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n    pattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n    greedy: true\n  }, {\n    // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n    // simple division (see JS regex), so find a fix maybe?\n    pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }],\n  'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n  'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n  'operator': {\n    pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n    lookbehind: true\n  },\n  'punctuation': /\\.+|[{}[\\];(),:$]/\n});\nPrism.languages.insertBefore('groovy', 'string', {\n  'shebang': {\n    pattern: /#!.+/,\n    alias: 'comment'\n  }\n});\nPrism.languages.insertBefore('groovy', 'punctuation', {\n  'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\nPrism.languages.insertBefore('groovy', 'function', {\n  'annotation': {\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: true,\n    alias: 'punctuation'\n  }\n}); // Handle string interpolation\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.language === 'groovy' && env.type === 'string') {\n    var delimiter = env.content[0];\n\n    if (delimiter != \"'\") {\n      var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\n      if (delimiter === '$') {\n        pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n      } // To prevent double HTML-encoding we have to decode env.content first\n\n\n      env.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(env.content, {\n        'expression': {\n          pattern: pattern,\n          lookbehind: true,\n          inside: Prism.languages.groovy\n        }\n      });\n      env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n    }\n  }\n});\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n\n  var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n\n  var className = {\n    pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n    lookbehind: true,\n    inside: {\n      'namespace': {\n        pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n        inside: {\n          'punctuation': /\\./\n        }\n      },\n      'punctuation': /\\./\n    }\n  };\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, {\n      // variables and parameters\n      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n      pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n      lookbehind: true,\n      inside: className.inside\n    }],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(::\\s*)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'string', {\n    'triple-quoted-string': {\n      // http://openjdk.java.net/jeps/355#Description\n      pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    },\n    'namespace': {\n      pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n        return keywords.source;\n      })),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n})(Prism);\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript; // https://www.json.org/json-en.html\n\nPrism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\r\n   * @param {string} source\r\n   * @param {string} [flags]\r\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.kotlin = Prism.languages.extend('clike', {\n    'keyword': {\n      // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n      pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n      lookbehind: true\n    },\n    'function': [{\n      pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n      greedy: true\n    }, {\n      pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n    'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n  });\n  delete Prism.languages.kotlin['class-name'];\n  Prism.languages.insertBefore('kotlin', 'string', {\n    'raw-string': {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      alias: 'string' // See interpolation below\n\n    }\n  });\n  Prism.languages.insertBefore('kotlin', 'keyword', {\n    'annotation': {\n      pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n      alias: 'builtin'\n    }\n  });\n  Prism.languages.insertBefore('kotlin', 'function', {\n    'label': {\n      pattern: /\\b\\w+@|@\\w+\\b/,\n      alias: 'symbol'\n    }\n  });\n  var interpolation = [{\n    pattern: /\\$\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^\\$\\{|\\}$/,\n        alias: 'variable'\n      },\n      rest: Prism.languages.kotlin\n    }\n  }, {\n    pattern: /\\$\\w+/,\n    alias: 'variable'\n  }];\n  Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n    interpolation: interpolation\n  };\n  Prism.languages.kt = Prism.languages.kotlin;\n  Prism.languages.kts = Prism.languages.kotlin;\n})(Prism);\n\n(function (Prism) {\n  var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i;\n  var insideEqu = {\n    'equation-command': {\n      pattern: funcPattern,\n      alias: 'regex'\n    }\n  };\n  Prism.languages.latex = {\n    'comment': /%.*/m,\n    // the verbatim environment prints whitespace to the document\n    'cdata': {\n      pattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true\n    },\n\n    /*\r\n     * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]\r\n     * (all are multiline)\r\n     */\n    'equation': [{\n      pattern: /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n      inside: insideEqu,\n      alias: 'string'\n    }, {\n      pattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true,\n      inside: insideEqu,\n      alias: 'string'\n    }],\n\n    /*\r\n     * arguments which are keywords or references are highlighted\r\n     * as keywords\r\n     */\n    'keyword': {\n      pattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n\n    /*\r\n     * section or chapter headlines are highlighted as bold so that\r\n     * they stand out more\r\n     */\n    'headline': {\n      pattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function': {\n      pattern: funcPattern,\n      alias: 'selector'\n    },\n    'punctuation': /[[\\]{}&]/\n  };\n  Prism.languages.tex = Prism.languages.latex;\n  Prism.languages.context = Prism.languages.latex;\n})(Prism);\n/* FIXME :\r\n :extend() is not handled specifically : its highlighting is buggy.\r\n Mixin usage must be inside a ruleset to be highlighted.\r\n At-rules (e.g. import) containing interpolations are buggy.\r\n Detached rulesets are highlighted as at-rules.\r\n A comment before a mixin usage prevents the latter to be properly highlighted.\r\n */\n\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\nPrism.languages.lua = {\n  'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n  // \\z may be used to skip the following space\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n    greedy: true\n  },\n  'number': /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n  'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n  'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n  'operator': [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n    // Match \"..\" but don't break \"...\"\n    pattern: /(^|[^.])\\.\\.(?!\\.)/,\n    lookbehind: true\n  }],\n  'punctuation': /[\\[\\](){},;]|\\.+|:+/\n};\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\r\n   * This function is intended for the creation of the bold or italic pattern.\r\n   *\r\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n   *\r\n   * _Note:_ Keep in mind that this adds a capturing group.\r\n   *\r\n   * @param {string} pattern\r\n   * @returns {RegExp}\r\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\r\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\r\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\r\n         *\r\n         * token.content = [\r\n         *     <span class=\"punctuation\">```</span>,\r\n         *     <span class=\"code-language\">xxxx</span>,\r\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\r\n         *     <span class=\"code-block\">...</span>,\r\n         *     '\\n', // exactly one new lines again\r\n         *     <span class=\"punctuation\">```</span>\r\n         * ];\r\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\r\n   * A list of known entity names.\r\n   *\r\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\r\n   *\r\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\r\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\r\n   * Returns the text content of a given HTML source code string.\r\n   *\r\n   * @param {string} html\r\n   * @returns {string}\r\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n\nPrism.languages.matlab = {\n  'comment': [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n  'string': {\n    pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n    greedy: true\n  },\n  // FIXME We could handle imaginary numbers as a whole\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n  'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n  'function': /\\b(?!\\d)\\w+(?=\\s*\\()/,\n  'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n  'punctuation': /\\.{3}|[.,;\\[\\](){}!]/\n};\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\nPrism.languages.perl = {\n  'comment': [{\n    // POD\n    pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\$])#.*/,\n    lookbehind: true\n  }],\n  // TODO Could be nice to handle Heredoc too.\n  'string': [// q/.../\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // q a...a\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // q(...)\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true\n  }, // q{...}\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\n    greedy: true\n  }, // q[...]\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true\n  }, // q<...>\n  {\n    pattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true\n  }, // \"...\", `...`\n  {\n    pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true\n  }, // '...'\n  // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n  {\n    pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n    greedy: true\n  }],\n  'regex': [// m/.../\n  {\n    pattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: true\n  }, // m a...a\n  {\n    pattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n    greedy: true\n  }, // m(...)\n  {\n    pattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\n    greedy: true\n  }, // m{...}\n  {\n    pattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\n    greedy: true\n  }, // m[...]\n  {\n    pattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\n    greedy: true\n  }, // m<...>\n  {\n    pattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\n    greedy: true\n  }, // The lookbehinds prevent -s from breaking\n  // FIXME We don't handle change of separator like s(...)[...]\n  // s/.../.../\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s a...a...a\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s(...)(...)\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s{...}{...}\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s[...][...]\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // s<...><...>\n  {\n    pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\n    lookbehind: true,\n    greedy: true\n  }, // /.../\n  // The look-ahead tries to prevent two divisions on\n  // the same line from being highlighted as regex.\n  // This does not support multi-line regex.\n  {\n    pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\n    greedy: true\n  }],\n  // FIXME Not sure about the handling of ::, ', and #\n  'variable': [// ${^POSTMATCH}\n  /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n  /[&*$@%]\\^[A-Z_]/, // ${...}\n  /[&*$@%]#?(?=\\{)/, // $foo\n  /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/i, // $1\n  /[&*$@%]\\d+/, // $_, @_, %!\n  // The negative lookahead prevents from breaking the %= operator\n  /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n  'filehandle': {\n    // <>, <FOO>, _\n    pattern: /<(?![<=])\\S*>|\\b_\\b/,\n    alias: 'symbol'\n  },\n  'vstring': {\n    // v1.2, 1.2.3\n    pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n    alias: 'string'\n  },\n  'function': {\n    pattern: /sub \\w+/i,\n    inside: {\n      keyword: /sub/\n    }\n  },\n  'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n  'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\n  'punctuation': /[{}[\\];(),:]/\n};\n/**\r\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\r\n * Modified by Miles Johnson: http://milesj.me\r\n * Rewritten by Tom Pavelec\r\n *\r\n * Supports PHP 5.3 - 8.0\r\n */\n\n(function (Prism) {\n  var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n  var constant = [{\n    pattern: /\\b(?:false|true)\\b/i,\n    alias: 'boolean'\n  }, {\n    pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n    greedy: true,\n    lookbehind: true\n  }, {\n    pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n    greedy: true,\n    lookbehind: true\n  }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n  var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n  var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n  var punctuation = /[{}\\[\\](),:;]/;\n  Prism.languages.php = {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    },\n    'comment': comment,\n    'variable': /\\$+(?:\\w+\\b|(?=\\{))/i,\n    'package': {\n      pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    },\n    'class-name-definition': {\n      pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function-definition': {\n      pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'keyword': [{\n      pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n      alias: 'type-casting',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n      alias: 'type-hint',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n      alias: 'type-hint',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n      alias: 'return-type',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,\n      alias: 'return-type',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n      alias: 'type-declaration',\n      greedy: true\n    }, {\n      pattern: /(\\|\\s*)(?:null|false)\\b/i,\n      alias: 'type-declaration',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n      alias: 'static-context',\n      greedy: true\n    }, {\n      // yield from\n      pattern: /(\\byield\\s+)from\\b/i,\n      lookbehind: true\n    }, // `class` is always a keyword unlike other keywords\n    /\\bclass\\b/i, {\n      // https://www.php.net/manual/en/reserved.keywords.php\n      //\n      // keywords cannot be preceded by \"->\"\n      // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n      pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      lookbehind: true\n    }],\n    'argument-name': {\n      pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      lookbehind: true\n    },\n    'class-name': [{\n      pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n      greedy: true\n    }, {\n      pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      alias: 'class-name-fully-qualified',\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n      alias: 'type-declaration',\n      greedy: true\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n      alias: ['class-name-fully-qualified', 'type-declaration'],\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n      alias: 'static-context',\n      greedy: true\n    }, {\n      pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n      alias: ['class-name-fully-qualified', 'static-context'],\n      greedy: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n      alias: 'type-hint',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n      alias: ['class-name-fully-qualified', 'type-hint'],\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n      alias: 'return-type',\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n      alias: ['class-name-fully-qualified', 'return-type'],\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    }],\n    'constant': constant,\n    'function': {\n      pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\\\/\n      }\n    },\n    'property': {\n      pattern: /(->\\s*)\\w+/,\n      lookbehind: true\n    },\n    'number': number,\n    'operator': operator,\n    'punctuation': punctuation\n  };\n  var string_interpolation = {\n    pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n    lookbehind: true,\n    inside: Prism.languages.php\n  };\n  var string = [{\n    pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n    alias: 'nowdoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<<'?|[';]$/\n        }\n      }\n    }\n  }, {\n    pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n    alias: 'heredoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<<\"?|[\";]$/\n        }\n      },\n      'interpolation': string_interpolation\n    }\n  }, {\n    pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n    alias: 'backtick-quoted-string',\n    greedy: true\n  }, {\n    pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n    alias: 'single-quoted-string',\n    greedy: true\n  }, {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n    alias: 'double-quoted-string',\n    greedy: true,\n    inside: {\n      'interpolation': string_interpolation\n    }\n  }];\n  Prism.languages.insertBefore('php', 'variable', {\n    'string': string,\n    'attribute': {\n      pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n      greedy: true,\n      inside: {\n        'attribute-content': {\n          pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n          lookbehind: true,\n          // inside can appear subset of php\n          inside: {\n            'comment': comment,\n            'string': string,\n            'attribute-class-name': [{\n              pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n              alias: 'class-name',\n              greedy: true,\n              lookbehind: true\n            }, {\n              pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n              alias: ['class-name', 'class-name-fully-qualified'],\n              greedy: true,\n              lookbehind: true,\n              inside: {\n                'punctuation': /\\\\/\n              }\n            }],\n            'constant': constant,\n            'number': number,\n            'operator': operator,\n            'punctuation': punctuation\n          }\n        },\n        'delimiter': {\n          pattern: /^#\\[|\\]$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n  });\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n\n(function (Prism) {\n  var powershell = Prism.languages.powershell = {\n    'comment': [{\n      pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^`])#.*/,\n      lookbehind: true\n    }],\n    'string': [{\n      pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n      greedy: true,\n      inside: {\n        'function': {\n          // Allow for one level of nesting\n          pattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n          lookbehind: true,\n          // Populated at end of file\n          inside: {}\n        }\n      }\n    }, {\n      pattern: /'(?:[^']|'')*'/,\n      greedy: true\n    }],\n    // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n    // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n    'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n    'boolean': /\\$(?:true|false)\\b/i,\n    'variable': /\\$\\w+\\b/,\n    // Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n    // Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n    'function': [/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i, /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],\n    // per http://technet.microsoft.com/en-us/library/hh847744.aspx\n    'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n    'operator': {\n      pattern: /(\\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n      lookbehind: true\n    },\n    'punctuation': /[|{}[\\];(),.]/\n  }; // Variable interpolation inside strings, and nested expressions\n\n  var stringInside = powershell.string[0].inside;\n  stringInside.boolean = powershell.boolean;\n  stringInside.variable = powershell.variable;\n  stringInside.function.inside = powershell;\n})(Prism);\n\nPrism.languages.properties = {\n  'comment': /^[ \\t]*[#!].*$/m,\n  'attr-value': {\n    pattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n    lookbehind: true\n  },\n  'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?= *[=:]| )/m,\n  'punctuation': /[=:]/\n};\n\n(function (Prism) {\n  var builtinTypes = /\\b(?:double|float|[su]?int(?:32|64)|s?fixed(?:32|64)|bool|string|bytes)\\b/;\n  Prism.languages.protobuf = Prism.languages.extend('clike', {\n    'class-name': [{\n      pattern: /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,\n      lookbehind: true\n    }],\n    'keyword': /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,\n    'function': /\\b[a-z_]\\w*(?=\\s*\\()/i\n  });\n  Prism.languages.insertBefore('protobuf', 'operator', {\n    'map': {\n      pattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n      alias: 'class-name',\n      inside: {\n        'punctuation': /[<>.,]/,\n        'builtin': builtinTypes\n      }\n    },\n    'builtin': builtinTypes,\n    'positional-class-name': {\n      pattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n      alias: 'class-name',\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'annotation': {\n      pattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,\n      lookbehind: true\n    }\n  });\n})(Prism);\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\nPrism.languages.r = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'percent-operator': {\n    // Includes user-defined operators\n    // and %%, %*%, %/%, %in%, %o%, %x%\n    pattern: /%[^%\\s]*%/,\n    alias: 'operator'\n  },\n  'boolean': /\\b(?:TRUE|FALSE)\\b/,\n  'ellipsis': /\\.\\.(?:\\.|\\d+)/,\n  'number': [/\\b(?:NaN|Inf)\\b/, /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],\n  'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n  'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n  'punctuation': /[(){}\\[\\],;]/\n};\n/**\r\n * Original by Samuel Flores\r\n *\r\n * Adds the following new token classes:\r\n *     constant, builtin, variable, symbol, regex\r\n */\n\n(function (Prism) {\n  Prism.languages.ruby = Prism.languages.extend('clike', {\n    'comment': [/#.*/, {\n      pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n      greedy: true\n    }],\n    'class-name': {\n      pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.\\\\]/\n      }\n    },\n    'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n  });\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^#\\{|\\}$/,\n        alias: 'tag'\n      },\n      rest: Prism.languages.ruby\n    }\n  };\n  delete Prism.languages.ruby.function;\n  Prism.languages.insertBefore('ruby', 'keyword', {\n    'regex': [{\n      pattern: RegExp(/%r/.source + '(?:' + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n      /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join('|') + ')' + /[egimnosux]{0,6}/.source),\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    'symbol': {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: true\n    },\n    'method-definition': {\n      pattern: /(\\bdef\\s+)[\\w.]+/,\n      lookbehind: true,\n      inside: {\n        'function': /\\w+$/,\n        rest: Prism.languages.ruby\n      }\n    }\n  });\n  Prism.languages.insertBefore('ruby', 'number', {\n    'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  });\n  Prism.languages.ruby.string = [{\n    pattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n    /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join('|') + ')'),\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n    alias: 'heredoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<[-~]?/\n        }\n      },\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n    alias: 'heredoc-string',\n    greedy: true,\n    inside: {\n      'delimiter': {\n        pattern: /^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,\n        alias: 'symbol',\n        inside: {\n          'punctuation': /^<<[-~]?'|'$/\n        }\n      }\n    }\n  }];\n  Prism.languages.rb = Prism.languages.ruby;\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.scheme = {\n    // this supports \"normal\" single-line comments:\n    //   ; comment\n    // and (potentially nested) multiline comments:\n    //   #| comment #| nested |# still comment |#\n    // (only 1 level of nesting is supported)\n    'comment': /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n    'string': {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    'symbol': {\n      pattern: /'[^()\\[\\]#'\\s]+/,\n      greedy: true\n    },\n    'character': {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n    {\n      pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n      lookbehind: true\n    }, {\n      pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n      lookbehind: true\n    }],\n    'keyword': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'builtin': {\n      // all functions of the base library of R7RS plus some of built-ins of R5Rs\n      pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'operator': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'number': {\n      // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n      //\n      // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n      // <num R>       := <prefix R><complex R>\n      // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n      // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n      // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n      // <ureal R>     := <uint R>(?:\\/<uint R>)?\n      //                | <decimal R>\n      //\n      // <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n      // <uint R>      := <digit R>+\n      // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n      // <radix 2>     := #b\n      // <radix 8>     := #o\n      // <radix 10>    := (?:#d)?\n      // <radix 16>    := #x\n      // <digit 2>     := [01]\n      // <digit 8>     := [0-7]\n      // <digit 10>    := \\d\n      // <digit 16>    := [0-9a-f]\n      //\n      // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n      // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n      // pattern:\n      pattern: RegExp(SortedBNF({\n        '<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,\n        '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n        '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n        '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n        '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n        '<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n        '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n        '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n        '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n        '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n        '<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source\n      }), 'i'),\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'function': {\n      pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true\n    },\n    'identifier': {\n      pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'punctuation': /[()\\[\\]']/\n  };\n  /**\r\n   * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\r\n   *\r\n   * @param {Record<string, string>} grammar\r\n   * @returns {string}\r\n   */\n\n  function SortedBNF(grammar) {\n    for (var key in grammar) {\n      grammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n        return '(?:' + grammar[key].trim() + ')';\n      });\n    } // return the last item\n\n\n    return grammar[key];\n  }\n})(Prism);\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\nPrism.languages.swift = {\n  'comment': {\n    // Nested comments are supported up to 2 levels\n    pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n  {\n    pattern: RegExp(/(^|[^\"#])/.source + '(?:' // single-line string\n    + /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' // multi-line string\n    + /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'interpolation-punctuation': {\n        pattern: /^\\)|\\\\\\($/,\n        alias: 'punctuation'\n      },\n      'punctuation': /\\\\(?=[\\r\\n])/,\n      'string': /[\\s\\S]+/\n    }\n  }, {\n    pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' // single-line string\n    + /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' // multi-line string\n    + /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'interpolation-punctuation': {\n        pattern: /^\\)|\\\\#+\\($/,\n        alias: 'punctuation'\n      },\n      'string': /[\\s\\S]+/\n    }\n  }],\n  'directive': {\n    // directives with conditions\n    pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' // This regex is a little complex. It's equivalent to this:\n    //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n    // where <round> is a general parentheses expression.\n    + /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n    alias: 'property',\n    inside: {\n      'directive-name': /^#\\w+/,\n      'boolean': /\\b(?:true|false)\\b/,\n      'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n      'operator': /!|&&|\\|\\||[<>]=?/,\n      'punctuation': /[(),]/\n    }\n  },\n  'literal': {\n    pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n    alias: 'constant'\n  },\n  'other-directive': {\n    pattern: /#\\w+\\b/,\n    alias: 'property'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'atrule'\n  },\n  'function-definition': {\n    pattern: /(\\bfunc\\s+)\\w+/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'label': {\n    // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n    pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'nil': {\n    pattern: /\\bnil\\b/,\n    alias: 'constant'\n  },\n  'short-argument': /\\$\\d+\\b/,\n  'omit': {\n    pattern: /\\b_\\b/,\n    alias: 'keyword'\n  },\n  'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n  'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n  // This regex only supports ASCII operators.\n  'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n  'punctuation': /[{}[\\]();,.:\\\\]/\n};\nPrism.languages.swift['string-literal'].forEach(function (rule) {\n  rule.inside['interpolation'].inside = Prism.languages.swift;\n});\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\r\n   *\r\n   * @param {string} value\r\n   * @param {string} [flags]\r\n   * @returns {RegExp}\r\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n/* eslint-disable @typescript-eslint/no-unused-vars,simple-import-sort/imports */\n\n\nconst decorateCodeLine = (editor, {\n  type\n}) => {\n  const code_block = getPlugin(editor, ELEMENT_CODE_BLOCK);\n  return entry => {\n    const ranges = [];\n    const [node, path] = entry;\n    const codeBlock = getParent(editor, path);\n    if (!codeBlock) return;\n    let langName = '';\n\n    if ((codeBlock === null || codeBlock === void 0 ? void 0 : codeBlock[0].type) === code_block.type) {\n      const [codeBlockNode] = codeBlock;\n      langName = codeBlockNode === null || codeBlockNode === void 0 ? void 0 : codeBlockNode.lang;\n    }\n\n    if (!code_block.options.syntax || langName === 'plain') {\n      langName = '';\n    }\n\n    const lang = languages[langName];\n\n    if (!lang) {\n      return ranges;\n    }\n\n    if (isElement(node) && node.type === type) {\n      const text = Node.string(node);\n      const tokens = tokenize(text, lang);\n      let offset = 0;\n\n      for (const element of tokens) {\n        if (typeof element === 'string') {\n          offset += element.length;\n        } else {\n          const token = element;\n          ranges.push({\n            anchor: {\n              path,\n              offset\n            },\n            focus: {\n              path,\n              offset: offset + token.length\n            },\n            className: `prism-token token ${token.type} `,\n            [token.type]: true,\n            prism: true\n          });\n          offset += token.length;\n        }\n      }\n    }\n\n    return ranges;\n  };\n};\n\nconst deserializeHtmlCodeBlock = {\n  getNode: el => {\n    var _el$textContent, _lines;\n\n    let lines = (_el$textContent = el.textContent) === null || _el$textContent === void 0 ? void 0 : _el$textContent.split('\\n');\n\n    if (!((_lines = lines) !== null && _lines !== void 0 && _lines.length)) {\n      var _el$textContent2;\n\n      lines = [(_el$textContent2 = el.textContent) !== null && _el$textContent2 !== void 0 ? _el$textContent2 : ''];\n    }\n\n    const codeLines = lines.map(line => ({\n      type: ELEMENT_CODE_LINE,\n      children: [{\n        text: line\n      }]\n    }));\n    return {\n      type: ELEMENT_CODE_BLOCK,\n      children: codeLines\n    };\n  }\n};\n\nconst getCodeLineType = editor => getPluginType(editor, ELEMENT_CODE_LINE);\n/**\r\n * If at (default = selection) is in ul>li>p, return li and ul node entries.\r\n */\n\n\nconst getCodeLineEntry = (editor, {\n  at = editor.selection\n} = {}) => {\n  if (at && someNode(editor, {\n    at,\n    match: {\n      type: getCodeLineType(editor)\n    }\n  })) {\n    const selectionParent = getParent(editor, at);\n    if (!selectionParent) return;\n    const [, parentPath] = selectionParent;\n    const codeLine = getAbove(editor, {\n      at,\n      match: {\n        type: getCodeLineType(editor)\n      }\n    }) || getParent(editor, parentPath);\n    if (!codeLine) return;\n    const [codeLineNode, codeLinePath] = codeLine;\n    if (isElement(codeLineNode) && codeLineNode.type !== getCodeLineType(editor)) return;\n    const codeBlock = getParent(editor, codeLinePath);\n    if (!codeBlock) return;\n    return {\n      codeBlock,\n      codeLine\n    };\n  }\n};\n/**\r\n * Get code line entries\r\n */\n\n\nconst getCodeLines = (editor, {\n  at = editor.selection\n} = {}) => {\n  if (!at) return;\n  return [...getNodes(editor, {\n    at,\n    match: {\n      type: getCodeLineType(editor)\n    }\n  })];\n};\n/**\r\n * Indent if:\r\n * - the selection is expanded\r\n * - the selected code line has no whitespace character\r\n * Indentation = 2 spaces.\r\n */\n\n\nconst indentCodeLine = (editor, {\n  codeLine\n}) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n\n  if (!isExpanded(editor.selection)) {\n    var _editor$selection;\n\n    const cursor = (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.anchor;\n    const range = Editor.range(editor, codeLineStart, cursor);\n    const text = Editor.string(editor, range);\n\n    if (/\\S/.test(text)) {\n      Transforms.insertText(editor, '  ', {\n        at: editor.selection\n      });\n      return;\n    }\n  }\n\n  Transforms.insertText(editor, '  ', {\n    at: codeLineStart\n  });\n};\n/**\r\n * If there is a whitespace character at the start of the code line,\r\n * delete it.\r\n */\n\n\nconst deleteStartSpace = (editor, {\n  codeLine\n}) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n  const codeLineEnd = codeLineStart && Editor.after(editor, codeLineStart);\n  const spaceRange = codeLineEnd && Editor.range(editor, codeLineStart, codeLineEnd);\n  const spaceText = getText(editor, spaceRange);\n\n  if (/\\s/.test(spaceText)) {\n    Transforms.delete(editor, {\n      at: spaceRange\n    });\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Outdent the code line.\r\n * Remove 2 whitespace characters if any.\r\n */\n\n\nconst outdentCodeLine = (editor, {\n  codeBlock,\n  codeLine\n}) => {\n  const deleted = deleteStartSpace(editor, {\n    codeBlock,\n    codeLine\n  });\n  deleted && deleteStartSpace(editor, {\n    codeBlock,\n    codeLine\n  });\n};\n/**\r\n * - Shift+Tab: outdent code line.\r\n * - Tab: indent code line.\r\n */\n\n\nconst onKeyDownCodeBlock = editor => e => {\n  if (e.key === 'Tab') {\n    const shiftTab = e.shiftKey;\n    const res = getCodeLineEntry(editor, {});\n\n    if (res) {\n      const {\n        codeBlock,\n        codeLine\n      } = res;\n      e.preventDefault(); // outdent with shift+tab\n\n      if (shiftTab) {\n        // TODO: outdent multiple lines\n        outdentCodeLine(editor, {\n          codeBlock,\n          codeLine\n        });\n      } // indent with tab\n\n\n      const tab = !e.shiftKey;\n\n      if (tab) {\n        // TODO: indent multiple lines\n        indentCodeLine(editor, {\n          codeBlock,\n          codeLine\n        });\n      }\n\n      return;\n    }\n\n    const codeLines = getCodeLines(editor, {});\n\n    if (codeLines && codeLines !== null && codeLines !== void 0 && codeLines[0]) {\n      e.preventDefault();\n      const [, firstLinePath] = codeLines[0];\n      const codeBlock = getParent(editor, firstLinePath);\n\n      for (const codeLine of codeLines) {\n        if (shiftTab) {\n          // TODO: outdent multiple lines\n          outdentCodeLine(editor, {\n            codeBlock,\n            codeLine\n          });\n        } // indent with tab\n\n\n        const tab = !e.shiftKey;\n\n        if (tab) {\n          // TODO: indent multiple lines\n          indentCodeLine(editor, {\n            codeBlock,\n            codeLine\n          });\n        }\n      }\n    }\n  } // FIXME: would prefer this as mod+a, but doesn't work\n\n\n  if (e.key === 'a' && (e.metaKey || e.ctrlKey)) {\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n    const {\n      codeBlock\n    } = res;\n    const [, codeBlockPath] = codeBlock; // select the whole code block\n\n    Transforms.select(editor, codeBlockPath);\n    e.preventDefault();\n    e.stopPropagation();\n  } // Note: rather than handling mod+enter/mod+shift+enter here, we recommend\n  // using the exit-break plugin/ If not using exit-break, follow similar logic\n  // to exit-break to add behavior to exit the code-block\n\n};\n\nconst insertFragmentCodeBlock = editor => {\n  const {\n    insertFragment\n  } = editor;\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const codeLineType = getPluginType(editor, ELEMENT_CODE_LINE);\n\n  function convertNodeToCodeLine(node) {\n    return {\n      type: codeLineType,\n      children: [{\n        text: Node.string(node)\n      }]\n    };\n  }\n\n  function extractCodeLinesFromCodeBlock(node) {\n    return node.children;\n  }\n\n  return fragment => {\n    const inCodeLine = findNode(editor, {\n      match: {\n        type: codeLineType\n      }\n    });\n\n    if (!inCodeLine) {\n      return insertFragment(fragment);\n    }\n\n    return Transforms.insertFragment(editor, fragment.flatMap(node => node.type === codeBlockType ? extractCodeLinesFromCodeBlock(node) : convertNodeToCodeLine(node)));\n  };\n};\n\nconst getIndentDepth = (editor, {\n  codeLine\n}) => {\n  const [, codeLinePath] = codeLine;\n  const text = getText(editor, codeLinePath);\n  return text.search(/\\S|$/);\n};\n/**\r\n * Insert a code block: set the node to code line and wrap it with a code block.\r\n * If the cursor is not at the block start, insert break before.\r\n */\n\n\nconst insertCodeBlock = (editor, insertNodesOptions = {}) => {\n  if (!editor.selection || isExpanded(editor.selection)) return;\n\n  const matchCodeElements = node => node.type === getPluginType(editor, ELEMENT_CODE_BLOCK) || node.type === getCodeLineType(editor);\n\n  if (someNode(editor, {\n    match: matchCodeElements\n  })) {\n    return;\n  }\n\n  if (!isSelectionAtBlockStart(editor)) {\n    editor.insertBreak();\n  }\n\n  setNodes(editor, {\n    type: getCodeLineType(editor),\n    children: [{\n      text: ''\n    }]\n  }, insertNodesOptions);\n  wrapNodes(editor, {\n    type: getPluginType(editor, ELEMENT_CODE_BLOCK),\n    children: []\n  }, insertNodesOptions);\n};\n/**\r\n * Insert a code line starting with indentation.\r\n */\n\n\nconst insertCodeLine = (editor, indentDepth = 0) => {\n  if (editor.selection) {\n    const indent = ' '.repeat(indentDepth);\n    insertNodes(editor, {\n      type: getCodeLineType(editor),\n      children: [{\n        text: indent\n      }]\n    });\n  }\n};\n/**\r\n * Called by toolbars to make sure a code-block gets inserted below a paragraph\r\n * rather than awkwardly splitting the current selection.\r\n */\n\n\nconst insertEmptyCodeBlock = (editor, {\n  defaultType = getPluginType(editor, ELEMENT_DEFAULT),\n  insertNodesOptions,\n  level = 0\n}) => {\n  if (!editor.selection) return;\n\n  if (isExpanded(editor.selection) || !isBlockAboveEmpty(editor)) {\n    const selectionPath = Editor.path(editor, editor.selection);\n    const insertPath = Path.next(selectionPath.slice(0, level + 1));\n    insertNodes(editor, {\n      type: defaultType,\n      children: [{\n        text: ''\n      }]\n    }, {\n      at: insertPath,\n      select: true\n    });\n  }\n\n  insertCodeBlock(editor, insertNodesOptions);\n};\n\nconst unwrapCodeBlock = editor => {\n  unwrapNodes(editor, {\n    match: {\n      type: getCodeLineType(editor)\n    }\n  });\n  unwrapNodes(editor, {\n    match: {\n      type: getPluginType(editor, ELEMENT_CODE_BLOCK)\n    },\n    split: true\n  });\n};\n\nconst toggleCodeBlock = editor => {\n  if (!editor.selection) return;\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const isActive = someNode(editor, {\n    match: {\n      type: codeBlockType\n    }\n  });\n  unwrapCodeBlock(editor);\n  setNodes(editor, {\n    type: getCodeLineType(editor)\n  });\n\n  if (!isActive) {\n    const codeBlock = {\n      type: codeBlockType,\n      children: []\n    };\n    wrapNodes(editor, codeBlock);\n    const nodes = [...getNodes(editor, {\n      match: {\n        type: getCodeLineType(editor)\n      }\n    })];\n    const codeLine = {\n      type: codeBlockType,\n      children: []\n    };\n\n    for (const [, path] of nodes) {\n      // Transforms.wrapNodes(editor, codeLine, {\n      setNodes(editor, codeLine, {\n        at: path\n      });\n    }\n  }\n};\n\nconst withCodeBlock = editor => {\n  const {\n    insertBreak\n  } = editor;\n\n  const insertBreakCodeBlock = () => {\n    if (!editor.selection) return;\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n    const {\n      codeBlock,\n      codeLine\n    } = res;\n    const indentDepth = getIndentDepth(editor, {\n      codeBlock,\n      codeLine\n    });\n    insertCodeLine(editor, indentDepth);\n    return true;\n  };\n\n  editor.insertBreak = () => {\n    if (insertBreakCodeBlock()) return;\n    insertBreak();\n  };\n\n  editor.insertFragment = insertFragmentCodeBlock(editor);\n  return editor;\n};\n/**\r\n * Enables support for pre-formatted code blocks.\r\n */\n\n\nconst createCodeBlockPlugin = createPluginFactory({\n  key: ELEMENT_CODE_BLOCK,\n  isElement: true,\n  deserializeHtml: { ...deserializeHtmlCodeBlock,\n    validNodeName: 'PRE'\n  },\n  handlers: {\n    onKeyDown: onKeyDownCodeBlock\n  },\n  withOverrides: withCodeBlock,\n  options: {\n    hotkey: ['mod+opt+8', 'mod+shift+8'],\n    syntax: true,\n    syntaxPopularFirst: false\n  },\n  then: editor => ({\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              query: () => {\n                const code_line = getPlugin(editor, ELEMENT_CODE_LINE);\n                return !someNode(editor, {\n                  match: {\n                    type: code_line.type\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }),\n  plugins: [{\n    key: ELEMENT_CODE_LINE,\n    isElement: true,\n    decorate: decorateCodeLine\n  }]\n});\nexport { CODE_BLOCK_LANGUAGES, CODE_BLOCK_LANGUAGES_POPULAR, ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE, createCodeBlockPlugin, decorateCodeLine, deleteStartSpace, deserializeHtmlCodeBlock, getCodeLineEntry, getCodeLineType, getCodeLines, getIndentDepth, indentCodeLine, insertCodeBlock, insertCodeLine, insertEmptyCodeBlock, insertFragmentCodeBlock, onKeyDownCodeBlock, outdentCodeLine, toggleCodeBlock, unwrapCodeBlock, withCodeBlock };","map":{"version":3,"sources":["../src/constants.ts","../node_modules/prismjs/components/prism-antlr4.js","../node_modules/prismjs/components/prism-bash.js","../node_modules/prismjs/components/prism-c.js","../node_modules/prismjs/components/prism-cmake.js","../node_modules/prismjs/components/prism-coffeescript.js","../node_modules/prismjs/components/prism-cpp.js","../node_modules/prismjs/components/prism-csharp.js","../node_modules/prismjs/components/prism-css.js","../node_modules/prismjs/components/prism-dart.js","../node_modules/prismjs/components/prism-django.js","../node_modules/prismjs/components/prism-docker.js","../node_modules/prismjs/components/prism-ejs.js","../node_modules/prismjs/components/prism-erlang.js","../node_modules/prismjs/components/prism-git.js","../node_modules/prismjs/components/prism-go.js","../node_modules/prismjs/components/prism-graphql.js","../node_modules/prismjs/components/prism-groovy.js","../node_modules/prismjs/components/prism-java.js","../node_modules/prismjs/components/prism-javascript.js","../node_modules/prismjs/components/prism-json.js","../node_modules/prismjs/components/prism-jsx.js","../node_modules/prismjs/components/prism-kotlin.js","../node_modules/prismjs/components/prism-latex.js","../node_modules/prismjs/components/prism-less.js","../node_modules/prismjs/components/prism-lua.js","../node_modules/prismjs/components/prism-makefile.js","../node_modules/prismjs/components/prism-markdown.js","../node_modules/prismjs/components/prism-matlab.js","../node_modules/prismjs/components/prism-objectivec.js","../node_modules/prismjs/components/prism-perl.js","../node_modules/prismjs/components/prism-php.js","../node_modules/prismjs/components/prism-powershell.js","../node_modules/prismjs/components/prism-properties.js","../node_modules/prismjs/components/prism-protobuf.js","../node_modules/prismjs/components/prism-python.js","../node_modules/prismjs/components/prism-r.js","../node_modules/prismjs/components/prism-ruby.js","../node_modules/prismjs/components/prism-sass.js","../node_modules/prismjs/components/prism-scheme.js","../node_modules/prismjs/components/prism-scss.js","../node_modules/prismjs/components/prism-sql.js","../node_modules/prismjs/components/prism-swift.js","../node_modules/prismjs/components/prism-tsx.js","../node_modules/prismjs/components/prism-typescript.js","../node_modules/prismjs/components/prism-wasm.js","../node_modules/prismjs/components/prism-yaml.js","../src/decorateCodeLine.ts","../src/deserializeHtmlCodeBlockPre.ts","../src/options/getCodeLineType.ts","../src/queries/getCodeLineEntry.ts","../src/queries/getCodeLines.ts","../src/transforms/indentCodeLine.ts","../src/transforms/deleteStartSpace.ts","../src/transforms/outdentCodeLine.ts","../src/onKeyDownCodeBlock.ts","../src/insertFragmentCodeBlock.ts","../src/queries/getIndentDepth.ts","../src/transforms/insertCodeBlock.ts","../src/transforms/insertCodeLine.ts","../src/transforms/insertEmptyCodeBlock.ts","../src/transforms/unwrapCodeBlock.ts","../src/transforms/toggleCodeBlock.ts","../src/withCodeBlock.ts","../src/createCodeBlockPlugin.ts"],"names":["ELEMENT_CODE_BLOCK","ELEMENT_CODE_LINE","CODE_BLOCK_LANGUAGES_POPULAR","bash","css","git","graphql","html","javascript","json","jsx","markdown","sql","svg","tsx","typescript","wasm","CODE_BLOCK_LANGUAGES","antlr4","c","csharp","coffeescript","cmake","dart","django","docker","ejs","erlang","go","groovy","java","kotlin","latex","less","lua","makefile","matlab","markup","objectivec","perl","php","powershell","properties","protobuf","python","r","ruby","sass","scss","scheme","shell","swift","yaml","xml","decorateCodeLine","type","code_block","getPlugin","entry","ranges","codeBlock","getParent","langName","codeBlockNode","lang","languages","isElement","node","text","Node","tokens","tokenize","offset","element","token","anchor","focus","length","className","prism","deserializeHtmlCodeBlock","getNode","el","lines","codeLines","line","children","getCodeLineType","editor","getPluginType","getCodeLineEntry","at","selection","someNode","match","selectionParent","codeLine","codeLineNode","getCodeLines","getNodes","indentCodeLine","codeLineStart","Editor","isExpanded","cursor","range","Transforms","deleteStartSpace","codeLineEnd","spaceRange","spaceText","getText","outdentCodeLine","deleted","onKeyDownCodeBlock","e","shiftTab","res","tab","insertFragmentCodeBlock","insertFragment","codeBlockType","codeLineType","fragment","inCodeLine","findNode","extractCodeLinesFromCodeBlock","convertNodeToCodeLine","getIndentDepth","insertCodeBlock","insertNodesOptions","matchCodeElements","isSelectionAtBlockStart","setNodes","wrapNodes","insertCodeLine","indentDepth","indent","insertNodes","insertEmptyCodeBlock","defaultType","level","isBlockAboveEmpty","selectionPath","insertPath","Path","select","unwrapCodeBlock","unwrapNodes","split","toggleCodeBlock","isActive","nodes","path","withCodeBlock","insertBreak","insertBreakCodeBlock","createCodeBlockPlugin","createPluginFactory","key","deserializeHtml","validNodeName","handlers","onKeyDown","withOverrides","options","hotkey","syntax","syntaxPopularFirst","then","inject","pluginsByKey","insertData","query","code_line","plugins","decorate"],"mappings":";;;MAAaA,kBAAkB,GAAG,Y;MACrBC,iBAAiB,GAAG,W,EAAA;AAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEaC,4BAAoD,GAAG;AAClEC,EAAAA,IAAI,EAD8D,MAAA;AAElEC,EAAAA,GAAG,EAF+D,KAAA;AAGlEC,EAAAA,GAAG,EAH+D,KAAA;AAIlEC,EAAAA,OAAO,EAJ2D,SAAA;AAKlEC,EAAAA,IAAI,EAL8D,MAAA;AAMlEC,EAAAA,UAAU,EANwD,YAAA;AAOlEC,EAAAA,IAAI,EAP8D,MAAA;AAQlEC,EAAAA,GAAG,EAR+D,KAAA;AASlEC,EAAAA,QAAQ,EAT0D,UAAA;AAUlEC,EAAAA,GAAG,EAV+D,KAAA;AAWlEC,EAAAA,GAAG,EAX+D,KAAA;AAYlEC,EAAAA,GAAG,EAZ+D,KAAA;AAalEC,EAAAA,UAAU,EAbwD,YAAA;AAclEC,EAAAA,IAAI,EAAE;AAd4D,C;MAiBvDC,oBAA4C,GAAG;AAC1DC,EAAAA,MAAM,EADoD,QAAA;AAE1Df,EAAAA,IAAI,EAFsD,MAAA;AAG1DgB,EAAAA,CAAC,EAHyD,GAAA;AAI1DC,EAAAA,MAAM,EAJoD,IAAA;AAK1DhB,EAAAA,GAAG,EALuD,KAAA;AAM1DiB,EAAAA,YAAY,EAN8C,cAAA;AAO1DC,EAAAA,KAAK,EAPqD,OAAA;AAQ1DC,EAAAA,IAAI,EARsD,MAAA;AAS1DC,EAAAA,MAAM,EAToD,QAAA;AAU1DC,EAAAA,MAAM,EAVoD,QAAA;AAW1DC,EAAAA,GAAG,EAXuD,KAAA;AAY1DC,EAAAA,MAAM,EAZoD,QAAA;AAa1DtB,EAAAA,GAAG,EAbuD,KAAA;AAc1DuB,EAAAA,EAAE,EAdwD,IAAA;AAe1DtB,EAAAA,OAAO,EAfmD,SAAA;AAgB1DuB,EAAAA,MAAM,EAhBoD,QAAA;AAiB1DtB,EAAAA,IAAI,EAjBsD,MAAA;AAkB1DuB,EAAAA,IAAI,EAlBsD,MAAA;AAmB1DtB,EAAAA,UAAU,EAnBgD,YAAA;AAoB1DC,EAAAA,IAAI,EApBsD,MAAA;AAqB1DC,EAAAA,GAAG,EArBuD,KAAA;AAsB1DqB,EAAAA,MAAM,EAtBoD,QAAA;AAuB1DC,EAAAA,KAAK,EAvBqD,OAAA;AAwB1DC,EAAAA,IAAI,EAxBsD,MAAA;AAyB1DC,EAAAA,GAAG,EAzBuD,KAAA;AA0B1DC,EAAAA,QAAQ,EA1BkD,UAAA;AA2B1DxB,EAAAA,QAAQ,EA3BkD,UAAA;AA4B1DyB,EAAAA,MAAM,EA5BoD,QAAA;AA6B1DC,EAAAA,MAAM,EA7BoD,QAAA;AA8B1DC,EAAAA,UAAU,EA9BgD,aAAA;AA+B1DC,EAAAA,IAAI,EA/BsD,MAAA;AAgC1DC,EAAAA,GAAG,EAhCuD,KAAA;AAiC1DC,EAAAA,UAAU,EAjCgD,YAAA;AAkC1DC,EAAAA,UAAU,EAlCgD,aAAA;AAmC1DC,EAAAA,QAAQ,EAnCkD,kBAAA;AAoC1DC,EAAAA,MAAM,EApCoD,QAAA;AAqC1DC,EAAAA,CAAC,EArCyD,GAAA;AAsC1DC,EAAAA,IAAI,EAtCsD,MAAA;AAuC1DC,EAAAA,IAAI,EAvCsD,aAAA;AAwC1DC,EAAAA,IAAI,EAxCsD,aAAA;AAyC1D;AACA;AACAC,EAAAA,MAAM,EA3CoD,QAAA;AA4C1DrC,EAAAA,GAAG,EA5CuD,KAAA;AA6C1DsC,EAAAA,KAAK,EA7CqD,OAAA;AA8C1DC,EAAAA,KAAK,EA9CqD,OAAA;AA+C1DtC,EAAAA,GAAG,EA/CuD,KAAA;AAgD1DC,EAAAA,GAAG,EAhDuD,KAAA;AAiD1DC,EAAAA,UAAU,EAjDgD,YAAA;AAkD1DC,EAAAA,IAAI,EAlDsD,aAAA;AAmD1DoC,EAAAA,IAAI,EAnDsD,MAAA;AAoD1DC,EAAAA,GAAG,EAAE;AApDqD,C;AC1E5D,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,aAAW,+BADa;AAExB,YAAU;AACT,IAAA,OAAO,EAAE,uBADA;AAET,IAAA,MAAM,EAAE;AAFC,GAFc;AAMxB,qBAAmB;AAClB,IAAA,OAAO,EAAE,0BADS;AAElB,IAAA,MAAM,EAAE,IAFU;AAGlB,IAAA,KAAK,EAAE,OAHW;AAIlB,IAAA,MAAM,EAAE;AACP,eAAS;AACR,QAAA,OAAO,EAAE,wCADD;AAER,QAAA,UAAU,EAAE,IAFJ;AAGR,QAAA,KAAK,EAAE;AAHC,OADF;AAMP,gBAAU,qEANH;AAOP,qBAAe;AAPR;AAJU,GANK;AAoBxB,YAAU;AACT,IAAA,OAAO,EAAE,yDADA;AAET,IAAA,MAAM,EAAE,IAFC;AAGT,IAAA,MAAM,EAAE;AACP,iBAAW;AACd;AACI,QAAA,OAAO,EAAE,mBAFC;AAGV,QAAA,UAAU,EAAE;AAHF,OADJ;AAMP,qBAAe;AANR;AAHC,GApBc;AAgCxB,aAAW;AACV,IAAA,OAAO,EAAE,yEADC;AAEV,IAAA,UAAU,EAAE,IAFF;AAGV,IAAA,MAAM,EAAE;AACP,kBAAY,wBADL;AAEP,qBAAe;AAFR;AAHE,GAhCa;AAwCxB,gBAAc;AACb,IAAA,OAAO,EAAE,gBADI;AAEb,IAAA,KAAK,EAAE;AAFM,GAxCU;AA4CxB,WAAS;AACR,IAAA,OAAO,EAAE,YADD;AAER,IAAA,KAAK,EAAE;AAFC,GA5Ce;AAgDxB,aAAW,+GAhDa;AAiDxB,gBAAc,CACb;AACC,IAAA,OAAO,EAAE,oBADV;AAEC,IAAA,KAAK,EAAE,CAAC,MAAD,EAAS,YAAT;AAFR,GADa,EAKb;AACC,IAAA,OAAO,EAAE,oBADV;AAEC,IAAA,KAAK,EAAE,CAAC,OAAD,EAAU,UAAV;AAFR,GALa,CAjDU;AA2DxB,cAAY,kBA3DY;AA4DxB,cAAY,uBA5DY;AA6DxB,iBAAe;AA7DS,CAAzB;AAgEA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAArC;;AChEC,WAAU,KAAV,EAAiB;AAClB;AACA;AACA;AACA;AACC,MAAI,OAAO,GAAG,yoCAAd;AAEA,MAAI,mBAAmB,GAAG;AACzB,IAAA,OAAO,EAAE,2BADgB;AAEzB,IAAA,UAAU,EAAE,IAFa;AAGzB,IAAA,KAAK,EAAE,aAHkB;AAGL;AACpB,IAAA,MAAM,EAAE,IAJiB,CAIb;;AAJa,GAA1B;AAOA,MAAI,YAAY,GAAG;AAClB,YAAQ,mBADU;AAElB,mBAAe;AACd,MAAA,OAAO,EAAE,MAAM,CAAC,QAAQ,OAAT,CADD;AAEd,MAAA,KAAK,EAAE;AAFO,KAFG;AAMlB,gBAAY,CACd;AACG;AACC,MAAA,OAAO,EAAE,qBADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,MAAM,EAAE;AACZ;AACK,oBAAY,CACX;AACC,UAAA,OAAO,EAAE,sBADV;AAEC,UAAA,UAAU,EAAE;AAFb,SADW,EAKX,SALW,CAFL;AASP,kBAAU,6DATH;AAUZ;AACK,oBAAY,0DAXL;AAYZ;AACK,uBAAe;AAbR;AAHT,KAFW,EAqBd;AACG;AACC,MAAA,OAAO,EAAE,oCADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,MAAM,EAAE;AACP,oBAAY;AADL;AAHT,KAtBW,EA6Bd;AACG;AACC,MAAA,OAAO,EAAE,aADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,MAAM,EAAE;AACP,oBAAY,kCADL;AAEP,uBAAe,QAFR;AAGP,uBAAe;AACd,UAAA,OAAO,EAAE,MAAM,CAAC,UAAU,OAAX,CADD;AAEd,UAAA,UAAU,EAAE,IAFE;AAGd,UAAA,KAAK,EAAE;AAHO;AAHR;AAHT,KA9BW,EA2CX,oBA3CW,CANM;AAmDpB;AACE,cAAU;AApDQ,GAAnB;AAuDA,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB;AACtB,eAAW;AACV,MAAA,OAAO,EAAE,YADC;AAEV,MAAA,KAAK,EAAE;AAFG,KADW;AAKtB,eAAW;AACV,MAAA,OAAO,EAAE,iBADC;AAEV,MAAA,UAAU,EAAE;AAFF,KALW;AAStB,qBAAiB,CACnB;AACA;AACA;AACA;AACG;AACH;AACI,MAAA,OAAO,EAAE,iDAFV;AAGC,MAAA,UAAU,EAAE,IAHb;AAIC,MAAA,KAAK,EAAE;AAJR,KALgB,EAWhB;AACH;AACI,MAAA,OAAO,EAAE,6BAFV;AAGC,MAAA,KAAK,EAAE;AAHR,KAXgB,CATK;AA0BxB;AACE,qBAAiB;AAChB,MAAA,OAAO,EAAE,qCADO;AAEhB,MAAA,KAAK,EAAE,UAFS;AAGhB,MAAA,UAAU,EAAE;AAHI,KA3BK;AAgCxB;AACA;AACE,mBAAe;AACd,MAAA,OAAO,EAAE,+BADK;AAEd,MAAA,MAAM,EAAE;AACP,uBAAe;AACd,UAAA,OAAO,EAAE,MAAM,CAAC,yBAAyB,OAA1B,CADD;AAEd,UAAA,UAAU,EAAE,IAFE;AAGd,UAAA,KAAK,EAAE;AAHO;AADR,OAFM;AASd,MAAA,KAAK,EAAE,UATO;AAUd,MAAA,UAAU,EAAE;AAVE,KAlCO;AA8CtB,cAAU,CACZ;AACG;AACC,MAAA,OAAO,EAAE,kDADV;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AAJT,KAFS,EAQZ;AACA;AACG;AACC,MAAA,OAAO,EAAE,0DADV;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,gBAAQ;AADD;AAJT,KAVS,EAkBZ;AACG;AACH;AACI,MAAA,OAAO,EAAE,yEAFV;AAGC,MAAA,UAAU,EAAE,IAHb;AAIC,MAAA,MAAM,EAAE,IAJT;AAKC,MAAA,MAAM,EAAE;AALT,KAnBS,EA0BT;AACH;AACI,MAAA,OAAO,EAAE,mBAFV;AAGC,MAAA,UAAU,EAAE,IAHb;AAIC,MAAA,MAAM,EAAE;AAJT,KA1BS,EAgCT;AACH;AACI,MAAA,OAAO,EAAE,0BAFV;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,kBAAU,YAAY,CAAC;AADhB;AAJT,KAhCS,CA9CY;AAuFtB,mBAAe;AACd,MAAA,OAAO,EAAE,MAAM,CAAC,SAAS,OAAV,CADD;AAEd,MAAA,KAAK,EAAE;AAFO,KAvFO;AA2FtB,gBAAY,YAAY,CAAC,QA3FH;AA4FtB,gBAAY;AACX,MAAA,OAAO,EAAE,mgDADE;AAEX,MAAA,UAAU,EAAE;AAFD,KA5FU;AAgGtB,eAAW;AACV,MAAA,OAAO,EAAE,+GADC;AAEV,MAAA,UAAU,EAAE;AAFF,KAhGW;AAoGxB;AACE,eAAW;AACV,MAAA,OAAO,EAAE,4SADC;AAEV,MAAA,UAAU,EAAE,IAFF;AAGb;AACG,MAAA,KAAK,EAAE;AAJG,KArGW;AA2GtB,eAAW;AACV,MAAA,OAAO,EAAE,gDADC;AAEV,MAAA,UAAU,EAAE;AAFF,KA3GW;AA+GtB,uBAAmB;AAClB,MAAA,OAAO,EAAE,SADS;AAElB,MAAA,KAAK,EAAE;AAFW,KA/GG;AAmHtB,gBAAY;AACd;AACG,MAAA,OAAO,EAAE,6EAFE;AAGX,MAAA,MAAM,EAAE;AACP,2BAAmB;AAClB,UAAA,OAAO,EAAE,KADS;AAElB,UAAA,KAAK,EAAE;AAFW;AADZ;AAHG,KAnHU;AA6HtB,mBAAe,gCA7HO;AA8HtB,cAAU;AACT,MAAA,OAAO,EAAE,oCADA;AAET,MAAA,UAAU,EAAE;AAFH;AA9HY,GAAvB;AAoIA,EAAA,mBAAmB,CAAC,MAApB,GAA6B,KAAK,CAAC,SAAN,CAAgB,IAA7C;AAED;;AACC,MAAI,UAAU,GAAG,CAChB,SADgB,EAEhB,eAFgB,EAGhB,eAHgB,EAIhB,aAJgB,EAKhB,QALgB,EAMhB,aANgB,EAOhB,UAPgB,EAQhB,SARgB,EAShB,SATgB,EAUhB,SAVgB,EAWhB,iBAXgB,EAYhB,UAZgB,EAahB,aAbgB,EAchB,QAdgB,CAAjB;AAgBA,MAAI,MAAM,GAAG,YAAY,CAAC,QAAb,CAAsB,CAAtB,EAAyB,MAAtC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC3C,IAAA,MAAM,CAAC,UAAU,CAAC,CAAD,CAAX,CAAN,GAAwB,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,UAAU,CAAC,CAAD,CAA/B,CAAxB;AACA;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB,GAAwB,KAAK,CAAC,SAAN,CAAgB,IAAxC;AACA,CAlOA,EAkOC,KAlOD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,CAAhB,GAAoB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACnD,aAAW;AACV,IAAA,OAAO,EAAE,qEADC;AAEV,IAAA,MAAM,EAAE;AAFE,GADwC;AAKnD,gBAAc;AACb,IAAA,OAAO,EAAE,kFADI;AAEb,IAAA,UAAU,EAAE;AAFC,GALqC;AASnD,aAAW,mVATwC;AAUnD,cAAY,uBAVuC;AAWnD,YAAU,mHAXyC;AAYnD,cAAY;AAZuC,CAAhC,CAApB;AAeA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,GAA7B,EAAkC,QAAlC,EAA4C;AAC3C,WAAS;AACV;AACA;AACE,IAAA,OAAO,EAAE,2FAHD;AAIR,IAAA,UAAU,EAAE,IAJJ;AAKR,IAAA,MAAM,EAAE,IALA;AAMR,IAAA,KAAK,EAAE,UANC;AAOR,IAAA,MAAM,EAAE;AACP,gBAAU,CACT;AACJ;AACK,QAAA,OAAO,EAAE,0BAFV;AAGC,QAAA,UAAU,EAAE;AAHb,OADS,EAMT,KAAK,CAAC,SAAN,CAAgB,CAAhB,CAAkB,QAAlB,CANS,CADH;AASP,iBAAW,KAAK,CAAC,SAAN,CAAgB,CAAhB,CAAkB,SAAlB,CATJ;AAUP,oBAAc,CACb;AACC,QAAA,OAAO,EAAE,8BADV;AAEC,QAAA,UAAU,EAAE;AAFb,OADa,EAKb;AACC,QAAA,OAAO,EAAE,8BADV;AAEC,QAAA,UAAU,EAAE,IAFb;AAGC,QAAA,KAAK,EAAE;AAHR,OALa,CAVP;AAqBV;AACG,mBAAa;AACZ,QAAA,OAAO,EAAE,eADG;AAEZ,QAAA,UAAU,EAAE,IAFA;AAGZ,QAAA,KAAK,EAAE;AAHK,OAtBN;AA2BP,wBAAkB,IA3BX;AA4BP,qBAAe,iBA5BR;AA6BP,oBAAc;AACb,QAAA,OAAO,EAAE,WADI;AAEb,QAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFX;AA7BP;AAPA,GADkC;AA2C5C;AACC,cAAY;AA5C+B,CAA5C;AA+CA,OAAO,KAAK,CAAC,SAAN,CAAgB,CAAhB,CAAkB,SAAlB,CAAP;AC9DA,KAAK,CAAC,SAAN,CAAgB,KAAhB,GAAwB;AACvB,aAAW,KADY;AAEvB,YAAU;AACT,IAAA,OAAO,EAAE,mBADA;AAET,IAAA,MAAM,EAAE,IAFC;AAGT,IAAA,MAAM,EAAE;AACP,uBAAiB;AAChB,QAAA,OAAO,EAAE,iCADO;AAEhB,QAAA,MAAM,EAAE;AACP,yBAAe,SADR;AAEP,sBAAY;AAFL;AAFQ;AADV;AAHC,GAFa;AAevB,cAAY,01DAfW;AAgBvB,cAAY,6pMAhBW;AAiBvB,aAAW,syDAjBY;AAkBvB,aAAW,2BAlBY;AAmBvB,eAAa,0EAnBU;AAoBvB,cAAY,8HApBW;AAqBvB,cAAY;AACX,IAAA,OAAO,EAAE,cADE;AAEX,IAAA,KAAK,EAAE;AAFI,GArBW;AAyBvB,YAAU,mBAzBa;AA0BvB,cAAY,yBA1BW;AA2BvB,iBAAe;AA3BQ,CAAxB;;ACAC,WAAU,KAAV,EAAiB;AAElB;AACC,MAAI,OAAO,GAAG,WAAd;AACA,MAAI,aAAa,GAAG;AACnB,IAAA,OAAO,EAAE,YADU;AAEnB,IAAA,KAAK,EAAE;AAFY,GAApB;AAKA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,GAA+B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,YAAvB,EAAqC;AACnE,eAAW,OADwD;AAEnE,cAAU,CAEZ;AACG;AACC,MAAA,OAAO,EAAE,wBADV;AAEC,MAAA,MAAM,EAAE;AAFT,KAHS,EAQT;AACH;AACI,MAAA,OAAO,EAAE,wBAFV;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,yBAAiB;AADV;AAJT,KARS,CAFyD;AAmBnE,eAAW,kSAnBwD;AAoBnE,oBAAgB;AACf,MAAA,OAAO,EAAE,YADM;AAEf,MAAA,KAAK,EAAE;AAFQ;AApBmD,GAArC,CAA/B;AA0BA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;AACvD,yBAAqB;AACpB,MAAA,OAAO,EAAE,gBADW;AAEpB,MAAA,KAAK,EAAE;AAFa,KADkC;AAMzD;AACE,mBAAe;AACd,MAAA,OAAO,EAAE,oBADK;AAEd,MAAA,KAAK,EAAE,OAFO;AAGd,MAAA,MAAM,EAAE;AACP,mBAAW,OADJ;AAEP,yBAAiB;AAFV;AAHM;AAPwC,GAAxD;AAiBA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,cAA7B,EAA6C,QAA7C,EAAuD;AACtD,yBAAqB;AACpB,MAAA,OAAO,EAAE,wBADW;AAEpB,MAAA,MAAM,EAAE;AACP,qBAAa;AACZ,UAAA,OAAO,EAAE,OADG;AAEZ,UAAA,KAAK,EAAE;AAFK,SADN;AAKP,kBAAU;AACT,UAAA,OAAO,EAAE,SADA;AAET,UAAA,KAAK,EAAE,qBAFE;AAGT,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHf;AALH;AAFY,KADiC;AAgBxD;AACE,wBAAoB,CACnB;AACC,MAAA,OAAO,EAAE,gBADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,KAAK,EAAE;AAHR,KADmB,EAMnB;AACC,MAAA,OAAO,EAAE,gBADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,KAAK,EAAE,QAHR;AAIC,MAAA,MAAM,EAAE;AACP,QAAA,aAAa,EAAE;AADR;AAJT,KANmB;AAjBkC,GAAvD;AAmCA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;AACzD;AACE,gBAAY;AAF2C,GAAxD;AAKA,SAAO,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,iBAA7B,CAAP;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,YAAzC;AACA,CA/FA,EA+FC,KA/FD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AAEjB,MAAI,OAAO,GAAG,msBAAd;AACA,MAAI,OAAO,GAAG,uCAAuC,MAAvC,CAA8C,OAA9C,CAAsD,YAAtD,EAAoE,YAAY;AAAE,WAAO,OAAO,CAAC,MAAf;AAAwB,GAA1G,CAAd;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,GAAvB,EAA4B;AACjD,kBAAc,CACb;AACC,MAAA,OAAO,EAAE,MAAM,CAAC,gEAAgE,MAAhE,CACd,OADc,CACN,YADM,EACQ,YAAY;AAAE,eAAO,OAAO,CAAC,MAAf;AAAwB,OAD9C,CAAD,CADhB;AAGC,MAAA,UAAU,EAAE;AAHb,KADa,EAMhB;AACA;AACA;AACA;AACG,oCAVa,EAWhB;AACA;AACG,uCAba,EAchB;AACA;AACG,oEAhBa,CADmC;AAmBjD,eAAW,OAnBsC;AAoBjD,cAAU;AACT,MAAA,OAAO,EAAE,gJADA;AAET,MAAA,MAAM,EAAE;AAFC,KApBuC;AAwBjD,gBAAY,wHAxBqC;AAyBjD,eAAW;AAzBsC,GAA5B,CAAtB;AA4BA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,QAApC,EAA8C;AAC7C,cAAU;AACZ;AACG,MAAA,OAAO,EAAE,MAAM,CACd,2BAA2B,MAA3B,GACA,KADA,GAEJ;AACI,yDAAmD,MAHnD,GAIA,GAJA,GAKJ;AACI,wDAAkD,MAAlD,CAAyD,OAAzD,CAAiE,aAAjE,EAAgF,YAAY;AAAE,eAAO,OAAP;AAAiB,OAA/G,CANA,GAOA,GARc,CAFN;AAYT,MAAA,UAAU,EAAE,IAZH;AAaT,MAAA,MAAM,EAAE,IAbC;AAcT,MAAA,MAAM,EAAE;AACP,kBAAU,cADH;AAEP,oBAAY,GAFL;AAGP,uBAAe;AAHR;AAdC,KADmC;AAqB7C,kBAAc;AACb,MAAA,OAAO,EAAE,mCADI;AAEb,MAAA,KAAK,EAAE,QAFM;AAGb,MAAA,MAAM,EAAE;AAHK;AArB+B,GAA9C;AA4BA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,SAApC,EAA+C;AAC9C,wBAAoB;AACnB,MAAA,OAAO,EAAE,6DADU;AAEnB,MAAA,MAAM,EAAE;AACP,oBAAY,MADL;AAEP,mBAAW;AACV,UAAA,OAAO,EAAE,UADC;AAEV,UAAA,KAAK,EAAE,YAFG;AAGV,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHd;AAFJ;AAFW;AAD0B,GAA/C;AAcA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,UAApC,EAAgD;AAC/C,oBAAgB;AACf,MAAA,OAAO,EAAE,IADM;AAEf,MAAA,KAAK,EAAE;AAFQ;AAD+B,GAAhD;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,YAApC,EAAkD;AACnD;AACA;AACE,mBAAe;AACd,MAAA,OAAO,EAAE,4EADK;AAEd,MAAA,UAAU,EAAE,IAFE;AAGd,MAAA,MAAM,EAAE,IAHM;AAId,MAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B,EAA9B;AAJM;AAHkC,GAAlD;AAWA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,cAAvC,EAAuD;AACxD;AACE,kBAAc;AAFwC,GAAvD,EAGG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,aAApB,CAHH;AAKA,CAlGA,EAkGC,KAlGD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,OAAT,CAAiB,OAAjB,EAA0B,YAA1B,EAAwC;AACvC,WAAO,OAAO,CAAC,OAAR,CAAgB,YAAhB,EAA8B,UAAU,CAAV,EAAa,KAAb,EAAoB;AACxD,aAAO,QAAQ,YAAY,CAAC,CAAC,KAAF,CAApB,GAA+B,GAAtC;AACA,KAFM,CAAP;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAS,EAAT,CAAY,OAAZ,EAAqB,YAArB,EAAmC,KAAnC,EAA0C;AACzC,WAAO,MAAM,CAAC,OAAO,CAAC,OAAD,EAAU,YAAV,CAAR,EAAiC,KAAK,IAAI,EAA1C,CAAb;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAS,MAAT,CAAgB,OAAhB,EAAyB,SAAzB,EAAoC;AACnC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AACnC,MAAA,OAAO,GAAG,OAAO,CAAC,OAAR,CAAgB,WAAhB,EAA6B,YAAY;AAAE,eAAO,QAAQ,OAAR,GAAkB,GAAzB;AAA+B,OAA1E,CAAV;AACA;;AACD,WAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,EAA6B,WAA7B,CAAP;AACA,GAvCgB,CAyClB;;;AACC,MAAI,YAAY,GAAG;AACpB;AACE,IAAA,IAAI,EAAE,2GAFY;AAGpB;AACE,IAAA,eAAe,EAAE,oCAJC;AAKpB;AACA;AACE,IAAA,UAAU,EAAE,0NAPM;AAQpB;AACE,IAAA,KAAK,EAAE;AATW,GAAnB,CA1CiB,CAsDlB;;AACC,WAAS,iBAAT,CAA2B,KAA3B,EAAkC;AACjC,WAAO,WAAW,KAAK,CAAC,IAAN,GAAa,OAAb,CAAqB,IAArB,EAA2B,GAA3B,CAAX,GAA6C,MAApD;AACA;;AACD,MAAI,uBAAuB,GAAG,iBAAiB,CAAC,YAAY,CAAC,eAAd,CAA/C;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAb,GAAoB,GAApB,GAA0B,YAAY,CAAC,eAAvC,GAAyD,GAAzD,GAA+D,YAAY,CAAC,UAA5E,GAAyF,GAAzF,GAA+F,YAAY,CAAC,KAA7G,CAAlB,CAArB;AACA,MAAI,eAAe,GAAG,iBAAiB,CAAC,YAAY,CAAC,eAAb,GAA+B,GAA/B,GAAqC,YAAY,CAAC,UAAlD,GAA+D,GAA/D,GAAqE,YAAY,CAAC,KAAnF,CAAvC;AACA,MAAI,qBAAqB,GAAG,iBAAiB,CAAC,YAAY,CAAC,IAAb,GAAoB,GAApB,GAA0B,YAAY,CAAC,eAAvC,GAAyD,GAAzD,GAA+D,YAAY,CAAC,KAA7E,CAA7C,CA7DiB,CA+DlB;;AACC,MAAI,OAAO,GAAG,MAAM,CAAC,mCAAmC,MAApC,EAA4C,CAA5C,CAApB,CAhEiB,CAgEkD;;AACnE,MAAI,WAAW,GAAG,MAAM,CAAC,0BAA0B,MAA3B,EAAmC,CAAnC,CAAxB;AACA,MAAI,IAAI,GAAG,qBAAqB,MAAhC;AACA,MAAI,WAAW,GAAG,OAAO,CAAC,qBAAqB,MAAtB,EAA8B,CAAC,IAAD,EAAO,OAAP,CAA9B,CAAzB;AACA,MAAI,UAAU,GAAG,OAAO,CAAC,mCAAmC,MAApC,EAA4C,CAAC,eAAD,EAAkB,WAAlB,CAA5C,CAAxB;AACA,MAAI,KAAK,GAAG,mBAAmB,MAA/B;AACA,MAAI,0BAA0B,GAAG,OAAO,CAAC,yCAAyC,MAA1C,EAAkD,CAAC,UAAD,EAAa,KAAb,CAAlD,CAAxC;AACA,MAAI,YAAY,GAAG,OAAO,CAAC,2CAA2C,MAA5C,EAAoD,CAAC,OAAD,EAAU,WAAV,EAAuB,KAAvB,CAApD,CAA1B;AACA,MAAI,KAAK,GAAG,OAAO,CAAC,yBAAyB,MAA1B,EAAkC,CAAC,YAAD,CAAlC,CAAnB;AACA,MAAI,cAAc,GAAG,OAAO,CAAC,mDAAmD,MAApD,EAA4D,CAAC,KAAD,EAAQ,UAAR,EAAoB,KAApB,CAA5D,CAA5B;AAEA,MAAI,UAAU,GAAG;AAChB,eAAW,QADK;AAEhB,mBAAe;AAFC,GAAjB,CA3EiB,CAgFlB;AACA;AACA;;AACC,MAAI,SAAS,GAAG,8CAA8C,MAA9D,CAnFiB,CAmFoD;;AACrE,MAAI,aAAa,GAAG,wBAAwB,MAA5C;AACA,MAAI,cAAc,GAAG,kCAAkC,MAAvD;AAGA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACxD,cAAU,CACT;AACC,MAAA,OAAO,EAAE,EAAE,CAAC,kBAAkB,MAAnB,EAA2B,CAAC,cAAD,CAA3B,CADZ;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE;AAHT,KADS,EAMT;AACC,MAAA,OAAO,EAAE,EAAE,CAAC,mBAAmB,MAApB,EAA4B,CAAC,aAAD,CAA5B,CADZ;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE;AAHT,KANS,EAWT;AACC,MAAA,OAAO,EAAE,MAAM,CAAC,SAAD,CADhB;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,KAAK,EAAE;AAHR,KAXS,CAD8C;AAkBxD,kBAAc,CACb;AACH;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,qCAAqC,MAAtC,EAA8C,CAAC,UAAD,CAA9C,CAHZ;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AALT,KADa,EAQb;AACH;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,wCAAwC,MAAzC,EAAiD,CAAC,IAAD,EAAO,cAAP,CAAjD,CAHZ;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AALT,KARa,EAeb;AACH;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,4BAA4B,MAA7B,EAAqC,CAAC,IAAD,CAArC,CAHZ;AAIC,MAAA,UAAU,EAAE;AAJb,KAfa,EAqBb;AACH;AACA;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,oBAAoB,MAArB,EAA6B,CAAC,uBAAD,EAA0B,WAA1B,CAA7B,CAJZ;AAKC,MAAA,UAAU,EAAE,IALb;AAMC,MAAA,MAAM,EAAE;AANT,KArBa,EA6Bb;AACH;AACA;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,yBAAyB,MAA1B,EAAkC,CAAC,UAAD,CAAlC,CAJZ;AAKC,MAAA,UAAU,EAAE,IALb;AAMC,MAAA,MAAM,EAAE;AANT,KA7Ba,EAqCb;AACH;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,oBAAoB,MAArB,EAA6B,CAAC,IAAD,CAA7B,CAHZ;AAIC,MAAA,UAAU,EAAE;AAJb,KArCa,EA2Cb;AACH;AACA;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,mCAAmC,MAApC,EAA4C,CAAC,0BAAD,CAA5C,CAJZ;AAKC,MAAA,UAAU,EAAE,IALb;AAMC,MAAA,MAAM,EAAE;AANT,KA3Ca,EAmDb;AACH;AACA;AACI,MAAA,OAAO,EAAE,EAAE,CAAC,2EAA2E,MAA5E,EAAoF,CAAC,cAAD,EAAiB,qBAAjB,EAAwC,IAAxC,CAApF,CAHZ;AAIC,MAAA,MAAM,EAAE;AAJT,KAnDa,CAlB0C;AA4ExD,eAAW,QA5E6C;AA6E1D;AACE,cAAU,iJA9E8C;AA+ExD,gBAAY,sDA/E4C;AAgFxD,mBAAe;AAhFyC,GAAhC,CAAzB;AAmFA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAChD,aAAS;AACR,MAAA,OAAO,EAAE,MADD;AAER,MAAA,KAAK,EAAE;AAFC;AADuC,GAAjD;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,aAAvC,EAAsD;AACrD,uBAAmB;AAClB,MAAA,OAAO,EAAE,EAAE,CAAC,yBAAyB,MAA1B,EAAkC,CAAC,IAAD,CAAlC,CADO;AAElB,MAAA,UAAU,EAAE,IAFM;AAGlB,MAAA,KAAK,EAAE;AAHW;AADkC,GAAtD;AAQA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,YAAvC,EAAqD;AACpD,iBAAa;AACf;AACA;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,+DAA+D,MAAhE,EAAwE,CAAC,IAAD,CAAxE,CAHC;AAIZ,MAAA,UAAU,EAAE,IAJA;AAKZ,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALI,KADuC;AAUpD,uBAAmB;AACrB;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,kFAAkF,MAAnF,EAA2F,CAAC,WAAD,CAA3F,CAFO;AAGlB,MAAA,UAAU,EAAE,IAHM;AAIlB,MAAA,KAAK,EAAE,YAJW;AAKlB,MAAA,MAAM,EAAE;AALU,KAViC;AAiBpD,mBAAe;AACjB;AACA;AACA;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,+DAA+D,MAAhE,EAAwE,CAAC,cAAD,EAAiB,UAAjB,CAAxE,CAJG;AAKd,MAAA,MAAM,EAAE,UALM;AAMd,MAAA,KAAK,EAAE;AANO,KAjBqC;AAyBpD,8BAA0B;AAC5B;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,8BAA8B,MAA/B,EAAuC,CAAC,cAAD,CAAvC,CAFc;AAGzB,MAAA,UAAU,EAAE,IAHa;AAIzB,MAAA,MAAM,EAAE,UAJiB;AAKzB,MAAA,KAAK,EAAE;AALkB,KAzB0B;;AAgCtD;AACA;AACA;AACA;AACA;AACA;AACE,sBAAkB;AACpB;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,yBAAyB,MAA1B,EAAkC,CAAC,IAAD,EAAO,OAAP,CAAlC,CAFM;AAGjB,MAAA,MAAM,EAAE;AACP,oBAAY,EAAE,CAAC,SAAS,MAAV,EAAkB,CAAC,IAAD,CAAlB,CADP;AAEP,mBAAW;AACV,UAAA,OAAO,EAAE,MAAM,CAAC,OAAD,CADL;AAEV,UAAA,KAAK,EAAE,YAFG;AAGV,UAAA,MAAM,EAAE;AAHE;AAFJ;AAHS,KAtCkC;AAkDpD,iBAAa;AACf;AACA;AACA;AACG,MAAA,OAAO,EAAE,EAAE,CACV,kKAAkK,MADxJ,EAEV,CAAC,uBAAD,EAA0B,WAA1B,EAAuC,IAAvC,EAA6C,cAA7C,EAA6D,QAAQ,CAAC,MAAtE,EAA8E,WAA9E,EAA2F,kBAAkB,MAA7G,CAFU,CAJC;AAQZ,MAAA,UAAU,EAAE,IARA;AASZ,MAAA,MAAM,EAAE;AACP,4BAAoB;AACnB,UAAA,OAAO,EAAE,EAAE,CAAC,+BAA+B,MAAhC,EAAwC,CAAC,WAAD,EAAc,WAAd,CAAxC,CADQ;AAEnB,UAAA,UAAU,EAAE,IAFO;AAGnB,UAAA,MAAM,EAAE,IAHW;AAInB,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAJL,SADb;AAOP,mBAAW,QAPJ;AAQP,sBAAc;AACb,UAAA,OAAO,EAAE,MAAM,CAAC,cAAD,CADF;AAEb,UAAA,MAAM,EAAE,IAFK;AAGb,UAAA,MAAM,EAAE;AAHK,SARP;AAaP,uBAAe;AAbR;AATI,KAlDuC;AA2EpD,oBAAgB;AACf,MAAA,OAAO,EAAE,eADM;AAEf,MAAA,UAAU,EAAE,IAFG;AAGf,MAAA,KAAK,EAAE,UAHQ;AAIf,MAAA,MAAM,EAAE;AACX;AACI,qBAAa;AACZ,UAAA,OAAO,EAAE,gGADG;AAEZ,UAAA,UAAU,EAAE,IAFA;AAGZ,UAAA,KAAK,EAAE;AAHK;AAFN;AAJO;AA3EoC,GAArD,EA1LiB,CAoRlB;;AACC,MAAI,wBAAwB,GAAG,aAAa,GAAG,GAAhB,GAAsB,SAArD;AACA,MAAI,+BAA+B,GAAG,OAAO,CAAC,iEAAiE,MAAlE,EAA0E,CAAC,wBAAD,CAA1E,CAA7C;AACA,MAAI,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,+BAA+B,MAAhC,EAAwC,CAAC,+BAAD,CAAxC,CAAR,EAAoF,CAApF,CAA5B,CAvRiB,CAyRlB;;AACC,MAAI,UAAU,GAAG,wEAAwE,MAAzF;AACA,MAAI,IAAI,GAAG,OAAO,CAAC,0BAA0B,MAA3B,EAAmC,CAAC,UAAD,EAAa,eAAb,CAAnC,CAAlB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,YAAvC,EAAqD;AACpD,iBAAa;AACf;AACA;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,6EAA6E,MAA9E,EAAsF,CAAC,UAAD,EAAa,IAAb,CAAtF,CAHC;AAIZ,MAAA,UAAU,EAAE,IAJA;AAKZ,MAAA,MAAM,EAAE,IALI;AAMZ,MAAA,MAAM,EAAE;AACP,kBAAU;AACT,UAAA,OAAO,EAAE,EAAE,CAAC,iBAAiB,MAAlB,EAA0B,CAAC,UAAD,CAA1B,CADF;AAET,UAAA,KAAK,EAAE;AAFE,SADH;AAKP,+BAAuB;AACtB,UAAA,OAAO,EAAE,EAAE,CAAC,aAAa,MAAd,EAAsB,CAAC,eAAD,CAAtB,CADW;AAEtB,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFF,SALhB;AASP,sBAAc;AACb,UAAA,OAAO,EAAE,MAAM,CAAC,UAAD,CADF;AAEb,UAAA,MAAM,EAAE;AACP,2BAAe;AADR;AAFK,SATP;AAeP,uBAAe;AAfR;AANI;AADuC,GAArD,EA7RiB,CAyTlB;;AACC,MAAI,YAAY,GAAG,aAAa,MAAhC,CA1TiB,CA2TlB;;AACC,MAAI,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,+BAA+B,MAAhC,EAAwC,CAAC,+BAAD,CAAxC,CAAR,EAAoF,CAApF,CAAhC;AACA,MAAI,cAAc,GAAG,OAAO,CAAC,qCAAqC,MAAtC,EAA8C,CAAC,mBAAD,EAAsB,YAAtB,CAA9C,CAA5B,CA7TiB,CA8TlB;;AACC,MAAI,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,mEAAmE,MAApE,EAA4E,CAAC,wBAAD,CAA5E,CAAR,EAAiH,CAAjH,CAAhC;AACA,MAAI,cAAc,GAAG,OAAO,CAAC,qCAAqC,MAAtC,EAA8C,CAAC,mBAAD,EAAsB,YAAtB,CAA9C,CAA5B;;AAEA,WAAS,yBAAT,CAAmC,aAAnC,EAAkD,kBAAlD,EAAsE;AACrE,WAAO;AACN,uBAAiB;AAChB,QAAA,OAAO,EAAE,EAAE,CAAC,6BAA6B,MAA9B,EAAsC,CAAC,aAAD,CAAtC,CADK;AAEhB,QAAA,UAAU,EAAE,IAFI;AAGhB,QAAA,MAAM,EAAE;AACP,2BAAiB;AAChB,YAAA,OAAO,EAAE,EAAE,CAAC,sCAAsC,MAAvC,EAA+C,CAAC,kBAAD,EAAqB,YAArB,CAA/C,CADK;AAEhB,YAAA,UAAU,EAAE,IAFI;AAGhB,YAAA,MAAM,EAAE;AACP,6BAAe;AADR;AAHQ,WADV;AAQP,yBAAe,SARR;AASP,wBAAc;AACb,YAAA,OAAO,EAAE,SADI;AAEb,YAAA,KAAK,EAAE,iBAFM;AAGb,YAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHX;AATP;AAHQ,OADX;AAoBN,gBAAU;AApBJ,KAAP;AAsBA;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAChD,4BAAwB,CACvB;AACC,MAAA,OAAO,EAAE,EAAE,CAAC,4DAA4D,MAA7D,EAAqE,CAAC,cAAD,CAArE,CADZ;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE,yBAAyB,CAAC,cAAD,EAAiB,mBAAjB;AAJlC,KADuB,EAOvB;AACC,MAAA,OAAO,EAAE,EAAE,CAAC,4CAA4C,MAA7C,EAAqD,CAAC,cAAD,CAArD,CADZ;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE,yBAAyB,CAAC,cAAD,EAAiB,mBAAjB;AAJlC,KAPuB;AADwB,GAAjD;AAiBA,CA5WA,EA4WC,KA5WD,CAAD;;AA8WA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAA9D;;AC9WC,WAAU,KAAV,EAAiB;AAEjB,MAAI,MAAM,GAAG,6EAAb;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACrB,eAAW,kBADU;AAErB,cAAU;AACT,MAAA,OAAO,EAAE,gDADA;AAET,MAAA,MAAM,EAAE;AACP,gBAAQ,UADD;AAEP,sCAA8B;AAC7B,UAAA,OAAO,EAAE,2FADoB;AAE7B,UAAA,UAAU,EAAE,IAFiB;AAG7B,UAAA,KAAK,EAAE;AAHsB,SAFvB;AAOP,mBAAW;AACV,UAAA,OAAO,EAAE,wCADC;AAEV,UAAA,UAAU,EAAE;AAFF,SAPJ,CAWX;;AAXW;AAFC,KAFW;AAkBrB,WAAO;AACT;AACG,MAAA,OAAO,EAAE,MAAM,CAAC,iBAAiB,MAAM,CAAC,MAAxB,GAAiC,GAAjC,GAAuC,8BAA8B,MAArE,GAA8E,MAA/E,EAAuF,GAAvF,CAFT;AAGN,MAAA,MAAM,EAAE,IAHF;AAIN,MAAA,MAAM,EAAE;AACP,oBAAY,OADL;AAEP,uBAAe,SAFR;AAGP,kBAAU;AACT,UAAA,OAAO,EAAE,MAAM,CAAC,MAAM,MAAM,CAAC,MAAb,GAAsB,GAAvB,CADN;AAET,UAAA,KAAK,EAAE;AAFE;AAHH;AAJF,KAlBc;AA+BrB,gBAAY;AACX,MAAA,OAAO,EAAE,MAAM,CAAC,uDAAuD,MAAM,CAAC,MAA9D,GAAuE,eAAxE,CADJ;AAEX,MAAA,UAAU,EAAE;AAFD,KA/BS;AAmCrB,cAAU;AACT,MAAA,OAAO,EAAE,MADA;AAET,MAAA,MAAM,EAAE;AAFC,KAnCW;AAuCrB,gBAAY;AACX,MAAA,OAAO,EAAE,mFADE;AAEX,MAAA,UAAU,EAAE;AAFD,KAvCS;AA2CrB,iBAAa,eA3CQ;AA4CrB,gBAAY;AACX,MAAA,OAAO,EAAE,iCADE;AAEX,MAAA,UAAU,EAAE;AAFD,KA5CS;AAgDrB,mBAAe;AAhDM,GAAtB;AAmDA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,QAApB,EAA8B,MAA9B,CAAqC,IAArC,GAA4C,KAAK,CAAC,SAAN,CAAgB,GAA5D;AAEA,MAAI,MAAM,GAAG,KAAK,CAAC,SAAN,CAAgB,MAA7B;;AACA,MAAI,MAAJ,EAAY;AACX,IAAA,MAAM,CAAC,GAAP,CAAW,UAAX,CAAsB,OAAtB,EAA+B,KAA/B;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,YAAX,CAAwB,OAAxB,EAAiC,KAAjC;AACA;AAED,CA/DA,EA+DC,KA/DD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AACjB,MAAI,QAAQ,GAAG,CACd,0BADc,EAEd,4WAFc,CAAf,CADiB,CAMlB;;AACC,MAAI,aAAa,GAAG,uDAAuD,MAA3E,CAPiB,CASlB;;AACC,MAAI,SAAS,GAAG;AACf,IAAA,OAAO,EAAE,MAAM,CAAC,aAAa,GAAG,gCAAgC,MAAjD,CADA;AAEf,IAAA,UAAU,EAAE,IAFG;AAGf,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,0CADG;AAEZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAFI;AADN;AAHO,GAAhB;AAaA,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,cAAU,CACT;AACC,MAAA,OAAO,EAAE,uBADV;AAEC,MAAA,MAAM,EAAE;AAFT,KADS,EAKT;AACC,MAAA,OAAO,EAAE,oCADV;AAEC,MAAA,MAAM,EAAE;AAFT,KALS,CAD4C;AAWtD,kBAAc,CACb,SADa,EAEb;AACH;AACA;AACI,MAAA,OAAO,EAAE,MAAM,CAAC,aAAa,GAAG,+BAA+B,MAAhD,CAHhB;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE,SAAS,CAAC;AALnB,KAFa,CAXwC;AAqBtD,eAAW,QArB2C;AAsBtD,gBAAY;AAtB0C,GAAhC,CAAvB;AAyBA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD,gBAAY;AACX,MAAA,OAAO,EAAE,MADE;AAEX,MAAA,KAAK,EAAE;AAFI;AADoC,GAAjD;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AAClD,gBAAY;AACX,MAAA,OAAO,EAAE,qEADE;AAEX,MAAA,MAAM,EAAE;AACP,sBAAc,SADP;AAEP,mBAAW,QAFJ;AAGP,uBAAe,WAHR;AAIP,oBAAY;AAJL;AAFG;AADsC,GAAnD;AAWA,CAlEA,EAkEC,KAlED,CAAD,C,CCAA;AACA;;;AAEC,WAAU,KAAV,EAAiB;AAEjB,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,eAAW,kBADa;AAExB,WAAO;AACN,MAAA,OAAO,EAAE,mBADH;AAEN,MAAA,UAAU,EAAE,IAFN;AAGN,MAAA,KAAK,EAAE;AAHD,KAFiB;AAOxB,iBAAa;AACZ,MAAA,OAAO,EAAE,2BADG;AAEZ,MAAA,KAAK,EAAE;AAFK,KAPW;AAWxB,cAAU;AACT,MAAA,OAAO,EAAE,iCADA;AAET,MAAA,MAAM,EAAE;AAFC,KAXc;AAexB,cAAU;AACT,MAAA,OAAO,EAAE,SADA;AAET,MAAA,UAAU,EAAE,IAFH;AAGT,MAAA,KAAK,EAAE;AAHE,KAfc;AAoBxB,YAAQ;AACP,MAAA,OAAO,EAAE,kCADF;AAEP,MAAA,UAAU,EAAE,IAFL;AAGP,MAAA,KAAK,EAAE;AAHA,KApBgB;AAyBxB,gBAAY,uBAzBY;AA0BxB,eAAW,+EA1Ba;AA2BxB,gBAAY,mDA3BY;AA4BxB,cAAU,mBA5Bc;AA6BxB,eAAW,0BA7Ba;AA8BxB,gBAAY,UA9BY;AA+BxB,mBAAe;AA/BS,GAAzB;AAmCA,MAAI,OAAO,GAAG,iDAAd;AACA,MAAI,gBAAgB,GAAG,KAAK,CAAC,SAAN,CAAgB,mBAAhB,CAAvB;AAEA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAU,GAAV,EAAe;AACjD,IAAA,gBAAgB,CAAC,iBAAjB,CAAmC,GAAnC,EAAwC,QAAxC,EAAkD,OAAlD;AACA,GAFD;AAGA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,IAAA,gBAAgB,CAAC,oBAAjB,CAAsC,GAAtC,EAA2C,QAA3C;AACA,GAFD,EA3CiB,CA+ClB;;AACC,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,MAAzC;AACA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAU,GAAV,EAAe;AACjD,IAAA,gBAAgB,CAAC,iBAAjB,CAAmC,GAAnC,EAAwC,QAAxC,EAAkD,OAAlD;AACA,GAFD;AAGA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,IAAA,gBAAgB,CAAC,oBAAjB,CAAsC,GAAtC,EAA2C,QAA3C;AACA,GAFD;AAIA,CAxDA,EAwDC,KAxDD,CAAD;;ACHC,WAAU,KAAV,EAAiB;AAElB;AACA;AAEC,MAAI,mBAAmB,GAAG,sDAAsD,MAAhF,CALiB,CAMlB;;AACC,MAAI,KAAK,GAAG,0CAA0C,MAA1C,CACV,OADU,CACF,UADE,EACU,YAAY;AAAE,WAAO,mBAAP;AAA6B,GADrD,CAAZ;AAGA,MAAI,MAAM,GAAG,0EAA0E,MAAvF;AACA,MAAI,MAAM,GAAG,8CAA8C,MAA9C,CAAqD,OAArD,CAA6D,QAA7D,EAAuE,YAAY;AAAE,WAAO,MAAP;AAAgB,GAArG,CAAb;AAEA,MAAI,UAAU,GAAG;AAChB,IAAA,OAAO,EAAE,MAAM,CAAC,MAAD,CADC;AAEhB,IAAA,MAAM,EAAE;AAFQ,GAAjB;AAIA,MAAI,WAAW,GAAG;AACjB,IAAA,OAAO,EAAE,eADQ;AAEjB,IAAA,UAAU,EAAE,IAFK;AAGjB,IAAA,MAAM,EAAE;AAHS,GAAlB;AAMD;AACA;AACA;AACA;AACA;;AACC,WAAS,EAAT,CAAY,MAAZ,EAAoB,KAApB,EAA2B;AAC1B,IAAA,MAAM,GAAG,MAAM,CACb,OADO,CACC,QADD,EACW,YAAY;AAAE,aAAO,MAAP;AAAgB,KADzC,EAEP,OAFO,CAEC,OAFD,EAEU,YAAY;AAAE,aAAO,KAAP;AAAe,KAFvC,CAAT;AAIA,WAAO,MAAM,CAAC,MAAD,EAAS,KAAT,CAAb;AACA;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,mBAAe;AACd,MAAA,OAAO,EAAE,iNADK;AAEd,MAAA,UAAU,EAAE,IAFE;AAGd,MAAA,MAAM,EAAE,IAHM;AAId,MAAA,MAAM,EAAE;AACP,mBAAW;AACV,UAAA,OAAO,EAAE,EAAE,CAAC,gDAAgD,MAAjD,EAAyD,GAAzD,CADD;AAEV,UAAA,UAAU,EAAE,IAFF;AAGV,UAAA,MAAM,EAAE,IAHE;AAIV,UAAA,MAAM,EAAE;AACP,wBAAY;AACX,cAAA,OAAO,EAAE,gBADE;AAEX,cAAA,UAAU,EAAE;AAFD,aADL;AAKP,sBAAU,CACT,UADS,EAET;AACC,cAAA,OAAO,EAAE,6BADV;AAEC,cAAA,UAAU,EAAE;AAFb,aAFS,CALH;AAYP,wBAAY,MAZL;AAaP,2BAAe;AAbR;AAJE,SADJ;AAqBP,mBAAW,CACV;AACL;AACM,UAAA,OAAO,EAAE,EAAE,CAAC,iEAAiE,MAAlE,EAA0E,GAA1E,CAFZ;AAGC,UAAA,UAAU,EAAE,IAHb;AAIC,UAAA,MAAM,EAAE;AAJT,SADU,EAOV;AACL;AACM,UAAA,OAAO,EAAE,EAAE,CAAC,iEAAiE,MAAlE,EAA0E,GAA1E,CAFZ;AAGC,UAAA,UAAU,EAAE,IAHb;AAIC,UAAA,MAAM,EAAE;AAJT,SAPU,EAaV;AACL;AACM,UAAA,OAAO,EAAE,EAAE,CAAC,oBAAoB,MAArB,EAA6B,GAA7B,CAFZ;AAGC,UAAA,UAAU,EAAE,IAHb;AAIC,UAAA,MAAM,EAAE;AAJT,SAbU,EAmBV;AACC,UAAA,OAAO,EAAE,MADV;AAEC,UAAA,MAAM,EAAE;AAFT,SAnBU,CArBJ;AA6CP,mBAAW,WA7CJ;AA8CP,kBAAU,UA9CH;AA+CP,oBAAY,0BA/CL;AAgDP,oBAAY;AAhDL;AAJM,KADS;AAwDxB,eAAW;AAxDa,GAAzB;AA2DA,EAAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B,KAAK,CAAC,SAAN,CAAgB,MAA7C;AAEA,CAjGA,EAiGC,KAjGD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AAEjB,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACrB,iBAAa;AACZ,MAAA,OAAO,EAAE,oBADG;AAEZ,MAAA,KAAK,EAAE;AAFK,KADQ;AAKrB,eAAW,WALU;AAMrB,2BAAuB;AACtB,MAAA,OAAO,EAAE,SADa;AAEtB,MAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFF;AANF,GAAtB;AAYA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAU,GAAV,EAAe;AACjD,QAAI,UAAU,GAAG,oBAAjB;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,EAAqC,iBAArC,CAAuD,GAAvD,EAA4D,KAA5D,EAAmE,UAAnE;AACA,GAHD;AAKA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,IAAA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,EAAqC,oBAArC,CAA0D,GAA1D,EAA+D,KAA/D;AACA,GAFD;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,GAAtC;AAEA,CAzBA,EAyBC,KAzBD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,aAAW,KADa;AAExB,YAAU;AACT,IAAA,OAAO,EAAE,uBADA;AAET,IAAA,MAAM,EAAE;AAFC,GAFc;AAMxB,qBAAmB;AAClB,IAAA,OAAO,EAAE,6BADS;AAElB,IAAA,KAAK,EAAE;AAFW,GANK;AAUxB,iBAAe;AACd,IAAA,OAAO,EAAE,uBADK;AAEd,IAAA,KAAK,EAAE;AAFO,GAVS;AAcxB,aAAW,oBAda;AAexB,aAAW,yDAfa;AAgBxB,YAAU,CACT,QADS,EAET,kBAFS,EAGT,4CAHS,CAhBc;AAqBxB,cAAY,qBArBY;AAsBxB,cAAY;AACb;AACE,IAAA,OAAO,EAAE,+BAFE;AAGX,IAAA,UAAU,EAAE;AAHD,GAtBY;AA2BxB,cAAY,CACX,8GADW,EAEX;AACF;AACG,IAAA,OAAO,EAAE,gBAFV;AAGC,IAAA,UAAU,EAAE;AAHb,GAFW,EAOX;AACF;AACG,IAAA,OAAO,EAAE,gBAFV;AAGC,IAAA,UAAU,EAAE;AAHb,GAPW,CA3BY;AAwCxB,UAAQ,eAxCgB;AAyCxB,iBAAe;AAzCS,CAAzB;ACAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,aAAW,OAVU;;AAYtB;AACA;AACA;AACC,aAAW,UAfU;AAgBrB,cAAY,QAhBS;;AAkBtB;AACA;AACA;AACC,YAAU,kCArBW;;AAuBtB;AACA;AACA;AACA;AACA;AACC,aAAW;AACV,IAAA,OAAO,EAAE,gBADC;AAEV,IAAA,MAAM,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACG,mBAAa;AAPN;AAFE,GA5BU;;AAyCtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,WAtDY;;AAwDtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe;AAlEM,CAAtB;ACAA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACpD,YAAU;AACT,IAAA,OAAO,EAAE,oCADA;AAET,IAAA,MAAM,EAAE;AAFC,GAD0C;AAKpD,aAAW,qKALyC;AAMpD,aAAW,+BANyC;AAOpD,YAAU,+DAP0C;AAQpD,cAAY,uFARwC;AASpD,aAAW;AATyC,CAAhC,CAArB;AAWA,OAAO,KAAK,CAAC,SAAN,CAAgB,EAAhB,CAAmB,YAAnB,CAAP;ACXA,KAAK,CAAC,SAAN,CAAgB,OAAhB,GAA0B;AACzB,aAAW,KADc;AAEzB,iBAAe;AACd,IAAA,OAAO,EAAE,kEADK;AAEd,IAAA,MAAM,EAAE,IAFM;AAGd,IAAA,KAAK,EAAE,QAHO;AAId,IAAA,MAAM,EAAE;AACP,2BAAqB;AACpB,QAAA,OAAO,EAAE,iCADW;AAEpB,QAAA,UAAU,EAAE,IAFQ;AAGpB,QAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHJ;AADd;AAJM,GAFU;AAczB,YAAU;AACT,IAAA,OAAO,EAAE,gDADA;AAET,IAAA,MAAM,EAAE;AAFC,GAde;AAkBzB,YAAU,0CAlBe;AAmBzB,aAAW,oBAnBc;AAoBzB,cAAY,cApBa;AAqBzB,eAAa;AACZ,IAAA,OAAO,EAAE,aADG;AAEZ,IAAA,KAAK,EAAE;AAFK,GArBY;AAyBzB,eAAa;AACZ,IAAA,OAAO,EAAE,8DADG;AAEZ,IAAA,MAAM,EAAE;AAFI,GAzBY;AA6BzB,gBAAc;AACb,IAAA,OAAO,EAAE,yBADI;AAEb,IAAA,KAAK,EAAE;AAFM,GA7BW;AAiCzB,YAAU,qCAjCe;AAkCzB,cAAY,oBAlCa;AAmCzB,gBAAc;AACb,IAAA,OAAO,EAAE,iFADI;AAEb,IAAA,UAAU,EAAE;AAFC,GAnCW;AAuCzB,cAAY;AACX,IAAA,OAAO,EAAE,8CADE;AAEX,IAAA,UAAU,EAAE,IAFD;AAGX,IAAA,KAAK,EAAE;AAHI,GAvCa;AA4CzB,yBAAuB;AACtB,IAAA,OAAO,EAAE,6BADa;AAEtB,IAAA,UAAU,EAAE,IAFU;AAGtB,IAAA,KAAK,EAAE;AAHe,GA5CE;AAiDzB,sBAAoB;AACnB,IAAA,OAAO,EAAE,0BADU;AAEnB,IAAA,UAAU,EAAE,IAFO;AAGnB,IAAA,KAAK,EAAE;AAHY,GAjDK;AAsDzB,aAAW,sIAtDc;AAuDzB,cAAY,cAvDa;AAwDzB,oBAAkB,cAxDO;AAyDzB,YAAU,cAzDe;AA0DzB,iBAAe,gBA1DU;AA2DzB,cAAY;AA3Da,CAA1B;AA8DA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACpE,MAAI,GAAG,CAAC,QAAJ,KAAiB,SAArB,EAAgC;AAC/B;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;;;AACC,MAAI,WAAW,GAAG,GAAG,CAAC,MAAJ,CAAW,MAAX,CAAkB,UAAU,KAAV,EAAiB;AACpD,WAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,CAAC,IAAN,KAAe,SAA5C,IAAyD,KAAK,CAAC,IAAN,KAAe,QAA/E;AACA,GAFiB,CAAlB;AAIA,MAAI,YAAY,GAAG,CAAnB;AAED;AACA;AACA;AACA;AACA;AACA;;AACC,WAAS,QAAT,CAAkB,MAAlB,EAA0B;AACzB,WAAO,WAAW,CAAC,YAAY,GAAG,MAAhB,CAAlB;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAS,WAAT,CAAqB,KAArB,EAA4B,MAA5B,EAAoC;AACnC,IAAA,MAAM,GAAG,MAAM,IAAI,CAAnB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACtC,UAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAL,CAApB;;AACA,UAAI,CAAC,KAAD,IAAU,KAAK,CAAC,IAAN,KAAe,KAAK,CAAC,CAAD,CAAlC,EAAuC;AACtC,eAAO,KAAP;AACA;AACD;;AACD,WAAO,IAAP;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAS,kBAAT,CAA4B,IAA5B,EAAkC,KAAlC,EAAyC;AACxC,QAAI,WAAW,GAAG,CAAlB;;AAEA,SAAK,IAAI,CAAC,GAAG,YAAb,EAA2B,CAAC,GAAG,WAAW,CAAC,MAA3C,EAAmD,CAAC,EAApD,EAAwD;AACvD,UAAI,KAAK,GAAG,WAAW,CAAC,CAAD,CAAvB;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,OAApB;;AAEA,UAAI,KAAK,CAAC,IAAN,KAAe,aAAf,IAAgC,OAAO,OAAP,KAAmB,QAAvD,EAAiE;AAChE,YAAI,IAAI,CAAC,IAAL,CAAU,OAAV,CAAJ,EAAwB;AACvB,UAAA,WAAW;AACX,SAFD,MAEO,IAAI,KAAK,CAAC,IAAN,CAAW,OAAX,CAAJ,EAAyB;AAC/B,UAAA,WAAW;;AAEX,cAAI,WAAW,KAAK,CAApB,EAAuB;AACtB,mBAAO,CAAP;AACA;AACD;AACD;AACD;;AAED,WAAO,CAAC,CAAR;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC;AAC/B,QAAI,OAAO,GAAG,KAAK,CAAC,KAApB;;AACA,QAAI,CAAC,OAAL,EAAc;AACb,MAAA,KAAK,CAAC,KAAN,GAAc,OAAO,GAAG,EAAxB;AACA,KAFD,MAEO,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAL,EAA6B;AACnC,MAAA,KAAK,CAAC,KAAN,GAAc,OAAO,GAAG,CAAC,OAAD,CAAxB;AACA;;AACD,IAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AACA;;AAED,SAAO,YAAY,GAAG,WAAW,CAAC,MAAlC,GAA2C;AAC1C,QAAI,UAAU,GAAG,WAAW,CAAC,YAAY,EAAb,CAA5B,CAD0C,CAG5C;;AACE,QAAI,UAAU,CAAC,IAAX,KAAoB,SAApB,IAAiC,UAAU,CAAC,OAAX,KAAuB,UAA5D,EAAwE;AAC1E;AACG,UAAI,cAAc,GAAG,EAArB;;AAEA,UAAI,WAAW,CAAC,CAAC,qBAAD,EAAwB,aAAxB,CAAD,CAAX,IAAuD,QAAQ,CAAC,CAAD,CAAR,CAAY,OAAZ,KAAwB,GAAnF,EAAwF;AAC3F;AAEI,QAAA,YAAY,IAAI,CAAhB,CAHuF,CAGrE;;AAElB,YAAI,aAAa,GAAG,kBAAkB,CAAC,MAAD,EAAS,MAAT,CAAtC;;AACA,YAAI,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACzB;AACA,SARsF,CAU3F;;;AACI,eAAO,YAAY,GAAG,aAAtB,EAAqC,YAAY,EAAjD,EAAqD;AACpD,cAAI,CAAC,GAAG,QAAQ,CAAC,CAAD,CAAhB;;AACA,cAAI,CAAC,CAAC,IAAF,KAAW,UAAf,EAA2B;AAC1B,YAAA,QAAQ,CAAC,CAAD,EAAI,gBAAJ,CAAR;AACA,YAAA,cAAc,CAAC,IAAf,CAAoB,CAAC,CAAC,OAAtB;AACA;AACD;;AAED,QAAA,YAAY,GAAG,aAAa,GAAG,CAA/B;AACA;;AAED,UAAI,WAAW,CAAC,CAAC,aAAD,EAAgB,gBAAhB,CAAD,CAAX,IAAkD,QAAQ,CAAC,CAAD,CAAR,CAAY,OAAZ,KAAwB,GAA9E,EAAmF;AAClF,QAAA,YAAY,GADsE,CACnE;;AAEf,QAAA,QAAQ,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,mBAAd,CAAR;;AAEA,YAAI,cAAc,CAAC,MAAf,GAAwB,CAA5B,EAA+B;AAC9B,cAAI,WAAW,GAAG,kBAAkB,CAAC,MAAD,EAAS,MAAT,CAApC;;AACA,cAAI,WAAW,KAAK,CAAC,CAArB,EAAwB;AACvB;AACA,WAJ6B,CAMnC;;;AACK,eAAK,IAAI,CAAC,GAAG,YAAb,EAA2B,CAAC,GAAG,WAA/B,EAA4C,CAAC,EAA7C,EAAiD;AAChD,gBAAI,QAAQ,GAAG,WAAW,CAAC,CAAD,CAA1B;;AACA,gBAAI,QAAQ,CAAC,IAAT,KAAkB,UAAlB,IAAgC,cAAc,CAAC,OAAf,CAAuB,QAAQ,CAAC,OAAhC,KAA4C,CAAhF,EAAmF;AAClF,cAAA,QAAQ,CAAC,QAAD,EAAW,gBAAX,CAAR;AACA;AACD;AACD;AACD;AACD;AACD;AACD,CApJD;AC9DA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACxD,YAAU,CACT;AACF;AACG,IAAA,OAAO,EAAE,iFAFV;AAGC,IAAA,MAAM,EAAE;AAHT,GADS,EAMT;AACF;AACA;AACG,IAAA,OAAO,EAAE,mCAHV;AAIC,IAAA,MAAM,EAAE;AAJT,GANS,CAD8C;AAcxD,aAAW,4WAd6C;AAexD,YAAU,4FAf8C;AAgBxD,cAAY;AACX,IAAA,OAAO,EAAE,mJADE;AAEX,IAAA,UAAU,EAAE;AAFD,GAhB4C;AAoBxD,iBAAe;AApByC,CAAhC,CAAzB;AAuBA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAChD,aAAW;AACV,IAAA,OAAO,EAAE,MADC;AAEV,IAAA,KAAK,EAAE;AAFG;AADqC,CAAjD;AAOA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,aAAvC,EAAsD;AACrD,iBAAe;AADsC,CAAtD;AAIA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,UAAvC,EAAmD;AAClD,gBAAc;AACb,IAAA,OAAO,EAAE,cADI;AAEb,IAAA,UAAU,EAAE,IAFC;AAGb,IAAA,KAAK,EAAE;AAHM;AADoC,CAAnD,E,CAQA;;AACA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACtC,MAAI,GAAG,CAAC,QAAJ,KAAiB,QAAjB,IAA6B,GAAG,CAAC,IAAJ,KAAa,QAA9C,EAAwD;AACvD,QAAI,SAAS,GAAG,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAhB;;AAEA,QAAI,SAAS,IAAI,GAAjB,EAAsB;AACrB,UAAI,OAAO,GAAG,iCAAd;;AACA,UAAI,SAAS,KAAK,GAAlB,EAAuB;AACtB,QAAA,OAAO,GAAG,iCAAV;AACA,OAJoB,CAMxB;;;AACG,MAAA,GAAG,CAAC,OAAJ,GAAc,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,EAAkC,OAAlC,CAA0C,QAA1C,EAAoD,GAApD,CAAd;AAEA,MAAA,GAAG,CAAC,OAAJ,GAAc,KAAK,CAAC,SAAN,CAAgB,GAAG,CAAC,OAApB,EAA6B;AAC1C,sBAAc;AACb,UAAA,OAAO,EAAE,OADI;AAEb,UAAA,UAAU,EAAE,IAFC;AAGb,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHX;AAD4B,OAA7B,CAAd;AAQA,MAAA,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,SAAS,KAAK,GAAd,GAAoB,OAApB,GAA8B,SAA/C;AACA;AACD;AACD,CAxBD;;AC3CC,WAAU,KAAV,EAAiB;AAEjB,MAAI,QAAQ,GAAG,gdAAf,CAFiB,CAIlB;;AACC,MAAI,eAAe,GAAG,uDAAuD,MAA7E,CALiB,CAOlB;;AACC,MAAI,SAAS,GAAG;AACf,IAAA,OAAO,EAAE,MAAM,CAAC,eAAe,GAAG,gCAAgC,MAAnD,CADA;AAEf,IAAA,UAAU,EAAE,IAFG;AAGf,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,0CADG;AAEZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAFI,OADN;AAOP,qBAAe;AAPR;AAHO,GAAhB;AAcA,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,kBAAc,CACb,SADa,EAEb;AACH;AACA;AACI,MAAA,OAAO,EAAE,MAAM,CAAC,eAAe,GAAG,+BAA+B,MAAlD,CAHhB;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE,SAAS,CAAC;AALnB,KAFa,CADwC;AAWtD,eAAW,QAX2C;AAYtD,gBAAY,CACX,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,QADX,EAEX;AACC,MAAA,OAAO,EAAE,kBADV;AAEC,MAAA,UAAU,EAAE;AAFb,KAFW,CAZ0C;AAmBtD,cAAU,6IAnB4C;AAoBtD,gBAAY;AACX,MAAA,OAAO,EAAE,uEADE;AAEX,MAAA,UAAU,EAAE;AAFD;AApB0C,GAAhC,CAAvB;AA0BA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C,4BAAwB;AAC1B;AACG,MAAA,OAAO,EAAE,gDAFc;AAGvB,MAAA,MAAM,EAAE,IAHe;AAIvB,MAAA,KAAK,EAAE;AAJgB;AADsB,GAA/C;AASA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AAClD,kBAAc;AACb,MAAA,OAAO,EAAE,8BADI;AAEb,MAAA,UAAU,EAAE,IAFC;AAGb,MAAA,KAAK,EAAE;AAHM,KADoC;AAMlD,gBAAY;AACX,MAAA,OAAO,EAAE,iGADE;AAEX,MAAA,MAAM,EAAE;AACP,sBAAc,SADP;AAEP,mBAAW,QAFJ;AAGP,uBAAe,WAHR;AAIP,oBAAY;AAJL;AAFG,KANsC;AAelD,iBAAa;AACZ,MAAA,OAAO,EAAE,MAAM,CACd,qJACE,MADF,CACS,OADT,CACiB,YADjB,EAC+B,YAAY;AAAE,eAAO,QAAQ,CAAC,MAAhB;AAAyB,OADtE,CADc,CADH;AAIZ,MAAA,UAAU,EAAE,IAJA;AAKZ,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALI;AAfqC,GAAnD;AAyBA,CAlFA,EAkFC,KAlFD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AAC5D,gBAAc,CACb,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,YAAtB,CADa,EAEb;AACC,IAAA,OAAO,EAAE,yGADV;AAEC,IAAA,UAAU,EAAE;AAFb,GAFa,CAD8C;AAQ5D,aAAW,CACV;AACC,IAAA,OAAO,EAAE,sBADV;AAEC,IAAA,UAAU,EAAE;AAFb,GADU,EAKV;AACC,IAAA,OAAO,EAAE,kdADV;AAEC,IAAA,UAAU,EAAE;AAFb,GALU,CARiD;AAkB7D;AACC,cAAY,mGAnBgD;AAoB5D,YAAU,+NApBkD;AAqB5D,cAAY;AArBgD,CAAhC,CAA7B;AAwBA,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,YAA3B,EAAyC,CAAzC,EAA4C,OAA5C,GAAsD,sEAAtD;AAEA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,YAA7B,EAA2C,SAA3C,EAAsD;AACrD,WAAS;AACV;AACE,IAAA,OAAO,EAAE,wLAFD;AAGR,IAAA,UAAU,EAAE,IAHJ;AAIR,IAAA,MAAM,EAAE,IAJA;AAKR,IAAA,MAAM,EAAE;AACP,sBAAgB;AACf,QAAA,OAAO,EAAE,2BADM;AAEf,QAAA,UAAU,EAAE,IAFG;AAGf,QAAA,KAAK,EAAE,gBAHQ;AAIf,QAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAJT,OADT;AAOP,yBAAmB,SAPZ;AAQP,qBAAe;AARR;AALA,GAD4C;AAiBtD;AACC,uBAAqB;AACpB,IAAA,OAAO,EAAE,+LADW;AAEpB,IAAA,KAAK,EAAE;AAFa,GAlBgC;AAsBrD,eAAa,CACZ;AACC,IAAA,OAAO,EAAE,qIADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHzB,GADY,EAMZ;AACC,IAAA,OAAO,EAAE,oFADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHzB,GANY,EAWZ;AACC,IAAA,OAAO,EAAE,iEADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHzB,GAXY,EAgBZ;AACC,IAAA,OAAO,EAAE,6eADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHzB,GAhBY,CAtBwC;AA4CrD,cAAY;AA5CyC,CAAtD;AA+CA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;AACpD,cAAY;AACX,IAAA,OAAO,EAAE,OADE;AAEX,IAAA,MAAM,EAAE,IAFG;AAGX,IAAA,KAAK,EAAE;AAHI,GADwC;AAMpD,qBAAmB;AAClB,IAAA,OAAO,EAAE,0EADS;AAElB,IAAA,MAAM,EAAE,IAFU;AAGlB,IAAA,MAAM,EAAE;AACP,8BAAwB;AACvB,QAAA,OAAO,EAAE,OADc;AAEvB,QAAA,KAAK,EAAE;AAFgB,OADjB;AAKP,uBAAiB;AAChB,QAAA,OAAO,EAAE,kEADO;AAEhB,QAAA,UAAU,EAAE,IAFI;AAGhB,QAAA,MAAM,EAAE;AACP,uCAA6B;AAC5B,YAAA,OAAO,EAAE,WADmB;AAE5B,YAAA,KAAK,EAAE;AAFqB,WADtB;AAKP,UAAA,IAAI,EAAE,KAAK,CAAC,SAAN,CAAgB;AALf;AAHQ,OALV;AAgBP,gBAAU;AAhBH;AAHU;AANiC,CAArD;;AA8BA,IAAI,KAAK,CAAC,SAAN,CAAgB,MAApB,EAA4B;AAC3B,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,UAA3B,CAAsC,QAAtC,EAAgD,YAAhD,EAD2B,CAG5B;AACA;;AACC,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,YAA3B,CACC,yNAAyN,MAD1N,EAEC,YAFD;AAIA;;AAED,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,UAArC,C,CClHA;;AACA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB;AACtB,cAAY;AACX,IAAA,OAAO,EAAE,wCADE;AAEX,IAAA,UAAU,EAAE,IAFD;AAGX,IAAA,MAAM,EAAE;AAHG,GADU;AAMtB,YAAU;AACT,IAAA,OAAO,EAAE,wCADA;AAET,IAAA,UAAU,EAAE,IAFH;AAGT,IAAA,MAAM,EAAE;AAHC,GANY;AAWtB,aAAW;AACV,IAAA,OAAO,EAAE,+BADC;AAEV,IAAA,MAAM,EAAE;AAFE,GAXW;AAetB,YAAU,oCAfY;AAgBtB,iBAAe,UAhBO;AAiBtB,cAAY,GAjBU;AAkBtB,aAAW,oBAlBW;AAmBtB,UAAQ;AACP,IAAA,OAAO,EAAE,UADF;AAEP,IAAA,KAAK,EAAE;AAFA;AAnBc,CAAvB;AAyBA,KAAK,CAAC,SAAN,CAAgB,WAAhB,GAA8B,KAAK,CAAC,SAAN,CAAgB,IAA9C;;AC1BC,WAAU,KAAV,EAAiB;AAEjB,MAAI,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAiB,KAAK,CAAC,SAAN,CAAgB,UAAjC,CAAjB;AAEA,MAAI,KAAK,GAAG,+CAA+C,MAA3D;AACA,MAAI,MAAM,GAAG,+CAA+C,MAA5D;AACA,MAAI,MAAM,GAAG,uCAAuC,MAApD;AAED;AACA;AACA;AACA;;AACC,WAAS,EAAT,CAAY,MAAZ,EAAoB,KAApB,EAA2B;AAC1B,IAAA,MAAM,GAAG,MAAM,CACb,OADO,CACC,MADD,EACS,YAAY;AAAE,aAAO,KAAP;AAAe,KADtC,EAEP,OAFO,CAEC,WAFD,EAEc,YAAY;AAAE,aAAO,MAAP;AAAgB,KAF5C,EAGP,OAHO,CAGC,WAHD,EAGc,YAAY;AAAE,aAAO,MAAP;AAAgB,KAH5C,CAAT;AAIA,WAAO,MAAM,CAAC,MAAD,EAAS,KAAT,CAAb;AACA;;AAED,EAAA,MAAM,GAAG,EAAE,CAAC,MAAD,CAAF,CAAW,MAApB;AAGA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,QAAvB,EAAiC,UAAjC,CAAtB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAApB,CAAwB,OAAxB,GAAkC,EAAE,CACnC,wIAAwI,MADrG,CAApC;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAApB,CAAwB,MAAxB,CAA+B,KAA/B,EAAsC,OAAtC,GAAgD,iBAAhD;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAApB,CAAwB,MAAxB,CAA+B,YAA/B,EAA6C,OAA7C,GAAuD,qEAAvD;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAApB,CAAwB,MAAxB,CAA+B,KAA/B,EAAsC,MAAtC,CAA6C,YAA7C,IAA6D,2BAA7D;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAApB,CAAwB,MAAxB,CAA+B,SAA/B,IAA4C,UAAU,CAAC,SAAD,CAAtD;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,WAAvC,EAAoD;AACnD,cAAU;AACT,MAAA,OAAO,EAAE,EAAE,CAAC,WAAW,MAAZ,CADF;AAET,MAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFf;AADyC,GAApD,EAKG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GALvB;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,cAAvC,EAAuD;AACtD,cAAU;AACZ;AACG,MAAA,OAAO,EAAE,EAAE,CAAC,YAAY,MAAb,CAFF;AAGT,MAAA,MAAM,EAAE;AACP,8BAAsB;AACrB,UAAA,OAAO,EAAE,UADY;AAErB,UAAA,KAAK,EAAE;AAFc,SADf;AAKP,QAAA,IAAI,EAAE,KAAK,CAAC,SAAN,CAAgB;AALf,OAHC;AAUT,eAAS;AAVA;AAD4C,GAAvD,EAaG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAbvB,EAxCiB,CAuDlB;;AACC,MAAI,cAAc,GAAG,UAAU,KAAV,EAAiB;AACrC,QAAI,CAAC,KAAL,EAAY;AACX,aAAO,EAAP;AACA;;AACD,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,aAAO,KAAP;AACA;;AACD,QAAI,OAAO,KAAK,CAAC,OAAb,KAAyB,QAA7B,EAAuC;AACtC,aAAO,KAAK,CAAC,OAAb;AACA;;AACD,WAAO,KAAK,CAAC,OAAN,CAAc,GAAd,CAAkB,cAAlB,EAAkC,IAAlC,CAAuC,EAAvC,CAAP;AACA,GAXD;;AAaA,MAAI,UAAU,GAAG,UAAU,MAAV,EAAkB;AAClC,QAAI,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACvC,UAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAlB;AACA,UAAI,cAAc,GAAG,KAArB;;AAEA,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,YAAI,KAAK,CAAC,IAAN,KAAe,KAAf,IAAwB,KAAK,CAAC,OAAN,CAAc,CAAd,CAAxB,IAA4C,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,IAAjB,KAA0B,KAA1E,EAAiF;AACrF;AAEK,cAAI,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,OAAjB,CAAyB,CAAzB,EAA4B,OAA5B,KAAwC,IAA5C,EAAkD;AACvD;AACM,gBAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,OAAlC,KAA8C,cAAc,CAAC,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,OAAjB,CAAyB,CAAzB,CAAD,CAAzF,EAAwH;AAC9H;AACO,cAAA,UAAU,CAAC,GAAX;AACA;AACD,WAND,MAMO;AACN,gBAAI,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,OAAN,CAAc,MAAd,GAAuB,CAArC,EAAwC,OAAxC,KAAoD,IAAxD,EAA8D,CAA9D,KAEO;AACb;AACO,cAAA,UAAU,CAAC,IAAX,CAAgB;AACf,gBAAA,OAAO,EAAE,cAAc,CAAC,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,OAAjB,CAAyB,CAAzB,CAAD,CADR;AAEf,gBAAA,YAAY,EAAE;AAFC,eAAhB;AAIA;AACD;AACD,SApBD,MAoBO,IAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,KAAK,CAAC,IAAN,KAAe,aAAxC,IAAyD,KAAK,CAAC,OAAN,KAAkB,GAA/E,EAAoF;AAE/F;AACK,UAAA,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,YAAlC;AAEA,SALM,MAKA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,YAAlC,GAAiD,CAA1E,IAA+E,KAAK,CAAC,IAAN,KAAe,aAA9F,IAA+G,KAAK,CAAC,OAAN,KAAkB,GAArI,EAA0I;AAErJ;AACK,UAAA,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,YAAlC;AAEA,SALM,MAKA;AACN,UAAA,cAAc,GAAG,IAAjB;AACA;AACD;;AACD,UAAI,cAAc,IAAI,OAAO,KAAP,KAAiB,QAAvC,EAAiD;AAChD,YAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,YAAlC,KAAmD,CAAhF,EAAmF;AACvF;AACA;AACK,cAAI,SAAS,GAAG,cAAc,CAAC,KAAD,CAA9B,CAHkF,CAKvF;;AACK,cAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAApB,KAA0B,OAAO,MAAM,CAAC,CAAC,GAAG,CAAL,CAAb,KAAyB,QAAzB,IAAqC,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,IAAd,KAAuB,YAAtF,CAAJ,EAAyG;AACxG,YAAA,SAAS,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,CAAL,CAAP,CAA3B;AACA,YAAA,MAAM,CAAC,MAAP,CAAc,CAAC,GAAG,CAAlB,EAAqB,CAArB;AACA;;AACD,cAAI,CAAC,GAAG,CAAJ,KAAU,OAAO,MAAM,CAAC,CAAC,GAAG,CAAL,CAAb,KAAyB,QAAzB,IAAqC,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,IAAd,KAAuB,YAAtE,CAAJ,EAAyF;AACxF,YAAA,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,CAAL,CAAP,CAAd,GAAgC,SAA5C;AACA,YAAA,MAAM,CAAC,MAAP,CAAc,CAAC,GAAG,CAAlB,EAAqB,CAArB;AACA,YAAA,CAAC;AACD;;AAED,UAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI,KAAK,CAAC,KAAV,CAAgB,YAAhB,EAA8B,SAA9B,EAAyC,IAAzC,EAA+C,SAA/C,CAAZ;AACA;AACD;;AAED,UAAI,KAAK,CAAC,OAAN,IAAiB,OAAO,KAAK,CAAC,OAAb,KAAyB,QAA9C,EAAwD;AACvD,QAAA,UAAU,CAAC,KAAK,CAAC,OAAP,CAAV;AACA;AACD;AACD,GAlED;;AAoEA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,QAAI,GAAG,CAAC,QAAJ,KAAiB,KAAjB,IAA0B,GAAG,CAAC,QAAJ,KAAiB,KAA/C,EAAsD;AACrD;AACA;;AACD,IAAA,UAAU,CAAC,GAAG,CAAC,MAAL,CAAV;AACA,GALD;AAOA,CAhJA,EAgJC,KAhJD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AACjB,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACxD,eAAW;AACb;AACG,MAAA,OAAO,EAAE,0bAFC;AAGV,MAAA,UAAU,EAAE;AAHF,KAD6C;AAMxD,gBAAY,CACX;AACC,MAAA,OAAO,EAAE,gCADV;AAEC,MAAA,MAAM,EAAE;AAFT,KADW,EAKX;AACC,MAAA,OAAO,EAAE,kCADV;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE;AAHT,KALW,CAN4C;AAiBxD,cAAU,iIAjB8C;AAkBxD,gBAAY;AAlB4C,GAAhC,CAAzB;AAqBA,SAAO,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,YAAvB,CAAP;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAChD,kBAAc;AACb,MAAA,OAAO,EAAE,qBADI;AAEb,MAAA,KAAK,EAAE,QAFM,CAGhB;;AAHgB;AADkC,GAAjD;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;AACjD,kBAAc;AACb,MAAA,OAAO,EAAE,qCADI;AAEb,MAAA,KAAK,EAAE;AAFM;AADmC,GAAlD;AAMA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,QAA7B,EAAuC,UAAvC,EAAmD;AAClD,aAAS;AACR,MAAA,OAAO,EAAE,eADD;AAER,MAAA,KAAK,EAAE;AAFC;AADyC,GAAnD;AAOA,MAAI,aAAa,GAAG,CACnB;AACC,IAAA,OAAO,EAAE,aADV;AAEC,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,WADG;AAEZ,QAAA,KAAK,EAAE;AAFK,OADN;AAKP,MAAA,IAAI,EAAE,KAAK,CAAC,SAAN,CAAgB;AALf;AAFT,GADmB,EAWnB;AACC,IAAA,OAAO,EAAE,OADV;AAEC,IAAA,KAAK,EAAE;AAFR,GAXmB,CAApB;AAiBA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,QAAvB,EAAiC,MAAjC,GAA0C,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,YAAvB,EAAqC,MAArC,GAA8C;AACvF,IAAA,aAAa,EAAE;AADwE,GAAxF;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAArC;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,MAAtC;AACA,CAnEA,EAmEC,KAnED,CAAD;;ACAC,WAAU,KAAV,EAAiB;AACjB,MAAI,WAAW,GAAG,4BAAlB;AACA,MAAI,SAAS,GAAG;AACf,wBAAoB;AACnB,MAAA,OAAO,EAAE,WADU;AAEnB,MAAA,KAAK,EAAE;AAFY;AADL,GAAhB;AAOA,EAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB,GAAwB;AACvB,eAAW,MADY;AAEzB;AACE,aAAS;AACR,MAAA,OAAO,EAAE,kEADD;AAER,MAAA,UAAU,EAAE;AAFJ,KAHc;;AAOzB;AACA;AACA;AACA;AACE,gBAAY,CACX;AACC,MAAA,OAAO,EAAE,yFADV;AAEC,MAAA,MAAM,EAAE,SAFT;AAGC,MAAA,KAAK,EAAE;AAHR,KADW,EAMX;AACC,MAAA,OAAO,EAAE,2FADV;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,SAHT;AAIC,MAAA,KAAK,EAAE;AAJR,KANW,CAXW;;AAwBzB;AACA;AACA;AACA;AACE,eAAW;AACV,MAAA,OAAO,EAAE,uFADC;AAEV,MAAA,UAAU,EAAE;AAFF,KA5BY;AAgCvB,WAAO;AACN,MAAA,OAAO,EAAE,sBADH;AAEN,MAAA,UAAU,EAAE;AAFN,KAhCgB;;AAoCzB;AACA;AACA;AACA;AACE,gBAAY;AACX,MAAA,OAAO,EAAE,2JADE;AAEX,MAAA,UAAU,EAAE,IAFD;AAGX,MAAA,KAAK,EAAE;AAHI,KAxCW;AA6CvB,gBAAY;AACX,MAAA,OAAO,EAAE,WADE;AAEX,MAAA,KAAK,EAAE;AAFI,KA7CW;AAiDvB,mBAAe;AAjDQ,GAAxB;AAoDA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,KAAtC;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,OAAhB,GAA0B,KAAK,CAAC,SAAN,CAAgB,KAA1C;AACA,CA/DA,EA+DC,KA/DD,CAAD;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B;AACpD,aAAW,CACV,kBADU,EAEV;AACC,IAAA,OAAO,EAAE,iBADV;AAEC,IAAA,UAAU,EAAE;AAFb,GAFU,CADyC;AAQpD,YAAU;AACT,IAAA,OAAO,EAAE,yEADA;AAET,IAAA,MAAM,EAAE;AACP,qBAAe;AADR;AAFC,GAR0C;AAcrD;AACC,cAAY;AACX,IAAA,OAAO,EAAE,yGADE;AAEX,IAAA,MAAM,EAAE;AACV;AACG,kBAAY;AAFL;AAFG,GAfwC;AAuBpD,cAAY,0CAvBwC;AAwBpD,cAAY;AAxBwC,CAA9B,CAAvB;AA2BA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD,cAAY,CACb;AACE;AACC,IAAA,OAAO,EAAE,aADV;AAEC,IAAA,MAAM,EAAE;AACP,qBAAe;AADR;AAFT,GAFW,EASb;AACE,aAVW,CADoC;AAahD,iBAAe;AACd,IAAA,OAAO,EAAE,qCADK;AAEd,IAAA,UAAU,EAAE,IAFE;AAGd,IAAA,KAAK,EAAE;AAHO;AAbiC,CAAjD;ACnCA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACrB,aAAW,wCADU;AAEtB;AACC,YAAU;AACT,IAAA,OAAO,EAAE,oFADA;AAET,IAAA,MAAM,EAAE;AAFC,GAHW;AAOrB,YAAU,+GAPW;AAQrB,aAAW,yHARU;AASrB,cAAY,0BATS;AAUrB,cAAY,CACX,uCADW,EAEX;AACF;AACG,IAAA,OAAO,EAAE,oBAFV;AAGC,IAAA,UAAU,EAAE;AAHb,GAFW,CAVS;AAkBrB,iBAAe;AAlBM,CAAtB;ACAA,KAAK,CAAC,SAAN,CAAgB,QAAhB,GAA2B;AAC1B,aAAW;AACV,IAAA,OAAO,EAAE,4CADC;AAEV,IAAA,UAAU,EAAE;AAFF,GADe;AAK1B,YAAU;AACT,IAAA,OAAO,EAAE,gDADA;AAET,IAAA,MAAM,EAAE;AAFC,GALgB;AAU3B;AACC,aAAW,+BAXe;AAa3B;AACC,YAAU;AACT,IAAA,OAAO,EAAE,6CADA;AAET,IAAA,MAAM,EAAE;AACP,kBAAY;AADL;AAFC,GAdgB;AAoB1B,cAAY,uDApBc;AAsB1B,aAAW,CACZ;AACE,8HAFU,EAGZ;AACE;AACC,IAAA,OAAO,EAAE,uQADV;AAEC,IAAA,UAAU,EAAE;AAFb,GAJU,CAtBe;AA+B1B,cAAY,sBA/Bc;AAgC1B,iBAAe;AAhCW,CAA3B;;ACAC,WAAU,KAAV,EAAiB;AAElB;AACC,MAAI,KAAK,GAAG,2CAA2C,MAAvD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,WAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC9B,IAAA,OAAO,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,EAA4B,YAAY;AAAE,aAAO,KAAP;AAAe,KAAzD,CAAV;AACA,WAAO,MAAM,CAAC,0BAA0B,MAA1B,GAAmC,KAAnC,GAA2C,OAA3C,GAAqD,GAAtD,CAAb;AACA;;AAGD,MAAI,SAAS,GAAG,4DAA4D,MAA5E;AACA,MAAI,QAAQ,GAAG,+CAA+C,MAA/C,CAAsD,OAAtD,CAA8D,KAA9D,EAAqE,YAAY;AAAE,WAAO,SAAP;AAAmB,GAAtG,CAAf;AACA,MAAI,SAAS,GAAG,sEAAsE,MAAtF;AAGA,EAAA,KAAK,CAAC,SAAN,CAAgB,QAAhB,GAA2B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,QAAvB,EAAiC,EAAjC,CAA3B;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,UAA7B,EAAyC,QAAzC,EAAmD;AAClD,0BAAsB;AACrB,MAAA,OAAO,EAAE,iDADY;AAErB,MAAA,UAAU,EAAE,IAFS;AAGrB,MAAA,MAAM,EAAE,IAHa;AAIrB,MAAA,MAAM,EAAE;AACP,uBAAe,WADR;AAEP,uBAAe;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,KAAK,EAAE,CAAC,MAAD,EAAS,eAAT,CAFO;AAGd,UAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHV;AAFR;AAJa,KAD4B;AAclD,kBAAc;AAChB;AACG,MAAA,OAAO,EAAE,iBAFI;AAGb,MAAA,KAAK,EAAE;AAHM,KAdoC;AAmBlD,aAAS;AACR,MAAA,OAAO,EAAE,MAAM,CAAC,MAAM,QAAN,GAAiB,SAAjB,GAA6B,KAA7B,GAAqC,QAArC,GAAgD,IAAjD,EAAuD,GAAvD,CADP;AAER,MAAA,MAAM,EAAE;AACP,2BAAmB;AAClB,UAAA,OAAO,EAAE,MAAM,CAAC,OAAO,QAAP,GAAkB,SAAlB,GAA8B,MAA9B,GAAuC,QAAvC,GAAkD,KAAnD,CADG;AAElB,UAAA,UAAU,EAAE,IAFM;AAGlB,UAAA,MAAM,EAAE;AACP,0BAAc;AACb,cAAA,OAAO,EAAE,MAAM,CAAC,SAAD,CADF;AAEb,cAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFX,aADP;AAKP,2BAAe;AALR;AAHU,SADZ;AAYP,sBAAc;AACb,UAAA,OAAO,EAAE,MAAM,CAAC,OAAO,QAAP,GAAkB,GAAlB,GAAwB,SAAxB,GAAoC,GAArC,CADF;AAEb,UAAA,UAAU,EAAE,IAFC;AAGb,UAAA,MAAM,EAAE;AACP,2BAAe;AADR;AAHK,SAZP;AAmBP,4BAAoB;AACnB,UAAA,OAAO,EAAE,MAAM,CAAC,MAAM,QAAN,GAAiB,GAAlB,CADI;AAEnB,UAAA,MAAM,EAAE;AACP,4BAAgB;AACf,cAAA,OAAO,EAAE,MAAM,CAAC,SAAD,CADA;AAEf,cAAA,KAAK,EAAE,WAFQ;AAGf,cAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHT,aADT;AAMP,2BAAe;AANR;AAFW;AAnBb;AAFA,KAnByC;AAqDlD,YAAQ,CACP;AACH;AACI,MAAA,OAAO,EAAE,sFAFV;AAGC,MAAA,UAAU,EAAE,IAHb;AAIC,MAAA,KAAK,EAAE;AAJR,KADO,EAOP;AACH;AACA;AACA;AACI,MAAA,OAAO,EAAE,oBAJV;AAKC,MAAA,MAAM,EAAE,IALT;AAMC,MAAA,MAAM,EAAE;AACP,sBAAc;AACb,UAAA,OAAO,EAAE,oDADI;AAEb,UAAA,UAAU,EAAE;AAFC,SADP;AAKP,yBAAiB;AAChB,UAAA,OAAO,EAAE,UADO;AAEhB,UAAA,UAAU,EAAE;AAFI,SALV;AASP,uBAAe;AATR;AANT,KAPO,CArD0C;AA+ElD,aAAS,CACR;AACH;AACA;AAEA;AACA;AACI,MAAA,OAAO,EAAE,yCANV;AAOC,MAAA,KAAK,EAAE,WAPR;AAQC,MAAA,MAAM,EAAE;AACP,QAAA,WAAW,EAAE;AADN;AART,KADQ,EAaR;AACH;AACA;AACI,MAAA,OAAO,EAAE,YAHV;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,KAAK,EAAE,WALR;AAMC,MAAA,MAAM,EAAE;AACP,QAAA,WAAW,EAAE;AADN;AANT,KAbQ,CA/EyC;AAuGlD,UAAM;AACR;AACA;AACA;AACA;AACG,MAAA,OAAO,EAAE,uCALJ;AAML,MAAA,UAAU,EAAE,IANP;AAOL,MAAA,KAAK,EAAE;AAPF,KAvG4C;AAgHlD,YAAQ;AACV;AACA;AACA;AACA;AACG,MAAA,OAAO,EAAE,kCALF;AAMP,MAAA,UAAU,EAAE,IANL;AAOP,MAAA,KAAK,EAAE;AAPA,KAhH0C;AAyHlD,qBAAiB;AACnB;AACA;AACA;AACA;AACG,MAAA,OAAO,EAAE,oHALO;AAMhB,MAAA,MAAM,EAAE;AACP,oBAAY;AACX,UAAA,OAAO,EAAE,eADE;AAEX,UAAA,UAAU,EAAE;AAFD,SADL;AAKP,kBAAU,8DALH;AAMP,uBAAe;AANR,OANQ;AAchB,MAAA,KAAK,EAAE;AAdS,KAzHiC;AAyIlD,YAAQ;AACV;AACA;AAEA;AACG,MAAA,OAAO,EAAE,YAAY,CAAC,kGAAkG,MAAnG,CALd;AAMP,MAAA,UAAU,EAAE,IANL;AAOP,MAAA,MAAM,EAAE,IAPD;AAQP,MAAA,MAAM,EAAE;AACP,mBAAW;AACV,UAAA,OAAO,EAAE,qBADC;AAEV,UAAA,UAAU,EAAE,IAFF;AAGV,UAAA,MAAM,EAAE,EAHE,CAGA;;AAHA,SADJ;AAMP,uBAAe;AANR;AARD,KAzI0C;AA0JlD,cAAU;AACZ;AACA;AAEA;AACG,MAAA,OAAO,EAAE,YAAY,CAAC,kGAAkG,MAAnG,CALZ;AAMT,MAAA,UAAU,EAAE,IANH;AAOT,MAAA,MAAM,EAAE,IAPC;AAQT,MAAA,MAAM,EAAE;AACP,mBAAW;AACV,UAAA,OAAO,EAAE,mBADC;AAEV,UAAA,UAAU,EAAE,IAFF;AAGV,UAAA,MAAM,EAAE,EAHE,CAGA;;AAHA,SADJ;AAMP,uBAAe;AANR;AARC,KA1JwC;AA2KlD,cAAU;AACZ;AACA;AACA;AACG,MAAA,OAAO,EAAE,YAAY,CAAC,2BAA2B,MAA5B,CAJZ;AAKT,MAAA,UAAU,EAAE,IALH;AAMT,MAAA,MAAM,EAAE,IANC;AAOT,MAAA,MAAM,EAAE;AACP,mBAAW;AACV,UAAA,OAAO,EAAE,sBADC;AAEV,UAAA,UAAU,EAAE,IAFF;AAGV,UAAA,MAAM,EAAE,EAHE,CAGA;;AAHA,SADJ;AAMP,uBAAe;AANR;AAPC,KA3KwC;AA2LlD,oBAAgB;AAClB;AACA;AACG,MAAA,OAAO,EAAE,kEAHM;AAIf,MAAA,UAAU,EAAE,IAJG;AAKf,MAAA,MAAM,EAAE,IALO;AAMf,MAAA,KAAK,EAAE,CAAC,MAAD,EAAS,SAAT;AANQ,KA3LkC;AAmMlD,WAAO;AACT;AACA;AACA;AACG,MAAA,OAAO,EAAE,YAAY,CAAC,mGAAmG,MAApG,CAJf;AAKN,MAAA,UAAU,EAAE,IALN;AAMN,MAAA,MAAM,EAAE,IANF;AAON,MAAA,MAAM,EAAE;AACP,oBAAY,IADL;AAEP,mBAAW;AACV,UAAA,OAAO,EAAE,mBADC;AAEV,UAAA,UAAU,EAAE,IAFF;AAGV,UAAA,MAAM,EAAE,EAHE,CAGA;;AAHA,SAFJ;AAOP,oBAAY;AACX,UAAA,OAAO,EAAE,4BADE;AAEX,UAAA,UAAU,EAAE;AAFD,SAPL;AAWP,eAAO;AACN,UAAA,OAAO,EAAE,gBADH;AAEN,UAAA,UAAU,EAAE;AAFN,SAXA;AAeP,kBAAU;AACT,UAAA,OAAO,EAAE,mCADA;AAET,UAAA,UAAU,EAAE;AAFH;AAfH;AAPF;AAnM2C,GAAnD;AAiOA,GAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAU,KAAV,EAAiB;AAC5D,KAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,QAA1B,EAAoC,cAApC,EAAoD,OAApD,CAA4D,UAAU,MAAV,EAAkB;AAC7E,UAAI,KAAK,KAAK,MAAd,EAAsB;AACrB,QAAA,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAyB,KAAzB,EAAgC,MAAhC,CAAuC,OAAvC,CAA+C,MAA/C,CAAsD,MAAtD,IAAgE,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAyB,MAAzB,CAAhE;AACA;AACD,KAJD;AAKA,GAND;AAQA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,QAAI,GAAG,CAAC,QAAJ,KAAiB,UAAjB,IAA+B,GAAG,CAAC,QAAJ,KAAiB,IAApD,EAA0D;AACzD;AACA;;AAED,aAAS,UAAT,CAAoB,MAApB,EAA4B;AAC3B,UAAI,CAAC,MAAD,IAAW,OAAO,MAAP,KAAkB,QAAjC,EAA2C;AAC1C;AACA;;AAED,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,GAAG,CAAvC,EAA0C,CAAC,EAA3C,EAA+C;AAC9C,YAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAlB;;AAEA,YAAI,KAAK,CAAC,IAAN,KAAe,MAAnB,EAA2B;AAC1B,UAAA,UAAU,CAAC,KAAK,CAAC,OAAP,CAAV;AACA;AACA;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,YAAI,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,CAAd,CAAf;AACA,YAAI,SAAS,GAAG,KAAK,CAAC,OAAN,CAAc,CAAd,CAAhB;;AAEA,YAAI,QAAQ,IAAI,SAAZ,IACH,QAAQ,CAAC,IAAT,KAAkB,eADf,IACkC,SAAS,CAAC,IAAV,KAAmB,YADrD,IAEH,OAAO,QAAQ,CAAC,OAAhB,KAA4B,QAF7B,EAEuC;AAE3C;AAEA;AACK,cAAI,IAAI,GAAG,QAAQ,CAAC,OAAT,CAAiB,OAAjB,CAAyB,MAAzB,EAAiC,OAAjC,EAA0C,OAA1C,CAAkD,SAAlD,EAA6D,IAA7D,CAAX,CALsC,CAM3C;;AACK,UAAA,IAAI,GAAG,CAAC,eAAe,IAAf,CAAoB,IAApB,KAA6B,CAAC,EAAD,CAA9B,EAAoC,CAApC,EAAuC,WAAvC,EAAP;AACA,cAAI,KAAK,GAAG,cAAc,IAA1B,CARsC,CAU3C;;AACK,cAAI,CAAC,SAAS,CAAC,KAAf,EAAsB;AACrB,YAAA,SAAS,CAAC,KAAV,GAAkB,CAAC,KAAD,CAAlB;AACA,WAFD,MAEO,IAAI,OAAO,SAAS,CAAC,KAAjB,KAA2B,QAA/B,EAAyC;AAC/C,YAAA,SAAS,CAAC,KAAV,GAAkB,CAAC,SAAS,CAAC,KAAX,EAAkB,KAAlB,CAAlB;AACA,WAFM,MAEA;AACN,YAAA,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAqB,KAArB;AACA;AACD;AACD;AACD;;AAED,IAAA,UAAU,CAAC,GAAG,CAAC,MAAL,CAAV;AACA,GA5DD;AA8DA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,UAAU,GAAV,EAAe;AACtC,QAAI,GAAG,CAAC,IAAJ,KAAa,YAAjB,EAA+B;AAC9B;AACA;;AAED,QAAI,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,GAAG,CAAC,OAAJ,CAAY,MAAhC,EAAwC,CAAC,GAAG,CAA5C,EAA+C,CAAC,EAAhD,EAAoD;AACnD,UAAI,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAV;AACA,UAAI,KAAK,GAAG,gBAAgB,IAAhB,CAAqB,GAArB,CAAZ;;AACA,UAAI,KAAJ,EAAW;AACV,QAAA,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAhB;AACA;AACA;AACD;;AAED,QAAI,OAAO,GAAG,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAd;;AAEA,QAAI,CAAC,OAAL,EAAc;AACb,UAAI,QAAQ,IAAI,QAAQ,KAAK,MAAzB,IAAmC,KAAK,CAAC,OAAN,CAAc,UAArD,EAAiE;AAChE,YAAI,EAAE,GAAG,QAAQ,IAAI,IAAJ,GAAW,OAAX,EAAR,GAA+B,GAA/B,GAAqC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAA3B,CAA9C;AACA,QAAA,GAAG,CAAC,UAAJ,CAAe,IAAf,IAAuB,EAAvB;AAEA,QAAA,KAAK,CAAC,OAAN,CAAc,UAAd,CAAyB,aAAzB,CAAuC,QAAvC,EAAiD,YAAY;AAC5D,cAAI,GAAG,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAV;;AACA,cAAI,GAAJ,EAAS;AACR,YAAA,GAAG,CAAC,SAAJ,GAAgB,KAAK,CAAC,SAAN,CAAgB,GAAG,CAAC,WAApB,EAAiC,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAjC,EAA4D,QAA5D,CAAhB;AACA;AACD,SALD;AAMA;AACD,KAZD,MAYO;AACN,MAAA,GAAG,CAAC,OAAJ,GAAc,KAAK,CAAC,SAAN,CAAgB,WAAW,CAAC,GAAG,CAAC,OAAL,CAA3B,EAA0C,OAA1C,EAAmD,QAAnD,CAAd;AACA;AACD,GAhCD;AAkCA,MAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,OAA3B,CAAmC,MAApC,EAA4C,IAA5C,CAAvB;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,MAAI,kBAAkB,GAAG;AACxB,WAAO,GADiB;AAExB,UAAM,GAFkB;AAGxB,UAAM,GAHkB;AAIxB,YAAQ;AAJgB,GAAzB,CA7WiB,CAoXlB;;AACC,MAAI,aAAa,GAAG,MAAM,CAAC,aAAP,IAAwB,MAAM,CAAC,YAAnD;AAED;AACA;AACA;AACA;AACA;AACA;;AACC,WAAS,WAAT,CAAqB,IAArB,EAA2B;AAC5B;AACE,QAAI,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAX,CAF0B,CAI5B;;AACE,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,+BAAb,EAA8C,UAAU,CAAV,EAAa,IAAb,EAAmB;AACvE,MAAA,IAAI,GAAG,IAAI,CAAC,WAAL,EAAP;;AAEA,UAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACpB,YAAI,KAAJ;;AACA,YAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACpB,UAAA,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAD,EAAgB,EAAhB,CAAhB;AACA,SAFD,MAEO;AACN,UAAA,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAD,CAAd;AACA;;AAED,eAAO,aAAa,CAAC,KAAD,CAApB;AACA,OATD,MASO;AACN,YAAI,KAAK,GAAG,kBAAkB,CAAC,IAAD,CAA9B;;AACA,YAAI,KAAJ,EAAW;AACV,iBAAO,KAAP;AACA,SAJK,CAMV;;;AACI,eAAO,CAAP;AACA;AACD,KArBM,CAAP;AAuBA,WAAO,IAAP;AACA;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,QAArC;AAEA,CA9ZA,EA8ZC,KA9ZD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,aAAW,CACV,gBADU,EAEV,KAFU,CADa;AAKxB,YAAU;AACT,IAAA,OAAO,EAAE,sBADA;AAET,IAAA,MAAM,EAAE;AAFC,GALc;AASzB;AACC,YAAU,gEAVc;AAWxB,aAAW,6HAXa;AAYxB,cAAY,sBAZY;AAaxB,cAAY,yCAbY;AAcxB,iBAAe;AAdS,CAAzB;ACAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,GAAvB,EAA4B;AACxD,YAAU,oFAD8C;AAExD,aAAW,uYAF6C;AAGxD,cAAY;AAH4C,CAA5B,CAA7B;AAMA,OAAO,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,YAA3B,CAAP;AAEA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,UAAvC;ACRA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB;AACtB,aAAW,CACV;AACF;AACG,IAAA,OAAO,EAAE,0BAFV;AAGC,IAAA,UAAU,EAAE;AAHb,GADU,EAMV;AACC,IAAA,OAAO,EAAE,eADV;AAEC,IAAA,UAAU,EAAE;AAFb,GANU,CADW;AAYvB;AACC,YAAU,CACX;AACE;AACC,IAAA,OAAO,EAAE,qEADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAFS,EAOX;AACE;AACC,IAAA,OAAO,EAAE,6DADV;AAEC,IAAA,MAAM,EAAE;AAFT,GARS,EAaX;AACE;AACC,IAAA,OAAO,EAAE,8CADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAdS,EAmBX;AACE;AACC,IAAA,OAAO,EAAE,8CADV;AAEC,IAAA,MAAM,EAAE;AAFT,GApBS,EAyBX;AACE;AACC,IAAA,OAAO,EAAE,+CADV;AAEC,IAAA,MAAM,EAAE;AAFT,GA1BS,EA+BX;AACE;AACC,IAAA,OAAO,EAAE,4CADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAhCS,EAqCX;AACE;AACC,IAAA,OAAO,EAAE,kCADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAtCS,EA2CX;AACA;AACE;AACC,IAAA,OAAO,EAAE,uBADV;AAEC,IAAA,MAAM,EAAE;AAFT,GA7CS,CAbY;AA+DtB,WAAS,CACV;AACE;AACC,IAAA,OAAO,EAAE,+EADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAFQ,EAOV;AACE;AACC,IAAA,OAAO,EAAE,uEADV;AAEC,IAAA,MAAM,EAAE;AAFT,GARQ,EAaV;AACE;AACC,IAAA,OAAO,EAAE,wDADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAdQ,EAmBV;AACE;AACC,IAAA,OAAO,EAAE,wDADV;AAEC,IAAA,MAAM,EAAE;AAFT,GApBQ,EAyBV;AACE;AACC,IAAA,OAAO,EAAE,yDADV;AAEC,IAAA,MAAM,EAAE;AAFT,GA1BQ,EA+BV;AACE;AACC,IAAA,OAAO,EAAE,sDADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAhCQ,EAqCV;AACA;AACA;AACE;AACC,IAAA,OAAO,EAAE,sHADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GAxCQ,EA8CV;AACE;AACC,IAAA,OAAO,EAAE,8GADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GA/CQ,EAqDV;AACE;AACC,IAAA,OAAO,EAAE,gGADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GAtDQ,EA4DV;AACE;AACC,IAAA,OAAO,EAAE,gGADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GA7DQ,EAmEV;AACE;AACC,IAAA,OAAO,EAAE,kGADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GApEQ,EA0EV;AACE;AACC,IAAA,OAAO,EAAE,4FADV;AAEC,IAAA,UAAU,EAAE,IAFb;AAGC,IAAA,MAAM,EAAE;AAHT,GA3EQ,EAiFV;AACA;AACA;AACA;AACE;AACC,IAAA,OAAO,EAAE,2HADV;AAEC,IAAA,MAAM,EAAE;AAFT,GArFQ,CA/Da;AA0JvB;AACC,cAAY,CACb;AACE,uBAFW,EAGb;AACE,mBAJW,EAKb;AACE,mBANW,EAOb;AACE,wDARW,EASb;AACE,cAVW,EAWb;AACA;AACE,qDAbW,CA3JU;AA0KtB,gBAAc;AACf;AACE,IAAA,OAAO,EAAE,qBAFI;AAGb,IAAA,KAAK,EAAE;AAHM,GA1KQ;AA+KtB,aAAW;AACZ;AACE,IAAA,OAAO,EAAE,iCAFC;AAGV,IAAA,KAAK,EAAE;AAHG,GA/KW;AAoLtB,cAAY;AACX,IAAA,OAAO,EAAE,UADE;AAEX,IAAA,MAAM,EAAE;AACP,MAAA,OAAO,EAAE;AADF;AAFG,GApLU;AA0LtB,aAAW,4MA1LW;AA2LtB,YAAU,6GA3LY;AA4LtB,cAAY,+MA5LU;AA6LtB,iBAAe;AA7LO,CAAvB;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,WAAU,KAAV,EAAiB;AACjB,MAAI,OAAO,GAAG,mCAAd;AACA,MAAI,QAAQ,GAAG,CACd;AACC,IAAA,OAAO,EAAE,qBADV;AAEC,IAAA,KAAK,EAAE;AAFR,GADc,EAKd;AACC,IAAA,OAAO,EAAE,gCADV;AAEC,IAAA,MAAM,EAAE,IAFT;AAGC,IAAA,UAAU,EAAE;AAHb,GALc,EAUd;AACC,IAAA,OAAO,EAAE,8CADV;AAEC,IAAA,MAAM,EAAE,IAFT;AAGC,IAAA,UAAU,EAAE;AAHb,GAVc,EAed,eAfc,EAgBd,+BAhBc,CAAf;AAkBA,MAAI,MAAM,GAAG,4IAAb;AACA,MAAI,QAAQ,GAAG,uFAAf;AACA,MAAI,WAAW,GAAG,eAAlB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACrB,iBAAa;AACZ,MAAA,OAAO,EAAE,4BADG;AAEZ,MAAA,KAAK,EAAE;AAFK,KADQ;AAKrB,eAAW,OALU;AAMrB,gBAAY,sBANS;AAOrB,eAAW;AACV,MAAA,OAAO,EAAE,mEADC;AAEV,MAAA,UAAU,EAAE,IAFF;AAGV,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAHE,KAPU;AAcrB,6BAAyB;AACxB,MAAA,OAAO,EAAE,2DADe;AAExB,MAAA,UAAU,EAAE,IAFY;AAGxB,MAAA,KAAK,EAAE;AAHiB,KAdJ;AAmBrB,2BAAuB;AACtB,MAAA,OAAO,EAAE,oCADa;AAEtB,MAAA,UAAU,EAAE,IAFU;AAGtB,MAAA,KAAK,EAAE;AAHe,KAnBF;AAwBrB,eAAW,CACV;AACC,MAAA,OAAO,EAAE,6EADV;AAEC,MAAA,KAAK,EAAE,cAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KADU,EAOV;AACC,MAAA,OAAO,EAAE,qIADV;AAEC,MAAA,KAAK,EAAE,WAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAPU,EAaV;AACC,MAAA,OAAO,EAAE,gDADV;AAEC,MAAA,KAAK,EAAE,WAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAbU,EAmBV;AACC,MAAA,OAAO,EAAE,4IADV;AAEC,MAAA,KAAK,EAAE,aAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAnBU,EAyBV;AACC,MAAA,OAAO,EAAE,kDADV;AAEC,MAAA,KAAK,EAAE,aAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAzBU,EA+BV;AACC,MAAA,OAAO,EAAE,kGADV;AAEC,MAAA,KAAK,EAAE,kBAFR;AAGC,MAAA,MAAM,EAAE;AAHT,KA/BU,EAoCV;AACC,MAAA,OAAO,EAAE,0BADV;AAEC,MAAA,KAAK,EAAE,kBAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KApCU,EA0CV;AACC,MAAA,OAAO,EAAE,oCADV;AAEC,MAAA,KAAK,EAAE,gBAFR;AAGC,MAAA,MAAM,EAAE;AAHT,KA1CU,EA+CV;AACH;AACI,MAAA,OAAO,EAAE,qBAFV;AAGC,MAAA,UAAU,EAAE;AAHb,KA/CU,EAoDb;AACG,gBArDU,EAsDV;AACH;AACA;AACA;AACA;AACI,MAAA,OAAO,EAAE,6hBALV;AAMC,MAAA,UAAU,EAAE;AANb,KAtDU,CAxBU;AAuFrB,qBAAiB;AAChB,MAAA,OAAO,EAAE,oCADO;AAEhB,MAAA,UAAU,EAAE;AAFI,KAvFI;AA2FrB,kBAAc,CACb;AACC,MAAA,OAAO,EAAE,oGADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,UAAU,EAAE;AAHb,KADa,EAMb;AACC,MAAA,OAAO,EAAE,6BADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,UAAU,EAAE;AAHb,KANa,EAWb;AACC,MAAA,OAAO,EAAE,+BADV;AAEC,MAAA,MAAM,EAAE;AAFT,KAXa,EAeb;AACC,MAAA,OAAO,EAAE,+BADV;AAEC,MAAA,KAAK,EAAE,4BAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALT,KAfa,EAwBb;AACC,MAAA,OAAO,EAAE,iCADV;AAEC,MAAA,KAAK,EAAE,4BAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAJT,KAxBa,EAgCb;AACC,MAAA,OAAO,EAAE,gHADV;AAEC,MAAA,KAAK,EAAE,4BAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALT,KAhCa,EAyCb;AACC,MAAA,OAAO,EAAE,uBADV;AAEC,MAAA,KAAK,EAAE,kBAFR;AAGC,MAAA,MAAM,EAAE;AAHT,KAzCa,EA8Cb;AACC,MAAA,OAAO,EAAE,+BADV;AAEC,MAAA,KAAK,EAAE,CAAC,4BAAD,EAA+B,kBAA/B,CAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAJT,KA9Ca,EAsDb;AACC,MAAA,OAAO,EAAE,uBADV;AAEC,MAAA,KAAK,EAAE,gBAFR;AAGC,MAAA,MAAM,EAAE;AAHT,KAtDa,EA2Db;AACC,MAAA,OAAO,EAAE,+BADV;AAEC,MAAA,KAAK,EAAE,CAAC,4BAAD,EAA+B,gBAA/B,CAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAJT,KA3Da,EAmEb;AACC,MAAA,OAAO,EAAE,+BADV;AAEC,MAAA,KAAK,EAAE,WAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAnEa,EAyEb;AACC,MAAA,OAAO,EAAE,yCADV;AAEC,MAAA,KAAK,EAAE,CAAC,4BAAD,EAA+B,WAA/B,CAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALT,KAzEa,EAkFb;AACC,MAAA,OAAO,EAAE,2CADV;AAEC,MAAA,KAAK,EAAE,aAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE;AAJb,KAlFa,EAwFb;AACC,MAAA,OAAO,EAAE,mDADV;AAEC,MAAA,KAAK,EAAE,CAAC,4BAAD,EAA+B,aAA/B,CAFR;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,UAAU,EAAE,IAJb;AAKC,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALT,KAxFa,CA3FO;AA6LrB,gBAAY,QA7LS;AA8LrB,gBAAY;AACX,MAAA,OAAO,EAAE,8CADE;AAEX,MAAA,UAAU,EAAE,IAFD;AAGX,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAHG,KA9LS;AAqMrB,gBAAY;AACX,MAAA,OAAO,EAAE,YADE;AAEX,MAAA,UAAU,EAAE;AAFD,KArMS;AAyMrB,cAAU,MAzMW;AA0MrB,gBAAY,QA1MS;AA2MrB,mBAAe;AA3MM,GAAtB;AA8MA,MAAI,oBAAoB,GAAG;AAC1B,IAAA,OAAO,EAAE,4FADiB;AAE1B,IAAA,UAAU,EAAE,IAFc;AAG1B,IAAA,MAAM,EAAE,KAAK,CAAC,SAAN,CAAgB;AAHE,GAA3B;AAMA,MAAI,MAAM,GAAG,CACZ;AACC,IAAA,OAAO,EAAE,qCADV;AAEC,IAAA,KAAK,EAAE,eAFR;AAGC,IAAA,MAAM,EAAE,IAHT;AAIC,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,0BADG;AAEZ,QAAA,KAAK,EAAE,QAFK;AAGZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAHI;AADN;AAJT,GADY,EAeZ;AACC,IAAA,OAAO,EAAE,6EADV;AAEC,IAAA,KAAK,EAAE,gBAFR;AAGC,IAAA,MAAM,EAAE,IAHT;AAIC,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,wCADG;AAEZ,QAAA,KAAK,EAAE,QAFK;AAGZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAHI,OADN;AAQP,uBAAiB;AARV;AAJT,GAfY,EA8BZ;AACC,IAAA,OAAO,EAAE,wBADV;AAEC,IAAA,KAAK,EAAE,wBAFR;AAGC,IAAA,MAAM,EAAE;AAHT,GA9BY,EAmCZ;AACC,IAAA,OAAO,EAAE,wBADV;AAEC,IAAA,KAAK,EAAE,sBAFR;AAGC,IAAA,MAAM,EAAE;AAHT,GAnCY,EAwCZ;AACC,IAAA,OAAO,EAAE,wBADV;AAEC,IAAA,KAAK,EAAE,sBAFR;AAGC,IAAA,MAAM,EAAE,IAHT;AAIC,IAAA,MAAM,EAAE;AACP,uBAAiB;AADV;AAJT,GAxCY,CAAb;AAkDA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,UAApC,EAAgD;AAC/C,cAAU,MADqC;AAE/C,iBAAa;AACZ,MAAA,OAAO,EAAE,2IADG;AAEZ,MAAA,MAAM,EAAE,IAFI;AAGZ,MAAA,MAAM,EAAE;AACP,6BAAqB;AACpB,UAAA,OAAO,EAAE,sBADW;AAEpB,UAAA,UAAU,EAAE,IAFQ;AAGzB;AACK,UAAA,MAAM,EAAE;AACP,uBAAW,OADJ;AAEP,sBAAU,MAFH;AAGP,oCAAwB,CACvB;AACC,cAAA,OAAO,EAAE,8BADV;AAEC,cAAA,KAAK,EAAE,YAFR;AAGC,cAAA,MAAM,EAAE,IAHT;AAIC,cAAA,UAAU,EAAE;AAJb,aADuB,EAOvB;AACC,cAAA,OAAO,EAAE,8BADV;AAEC,cAAA,KAAK,EAAE,CACN,YADM,EAEN,4BAFM,CAFR;AAMC,cAAA,MAAM,EAAE,IANT;AAOC,cAAA,UAAU,EAAE,IAPb;AAQC,cAAA,MAAM,EAAE;AACP,+BAAe;AADR;AART,aAPuB,CAHjB;AAuBP,wBAAY,QAvBL;AAwBP,sBAAU,MAxBH;AAyBP,wBAAY,QAzBL;AA0BP,2BAAe;AA1BR;AAJY,SADd;AAkCP,qBAAa;AACZ,UAAA,OAAO,EAAE,UADG;AAEZ,UAAA,KAAK,EAAE;AAFK;AAlCN;AAHI;AAFkC,GAAhD;AA+CA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,iBAAhB,EAAmC,UAAU,GAAV,EAAe;AACjD,QAAI,CAAC,MAAM,IAAN,CAAW,GAAG,CAAC,IAAf,CAAL,EAA2B;AAC1B;AACA;;AAED,QAAI,UAAU,GAAG,oKAAjB;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,EAAqC,iBAArC,CAAuD,GAAvD,EAA4D,KAA5D,EAAmE,UAAnE;AACA,GAPD;AASA,EAAA,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,UAAU,GAAV,EAAe;AAChD,IAAA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,EAAqC,oBAArC,CAA0D,GAA1D,EAA+D,KAA/D;AACA,GAFD;AAIA,CA1VA,EA0VC,KA1VD,CAAD;;ACPC,WAAU,KAAV,EAAiB;AAEjB,MAAI,UAAU,GAAG,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B;AAC7C,eAAW,CACV;AACC,MAAA,OAAO,EAAE,sBADV;AAEC,MAAA,UAAU,EAAE;AAFb,KADU,EAKV;AACC,MAAA,OAAO,EAAE,aADV;AAEC,MAAA,UAAU,EAAE;AAFb,KALU,CADkC;AAW7C,cAAU,CACT;AACC,MAAA,OAAO,EAAE,sBADV;AAEC,MAAA,MAAM,EAAE,IAFT;AAGC,MAAA,MAAM,EAAE;AACP,oBAAY;AACjB;AACM,UAAA,OAAO,EAAE,sDAFE;AAGX,UAAA,UAAU,EAAE,IAHD;AAIjB;AACM,UAAA,MAAM,EAAE;AALG;AADL;AAHT,KADS,EAcT;AACC,MAAA,OAAO,EAAE,gBADV;AAEC,MAAA,MAAM,EAAE;AAFT,KAdS,CAXmC;AA8B/C;AACA;AACE,iBAAa,oDAhCgC;AAiC7C,eAAW,qBAjCkC;AAkC7C,gBAAY,SAlCiC;AAmC/C;AACA;AACA;AACE,gBAAY,CACX,urBADW,EAEX,ucAFW,CAtCiC;AA0C/C;AACE,eAAW,iPA3CkC;AA4C7C,gBAAY;AACX,MAAA,OAAO,EAAE,sJADE;AAEX,MAAA,UAAU,EAAE;AAFD,KA5CiC;AAgD7C,mBAAe;AAhD8B,GAA9C,CAFiB,CAqDlB;;AACC,MAAI,YAAY,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAlB,EAAqB,MAAxC;AACA,EAAA,YAAY,CAAC,OAAb,GAAuB,UAAU,CAAC,OAAlC;AACA,EAAA,YAAY,CAAC,QAAb,GAAwB,UAAU,CAAC,QAAnC;AACA,EAAA,YAAY,CAAC,QAAb,CAAsB,MAAtB,GAA+B,UAA/B;AAEA,CA3DA,EA2DC,KA3DD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B;AAC5B,aAAW,iBADiB;AAE5B,gBAAc;AACb,IAAA,OAAO,EAAE,+FADI;AAEb,IAAA,UAAU,EAAE;AAFC,GAFc;AAM5B,eAAa,sDANe;AAO5B,iBAAe;AAPa,CAA7B;;ACAC,WAAU,KAAV,EAAiB;AAEjB,MAAI,YAAY,GAAG,2EAAnB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,QAAhB,GAA2B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AAC1D,kBAAc,CACb;AACC,MAAA,OAAO,EAAE,6DADV;AAEC,MAAA,UAAU,EAAE;AAFb,KADa,EAKb;AACC,MAAA,OAAO,EAAE,4FADV;AAEC,MAAA,UAAU,EAAE;AAFb,KALa,CAD4C;AAW1D,eAAW,0KAX+C;AAY1D,gBAAY;AAZ8C,GAAhC,CAA3B;AAeA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,UAA7B,EAAyC,UAAzC,EAAqD;AACpD,WAAO;AACN,MAAA,OAAO,EAAE,0DADH;AAEN,MAAA,KAAK,EAAE,YAFD;AAGN,MAAA,MAAM,EAAE;AACP,uBAAe,QADR;AAEP,mBAAW;AAFJ;AAHF,KAD6C;AASpD,eAAW,YATyC;AAUpD,6BAAyB;AACxB,MAAA,OAAO,EAAE,8DADe;AAExB,MAAA,KAAK,EAAE,YAFiB;AAGxB,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAHgB,KAV2B;AAiBpD,kBAAc;AACb,MAAA,OAAO,EAAE,2BADI;AAEb,MAAA,UAAU,EAAE;AAFC;AAjBsC,GAArD;AAuBA,CA1CA,EA0CC,KA1CD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AACxB,aAAW;AACV,IAAA,OAAO,EAAE,cADC;AAEV,IAAA,UAAU,EAAE;AAFF,GADa;AAKxB,0BAAwB;AACvB,IAAA,OAAO,EAAE,qEADc;AAEvB,IAAA,MAAM,EAAE,IAFe;AAGvB,IAAA,MAAM,EAAE;AACP,uBAAiB;AACpB;AACI,QAAA,OAAO,EAAE,qFAFO;AAGhB,QAAA,UAAU,EAAE,IAHI;AAIhB,QAAA,MAAM,EAAE;AACP,yBAAe;AACd,YAAA,OAAO,EAAE,qBADK;AAEd,YAAA,UAAU,EAAE;AAFE,WADR;AAKP,+BAAqB;AACpB,YAAA,OAAO,EAAE,iBADW;AAEpB,YAAA,KAAK,EAAE;AAFa,WALd;AASP,UAAA,IAAI,EAAE;AATC;AAJQ,OADV;AAiBP,gBAAU;AAjBH;AAHe,GALA;AA4BxB,0BAAwB;AACvB,IAAA,OAAO,EAAE,sCADc;AAEvB,IAAA,MAAM,EAAE,IAFe;AAGvB,IAAA,KAAK,EAAE;AAHgB,GA5BA;AAiCxB,YAAU;AACT,IAAA,OAAO,EAAE,kDADA;AAET,IAAA,MAAM,EAAE;AAFC,GAjCc;AAqCxB,cAAY;AACX,IAAA,OAAO,EAAE,2CADE;AAEX,IAAA,UAAU,EAAE;AAFD,GArCY;AAyCxB,gBAAc;AACb,IAAA,OAAO,EAAE,kBADI;AAEb,IAAA,UAAU,EAAE;AAFC,GAzCU;AA6CxB,eAAa;AACZ,IAAA,OAAO,EAAE,2BADG;AAEZ,IAAA,UAAU,EAAE,IAFA;AAGZ,IAAA,KAAK,EAAE,CAAC,YAAD,EAAe,aAAf,CAHK;AAIZ,IAAA,MAAM,EAAE;AACP,qBAAe;AADR;AAJI,GA7CW;AAqDxB,aAAW,kMArDa;AAsDxB,aAAW,qhBAtDa;AAuDxB,aAAW,yBAvDa;AAwDxB,YAAU,8IAxDc;AAyDxB,cAAY,mDAzDY;AA0DxB,iBAAe;AA1DS,CAAzB;AA6DA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,sBAAvB,EAA+C,MAA/C,CAAsD,eAAtD,EAAuE,MAAvE,CAA8E,IAA9E,GAAqF,KAAK,CAAC,SAAN,CAAgB,MAArG;AAEA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAArC;AC/DA,KAAK,CAAC,SAAN,CAAgB,CAAhB,GAAoB;AACnB,aAAW,KADQ;AAEnB,YAAU;AACT,IAAA,OAAO,EAAE,kCADA;AAET,IAAA,MAAM,EAAE;AAFC,GAFS;AAMnB,sBAAoB;AACrB;AACA;AACE,IAAA,OAAO,EAAE,WAHU;AAInB,IAAA,KAAK,EAAE;AAJY,GAND;AAYnB,aAAW,oBAZQ;AAanB,cAAY,gBAbO;AAcnB,YAAU,CACT,iBADS,EAET,+EAFS,CAdS;AAkBnB,aAAW,gHAlBQ;AAmBnB,cAAY,oDAnBO;AAoBnB,iBAAe;AApBI,CAApB;ACAA;AACA;AACA;AACA;AACA;AACA;;AACC,WAAU,KAAV,EAAiB;AACjB,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,eAAW,CACV,KADU,EAEV;AACC,MAAA,OAAO,EAAE,yBADV;AAEC,MAAA,MAAM,EAAE;AAFT,KAFU,CAD2C;AAQtD,kBAAc;AACb,MAAA,OAAO,EAAE,wCADI;AAEb,MAAA,UAAU,EAAE,IAFC;AAGb,MAAA,MAAM,EAAE;AACP,uBAAe;AADR;AAHK,KARwC;AAetD,eAAW;AAf2C,GAAhC,CAAvB;AAkBA,MAAI,aAAa,GAAG;AACnB,IAAA,OAAO,EAAE,YADU;AAEnB,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,UADG;AAEZ,QAAA,KAAK,EAAE;AAFK,OADN;AAKP,MAAA,IAAI,EAAE,KAAK,CAAC,SAAN,CAAgB;AALf;AAFW,GAApB;AAWA,SAAO,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,QAA5B;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC/C,aAAS,CACR;AACC,MAAA,OAAO,EAAE,MAAM,CAAC,KAAK,MAAL,GAAc,KAAd,GAAsB,CACrC,mDAAmD,MADd,EAErC,4BAA4B,MAFS,EAG1C;AACK,mDAA6C,MAJR,EAKrC,8BAA8B,MALO,EAMrC,0BAA0B,MANW,EAOpC,IAPoC,CAO/B,GAP+B,CAAtB,GAOF,GAPE,GAOI,mBAAmB,MAPxB,CADhB;AASC,MAAA,MAAM,EAAE,IATT;AAUC,MAAA,MAAM,EAAE;AACP,yBAAiB;AADV;AAVT,KADQ,EAeR;AACC,MAAA,OAAO,EAAE,gGADV;AAEC,MAAA,UAAU,EAAE,IAFb;AAGC,MAAA,MAAM,EAAE,IAHT;AAIC,MAAA,MAAM,EAAE;AACP,yBAAiB;AADV;AAJT,KAfQ,CADsC;AAyB/C,gBAAY,8BAzBmC;AA0B/C,cAAU;AACT,MAAA,OAAO,EAAE,kCADA;AAET,MAAA,UAAU,EAAE;AAFH,KA1BqC;AA8B/C,yBAAqB;AACpB,MAAA,OAAO,EAAE,kBADW;AAEpB,MAAA,UAAU,EAAE,IAFQ;AAGpB,MAAA,MAAM,EAAE;AACP,oBAAY,MADL;AAEP,QAAA,IAAI,EAAE,KAAK,CAAC,SAAN,CAAgB;AAFf;AAHY;AA9B0B,GAAhD;AAwCA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C,eAAW,8OADmC;AAE9C,gBAAY;AAFkC,GAA/C;AAKA,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,MAArB,GAA8B,CAC7B;AACC,IAAA,OAAO,EAAE,MAAM,CAAC,eAAe,MAAf,GAAwB,KAAxB,GAAgC,CAC/C,mDAAmD,MADJ,EAE/C,4BAA4B,MAFmB,EAGnD;AACI,iDAA6C,MAJE,EAK/C,8BAA8B,MALiB,EAM/C,0BAA0B,MANqB,EAO9C,IAP8C,CAOzC,GAPyC,CAAhC,GAOF,GAPC,CADhB;AASC,IAAA,MAAM,EAAE,IATT;AAUC,IAAA,MAAM,EAAE;AACP,uBAAiB;AADV;AAVT,GAD6B,EAe7B;AACC,IAAA,OAAO,EAAE,mEADV;AAEC,IAAA,MAAM,EAAE,IAFT;AAGC,IAAA,MAAM,EAAE;AACP,uBAAiB;AADV;AAHT,GAf6B,EAsB7B;AACC,IAAA,OAAO,EAAE,iDADV;AAEC,IAAA,KAAK,EAAE,gBAFR;AAGC,IAAA,MAAM,EAAE,IAHT;AAIC,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,+BADG;AAEZ,QAAA,KAAK,EAAE,QAFK;AAGZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAHI,OADN;AAQP,uBAAiB;AARV;AAJT,GAtB6B,EAqC7B;AACC,IAAA,OAAO,EAAE,mDADV;AAEC,IAAA,KAAK,EAAE,gBAFR;AAGC,IAAA,MAAM,EAAE,IAHT;AAIC,IAAA,MAAM,EAAE;AACP,mBAAa;AACZ,QAAA,OAAO,EAAE,iCADG;AAEZ,QAAA,KAAK,EAAE,QAFK;AAGZ,QAAA,MAAM,EAAE;AACP,yBAAe;AADR;AAHI;AADN;AAJT,GArC6B,CAA9B;AAqDA,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,IAArC;AACA,CAnIA,EAmIC,KAnID,CAAD;;ACNC,WAAU,KAAV,EAAiB;AACjB,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B;AACtD;AACE,eAAW;AACV,MAAA,OAAO,EAAE,+CADC;AAEV,MAAA,UAAU,EAAE,IAFF;AAGV,MAAA,MAAM,EAAE;AAHE;AAFyC,GAA9B,CAAvB;AASA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAChD;AACE,mBAAe;AACjB;AACG,MAAA,OAAO,EAAE,qBAFK;AAGd,MAAA,MAAM,EAAE,IAHM;AAId,MAAA,MAAM,EAAE;AACP,kBAAU;AADH;AAJM;AAF+B,GAA/C;AAWA,SAAO,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,MAA5B;AAGA,MAAI,QAAQ,GAAG,wBAAf;AACA,MAAI,QAAQ,GAAG,CACd,0CADc,EAEd;AACC,IAAA,OAAO,EAAE,aADV;AAEC,IAAA,UAAU,EAAE;AAFb,GAFc,CAAf;AAQA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAClD;AACE,qBAAiB;AAChB,MAAA,OAAO,EAAE,cADO;AAEhB,MAAA,MAAM,EAAE,IAFQ;AAGhB,MAAA,MAAM,EAAE;AACP,uBAAe,GADR;AAEP,oBAAY,QAFL;AAGP,oBAAY;AAHL;AAHQ,KAF+B;AAWlD;AACE,qBAAiB;AAChB,MAAA,OAAO,EAAE,oCADO;AAEhB,MAAA,MAAM,EAAE,IAFQ;AAGhB,MAAA,MAAM,EAAE;AACP,oBAAY,CACX,iBADW,EAEX;AACC,UAAA,OAAO,EAAE,YADV;AAEC,UAAA,UAAU,EAAE;AAFb,SAFW,CADL;AAQP,uBAAe,GARR;AASP,oBAAY,QATL;AAUP,oBAAY,QAVL;AAWP,qBAAa,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB;AAX3B;AAHQ;AAZ+B,GAAjD;AA8BA,SAAO,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,QAA5B;AACA,SAAO,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,SAA5B,CAhEiB,CAkElB;AACA;;AACC,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;AACnD,gBAAY;AACX,MAAA,OAAO,EAAE,wHADE;AAEX,MAAA,UAAU,EAAE,IAFD;AAGX,MAAA,MAAM,EAAE;AAHG;AADuC,GAApD;AAQA,CA5EA,EA4EC,KA5ED,CAAD;;ACAC,WAAU,KAAV,EAAiB;AACjB,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB;AAC1B;AACA;AACA;AACA;AACA;AACE,eAAW,wIANa;AAOxB,cAAU;AACT,MAAA,OAAO,EAAE,mBADA;AAET,MAAA,MAAM,EAAE;AAFC,KAPc;AAWxB,cAAU;AACT,MAAA,OAAO,EAAE,iBADA;AAET,MAAA,MAAM,EAAE;AAFC,KAXc;AAexB,iBAAa;AACZ,MAAA,OAAO,EAAE,yEADG;AAEZ,MAAA,MAAM,EAAE,IAFI;AAGZ,MAAA,KAAK,EAAE;AAHK,KAfW;AAoBxB,wBAAoB,CACtB;AACG;AACC,MAAA,OAAO,EAAE,oEADV;AAEC,MAAA,UAAU,EAAE;AAFb,KAFmB,EAMnB;AACC,MAAA,OAAO,EAAE,8CADV;AAEC,MAAA,UAAU,EAAE;AAFb,KANmB,CApBI;AA+BxB,eAAW;AACV,MAAA,OAAO,EAAE,oZADC;AAEV,MAAA,UAAU,EAAE;AAFF,KA/Ba;AAmCxB,eAAW;AACb;AACG,MAAA,OAAO,EAAE,yoDAFC;AAGV,MAAA,UAAU,EAAE;AAHF,KAnCa;AAwCxB,gBAAY;AACX,MAAA,OAAO,EAAE,2DADE;AAEX,MAAA,UAAU,EAAE;AAFD,KAxCY;AA4CxB,cAAU;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,MAAA,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;AACzB,uBAAe,qDAAqD,MAD3C;AAEzB,sBAAc,sCAAsC,MAF3B;AAGzB,2BAAmB,uCAAuC,MAHjC;AAIzB,yBAAiB,6DAA6D,MAJrD;AAKzB,qBAAa,8CAA8C,MALlC;AAOzB,uBAAe,4BAA4B,MAPlB;AAQzB,sBAAc,sCAAsC,MAR3B;AASzB,2BAAmB,uCAAuC,MATjC;AAUzB,yBAAiB,6DAA6D,MAVrD;AAWzB,qBAAa,iDAAiD,MAXrC;AAazB,oBAAY,wDAAwD;AAb3C,OAAD,CAAV,EAcX,GAdW,CA1BN;AAyCT,MAAA,UAAU,EAAE;AAzCH,KA5Cc;AAuFxB,eAAW;AACV,MAAA,OAAO,EAAE,oDADC;AAEV,MAAA,UAAU,EAAE;AAFF,KAvFa;AA2FxB,gBAAY;AACX,MAAA,OAAO,EAAE,2EADE;AAEX,MAAA,UAAU,EAAE;AAFD,KA3FY;AA+FxB,kBAAc;AACb,MAAA,OAAO,EAAE,mDADI;AAEb,MAAA,UAAU,EAAE,IAFC;AAGb,MAAA,MAAM,EAAE;AAHK,KA/FU;AAoGxB,mBAAe;AApGS,GAAzB;AAuGD;AACA;AACA;AACA;AACA;AACA;;AACC,WAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC3B,SAAK,IAAI,GAAT,IAAgB,OAAhB,EAAyB;AACxB,MAAA,OAAO,CAAC,GAAD,CAAP,GAAe,OAAO,CAAC,GAAD,CAAP,CAAa,OAAb,CAAqB,YAArB,EAAmC,UAAU,GAAV,EAAe;AAChE,eAAO,QAAQ,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,EAAR,GAA8B,GAArC;AACA,OAFc,CAAf;AAGA,KAL0B,CAM7B;;;AACE,WAAO,OAAO,CAAC,GAAD,CAAd;AACA;AAED,CAxHA,EAwHC,KAxHD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B;AACpD,aAAW;AACV,IAAA,OAAO,EAAE,sCADC;AAEV,IAAA,UAAU,EAAE;AAFF,GADyC;AAKpD,YAAU;AACT,IAAA,OAAO,EAAE,qDADA;AAET,IAAA,MAAM,EAAE;AACP,cAAQ,SADD,CAEV;;AAFU;AAFC,GAL0C;AAYrD;AACC,SAAO,yBAb6C;AAcrD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY;AACb;AACE,IAAA,OAAO,EAAE,iGAFE;AAGX,IAAA,MAAM,EAAE;AACP,gBAAU;AACT,QAAA,OAAO,EAAE,GADA;AAET,QAAA,KAAK,EAAE;AAFE,OADH;AAKP,qBAAe,SALR;AAMP,kBAAY;AANL;AAHG,GArBwC;AAiCpD,cAAY;AACX,IAAA,OAAO,EAAE,0CADE;AAEX,IAAA,MAAM,EAAE;AACP,kBAAY;AADL;AAFG;AAjCwC,CAA9B,CAAvB;AAyCA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C,aAAW,CACV,mHADU,EAEV;AACC,IAAA,OAAO,EAAE,0BADV;AAEC,IAAA,UAAU,EAAE;AAFb,GAFU;AADmC,CAA/C;AAUA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,WAArC,EAAkD;AAClD;AACC,cAAY;AAFqC,CAAlD;AAKA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD,qBAAmB;AAClB,IAAA,OAAO,EAAE,4BADS;AAElB,IAAA,KAAK,EAAE;AAFW,GAD6B;AAKhD,iBAAe;AACd,IAAA,OAAO,EAAE,SADK;AAEd,IAAA,KAAK,EAAE;AAFO,GALiC;AAShD,eAAa;AACZ,IAAA,OAAO,EAAE,4BADG;AAEZ,IAAA,KAAK,EAAE;AAFK,GATmC;AAahD,aAAW,oBAbqC;AAchD,UAAQ;AACP,IAAA,OAAO,EAAE,UADF;AAEP,IAAA,KAAK,EAAE;AAFA,GAdwC;AAkBhD,cAAY;AACX,IAAA,OAAO,EAAE,iDADE;AAEX,IAAA,UAAU,EAAE;AAFD;AAlBoC,CAAjD;AAwBA,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,QAArB,EAA+B,MAA/B,CAAsC,IAAtC,GAA6C,KAAK,CAAC,SAAN,CAAgB,IAA7D;AChFA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB;AACrB,aAAW;AACV,IAAA,OAAO,EAAE,+CADC;AAEV,IAAA,UAAU,EAAE;AAFF,GADU;AAKrB,cAAY,CACX;AACC,IAAA,OAAO,EAAE,qCADV;AAEC,IAAA,MAAM,EAAE;AAFT,GADW,EAKX,UALW,CALS;AAYrB,YAAU;AACT,IAAA,OAAO,EAAE,iDADA;AAET,IAAA,MAAM,EAAE,IAFC;AAGT,IAAA,UAAU,EAAE;AAHH,GAZW;AAiBrB,cAAY,2FAjBS;AAiBkF;AACvG,aAAW,s9EAlBU;AAmBrB,aAAW,0BAnBU;AAoBrB,YAAU,2CApBW;AAqBrB,cAAY,8HArBS;AAsBrB,iBAAe;AAtBM,CAAtB;ACAA,KAAK,CAAC,SAAN,CAAgB,KAAhB,GAAwB;AACvB,aAAW;AACZ;AACE,IAAA,OAAO,EAAE,sFAFC;AAGV,IAAA,UAAU,EAAE,IAHF;AAIV,IAAA,MAAM,EAAE;AAJE,GADY;AAOvB,oBAAkB,CACnB;AACE;AACC,IAAA,OAAO,EAAE,MAAM,CACd,YAAY,MAAZ,GACE,KADF,CAEJ;AAFI,MAGE,8DAA8D,MAHhE,GAIE,GAJF,CAKJ;AALI,MAME,iEAAiE,MANnE,GAOE,GAPF,GAQE,WAAW,MATC,CADhB;AAYC,IAAA,UAAU,EAAE,IAZb;AAaC,IAAA,MAAM,EAAE,IAbT;AAcC,IAAA,MAAM,EAAE;AACP,uBAAiB;AAChB,QAAA,OAAO,EAAE,mCADO;AAEhB,QAAA,UAAU,EAAE,IAFI;AAGhB,QAAA,MAAM,EAAE,IAHQ,CAGJ;;AAHI,OADV;AAMP,mCAA6B;AAC5B,QAAA,OAAO,EAAE,WADmB;AAE5B,QAAA,KAAK,EAAE;AAFqB,OANtB;AAUP,qBAAe,cAVR;AAWP,gBAAU;AAXH;AAdT,GAFiB,EA8BjB;AACC,IAAA,OAAO,EAAE,MAAM,CACd,gBAAgB,MAAhB,GACE,KADF,CAEJ;AAFI,MAGE,gEAAgE,MAHlE,GAIE,GAJF,CAKJ;AALI,MAME,2DAA2D,MAN7D,GAOE,GAPF,GAQE,KATY,CADhB;AAYC,IAAA,UAAU,EAAE,IAZb;AAaC,IAAA,MAAM,EAAE,IAbT;AAcC,IAAA,MAAM,EAAE;AACP,uBAAiB;AAChB,QAAA,OAAO,EAAE,qCADO;AAEhB,QAAA,UAAU,EAAE,IAFI;AAGhB,QAAA,MAAM,EAAE,IAHQ,CAGJ;;AAHI,OADV;AAMP,mCAA6B;AAC5B,QAAA,OAAO,EAAE,aADmB;AAE5B,QAAA,KAAK,EAAE;AAFqB,OANtB;AAUP,gBAAU;AAVH;AAdT,GA9BiB,CAPK;AAkEvB,eAAa;AACd;AACE,IAAA,OAAO,EAAE,MAAM,CACd,IAAI,MAAJ,GACE,KADF,IAGC,kBAAkB,MAAlB,GACE,WADF,CAEJ;AACA;AACA;AAJI,MAKE,8GAA8G,MALhH,GAME,IATH,IAWE,GAXF,GAYE,mBAAmB,MAZrB,GAaE,GAdY,CAFH;AAkBZ,IAAA,KAAK,EAAE,UAlBK;AAmBZ,IAAA,MAAM,EAAE;AACP,wBAAkB,OADX;AAEP,iBAAW,oBAFJ;AAGP,gBAAU,mBAHH;AAIP,kBAAY,kBAJL;AAKP,qBAAe;AALR;AAnBI,GAlEU;AA6FvB,aAAW;AACV,IAAA,OAAO,EAAE,0FADC;AAEV,IAAA,KAAK,EAAE;AAFG,GA7FY;AAiGvB,qBAAmB;AAClB,IAAA,OAAO,EAAE,QADS;AAElB,IAAA,KAAK,EAAE;AAFW,GAjGI;AAsGvB,eAAa;AACZ,IAAA,OAAO,EAAE,MADG;AAEZ,IAAA,KAAK,EAAE;AAFK,GAtGU;AA2GvB,yBAAuB;AACtB,IAAA,OAAO,EAAE,gBADa;AAEtB,IAAA,UAAU,EAAE,IAFU;AAGtB,IAAA,KAAK,EAAE;AAHe,GA3GA;AAgHvB,WAAS;AACV;AACE,IAAA,OAAO,EAAE,0EAFD;AAGR,IAAA,UAAU,EAAE,IAHJ;AAIR,IAAA,KAAK,EAAE;AAJC,GAhHc;AAuHvB,aAAW,6mBAvHY;AAwHvB,aAAW,oBAxHY;AAyHvB,SAAO;AACN,IAAA,OAAO,EAAE,SADH;AAEN,IAAA,KAAK,EAAE;AAFD,GAzHgB;AA8HvB,oBAAkB,SA9HK;AA+HvB,UAAQ;AACP,IAAA,OAAO,EAAE,OADF;AAEP,IAAA,KAAK,EAAE;AAFA,GA/He;AAmIvB,YAAU,iFAnIa;AAqIxB;AACC,gBAAc,iCAtIS;AAuIvB,cAAY,uBAvIW;AAwIvB,cAAY,qCAxIW;AA0IxB;AACA;AACA;AACC,cAAY,yCA7IW;AA8IvB,iBAAe;AA9IQ,CAAxB;AAiJA,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,gBAAtB,EAAwC,OAAxC,CAAgD,UAAU,IAAV,EAAgB;AAC/D,EAAA,IAAI,CAAC,MAAL,CAAY,eAAZ,EAA6B,MAA7B,GAAsC,KAAK,CAAC,SAAN,CAAgB,KAAtD;AACA,CAFD;;ACjJC,WAAU,KAAV,EAAiB;AACjB,MAAI,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAiB,KAAK,CAAC,SAAN,CAAgB,UAAjC,CAAjB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B,UAA9B,CAAtB,CAFiB,CAIlB;AACA;AACA;;AACC,MAAI,GAAG,GAAG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,GAA9B;AACA,EAAA,GAAG,CAAC,OAAJ,GAAc,MAAM,CAAC,qBAAqB,MAArB,GAA8B,KAA9B,GAAsC,GAAG,CAAC,OAAJ,CAAY,MAAlD,GAA2D,GAA5D,EAAiE,GAAG,CAAC,OAAJ,CAAY,KAA7E,CAApB;AACA,EAAA,GAAG,CAAC,UAAJ,GAAiB,IAAjB;AACA,CAVA,EAUC,KAVD,CAAD;;ACAC,WAAU,KAAV,EAAiB;AAEjB,EAAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,YAAvB,EAAqC;AACjE,kBAAc;AACb,MAAA,OAAO,EAAE,8KADI;AAEb,MAAA,UAAU,EAAE,IAFC;AAGb,MAAA,MAAM,EAAE,IAHK;AAIb,MAAA,MAAM,EAAE,IAJK,CAID;;AAJC,KADmD;AAOjE,eAAW;AAPsD,GAArC,CAA7B,CAFiB,CAYlB;;AACC,EAAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,OAA3B,CAAmC,IAAnC,CACC,kEADD,EAED;AACE,4FAHD,EAID;AACE,8BALD,EAbiB,CAqBlB;;AACC,SAAO,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,WAA3B,CAAP,CAtBiB,CAwBlB;;AACC,MAAI,UAAU,GAAG,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;AACA,SAAO,UAAU,CAAC,YAAD,CAAjB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,UAAhB,CAA2B,YAA3B,EAAyC,MAAzC,GAAkD,UAAlD;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACtD,iBAAa;AACZ,MAAA,OAAO,EAAE,oBADG;AAEZ,MAAA,MAAM,EAAE;AACP,cAAM;AACL,UAAA,OAAO,EAAE,IADJ;AAEL,UAAA,KAAK,EAAE;AAFF,SADC;AAKP,oBAAY;AALL;AAFI,KADyC;AAWtD,wBAAoB;AACtB;AACG,MAAA,OAAO,EAAE,wGAFU;AAGnB,MAAA,MAAM,EAAE,IAHW;AAInB,MAAA,MAAM,EAAE;AACP,oBAAY,2DADL;AAEP,mBAAW;AACV,UAAA,OAAO,EAAE,UADC;AACS;AACnB,UAAA,KAAK,EAAE,YAFG;AAGV,UAAA,MAAM,EAAE;AAHE;AAFJ;AAJW;AAXkC,GAAvD;AA0BA,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,UAArC;AAEA,CA1DA,EA0DC,KA1DD,CAAD;;ACAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB;AACtB,aAAW,CACV,gBADU,EAEV;AACC,IAAA,OAAO,EAAE,MADV;AAEC,IAAA,MAAM,EAAE;AAFT,GAFU,CADW;AAQtB,YAAU;AACT,IAAA,OAAO,EAAE,wBADA;AAET,IAAA,MAAM,EAAE;AAFC,GARY;AAYtB,aAAW,CACV;AACC,IAAA,OAAO,EAAE,qBADV;AAEC,IAAA,MAAM,EAAE;AACP,kBAAY;AADL;AAFT,GADU,EAOV;AACC,IAAA,OAAO,EAAE,gbADV;AAEC,IAAA,MAAM,EAAE;AACP,qBAAe;AADR;AAFT,GAPU,EAaV,0QAbU,CAZW;AA2BtB,cAAY,kCA3BU;AA4BtB,YAAU,iNA5BY;AA6BtB,iBAAe;AA7BO,CAAvB;;ACAC,WAAU,KAAV,EAAiB;AAElB;AACA;AACC,MAAI,aAAa,GAAG,kBAApB,CAJiB,CAKlB;;AACC,MAAI,GAAG,GAAG,kFAAV,CANiB,CAOlB;;AACC,MAAI,UAAU,GAAG,QAAQ,GAAG,CAAC,MAAZ,GAAqB,WAArB,GAAmC,aAAa,CAAC,MAAjD,GAA0D,KAA1D,GACd,aAAa,CAAC,MADA,GACS,WADT,GACuB,GAAG,CAAC,MAD3B,GACoC,KADrD,CARiB,CAUlB;AACA;AACA;;AACC,MAAI,QAAQ,GAAG,kJAAkJ,MAAlJ,CACb,OADa,CACL,UADK,EACO,YAAY;AAAE,WAAO,2EAA2E,MAAlF;AAA2F,GADhH,CAAf;AAEA,MAAI,MAAM,GAAG,8CAA8C,MAA3D;AAED;AACA;AACA;AACA;AACA;AACA;;AACC,WAAS,kBAAT,CAA4B,KAA5B,EAAmC,KAAnC,EAA0C;AACzC,IAAA,KAAK,GAAG,CAAC,KAAK,IAAI,EAAV,EAAc,OAAd,CAAsB,IAAtB,EAA4B,EAA5B,IAAkC,GAA1C,CADyC,CACK;;AAC9C,QAAI,OAAO,GAAG,yFAAyF,MAAzF,CACZ,OADY,CACJ,WADI,EACS,YAAY;AAAE,aAAO,UAAP;AAAoB,KAD3C,EAC6C,OAD7C,CACqD,YADrD,EACmE,YAAY;AAAE,aAAO,KAAP;AAAe,KADhG,CAAd;AAEA,WAAO,MAAM,CAAC,OAAD,EAAU,KAAV,CAAb;AACA;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB;AACtB,cAAU;AACT,MAAA,OAAO,EAAE,MAAM,CAAC,6FAA6F,MAA7F,CACd,OADc,CACN,WADM,EACO,YAAY;AAAE,eAAO,UAAP;AAAoB,OADzC,CAAD,CADN;AAGT,MAAA,UAAU,EAAE,IAHH;AAIT,MAAA,KAAK,EAAE;AAJE,KADY;AAOtB,eAAW,KAPW;AAQtB,WAAO;AACN,MAAA,OAAO,EAAE,MAAM,CAAC,kEAAkE,MAAlE,CACd,OADc,CACN,WADM,EACO,YAAY;AAAE,eAAO,UAAP;AAAoB,OADzC,EAEd,OAFc,CAEN,UAFM,EAEM,YAAY;AAAE,eAAO,QAAQ,QAAR,GAAmB,GAAnB,GAAyB,MAAzB,GAAkC,GAAzC;AAA+C,OAFnE,CAAD,CADT;AAIN,MAAA,UAAU,EAAE,IAJN;AAKN,MAAA,MAAM,EAAE,IALF;AAMN,MAAA,KAAK,EAAE;AAND,KARe;AAgBtB,iBAAa;AACZ,MAAA,OAAO,EAAE,eADG;AAEZ,MAAA,UAAU,EAAE,IAFA;AAGZ,MAAA,KAAK,EAAE;AAHK,KAhBS;AAqBtB,gBAAY;AACX,MAAA,OAAO,EAAE,kBAAkB,CAAC,sJAAsJ,MAAvJ,CADhB;AAEX,MAAA,UAAU,EAAE,IAFD;AAGX,MAAA,KAAK,EAAE;AAHI,KArBU;AA0BtB,eAAW;AACV,MAAA,OAAO,EAAE,kBAAkB,CAAC,aAAa,MAAd,EAAsB,GAAtB,CADjB;AAEV,MAAA,UAAU,EAAE,IAFF;AAGV,MAAA,KAAK,EAAE;AAHG,KA1BW;AA+BtB,YAAQ;AACP,MAAA,OAAO,EAAE,kBAAkB,CAAC,SAAS,MAAV,EAAkB,GAAlB,CADpB;AAEP,MAAA,UAAU,EAAE,IAFL;AAGP,MAAA,KAAK,EAAE;AAHA,KA/Bc;AAoCtB,cAAU;AACT,MAAA,OAAO,EAAE,kBAAkB,CAAC,MAAD,CADlB;AAET,MAAA,UAAU,EAAE,IAFH;AAGT,MAAA,MAAM,EAAE;AAHC,KApCY;AAyCtB,cAAU;AACT,MAAA,OAAO,EAAE,kBAAkB,CAAC,iFAAiF,MAAlF,EAA0F,GAA1F,CADlB;AAET,MAAA,UAAU,EAAE;AAFH,KAzCY;AA6CtB,WAAO,GA7Ce;AA8CtB,iBAAa,aA9CS;AA+CtB,mBAAe;AA/CO,GAAvB;AAkDA,EAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,GAAsB,KAAK,CAAC,SAAN,CAAgB,IAAtC;AAEA,CAlFA,EAkFC,KAlFD,CAAD;ACAA;;;MAuDaC,gBAA0B,GAAG,CAAA,MAAA,EAAS;AAAEC,EAAAA;AAAF,CAAT,KAAsB;AAC9D,QAAMC,UAAU,GAAGC,SAAS,CAAA,MAAA,EAA5B,kBAA4B,CAA5B;AAEA,SAAQC,KAAD,IAAsB;AAC3B,UAAMC,MAAW,GAAjB,EAAA;AACA,UAAM,CAAA,IAAA,EAAA,IAAA,IAAN,KAAA;AACA,UAAMC,SAAS,GAAGC,SAAS,CAAA,MAAA,EAA3B,IAA2B,CAA3B;AAEA,QAAI,CAAJ,SAAA,EAAgB;AAEhB,QAAIC,QAAQ,GAAZ,EAAA;;AACA,QAAI,CAAA,SAAS,KAAT,IAAA,IAAA,SAAS,KAAA,KAAT,CAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAT,CAAS,CAAT,CAAA,IAAA,MAAwBN,UAAU,CAAtC,IAAA,EAA6C;AAC3C,YAAM,CAAA,aAAA,IAAN,SAAA;AACAM,MAAAA,QAAQ,GAAGC,aAAH,KAAA,IAAGA,IAAAA,aAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,aAAa,CAAxBD,IAAAA;AACD;;AAED,QAAI,CAACN,UAAU,CAAVA,OAAAA,CAAD,MAAA,IAA8BM,QAAQ,KAA1C,OAAA,EAAwD;AACtDA,MAAAA,QAAQ,GAARA,EAAAA;AACD;;AACD,UAAME,IAAI,GAAGC,SAAS,CAAtB,QAAsB,CAAtB;;AAEA,QAAI,CAAJ,IAAA,EAAW;AACT,aAAA,MAAA;AACD;;AAED,QAAIC,SAAS,CAATA,IAAS,CAATA,IAAmBC,IAAI,CAAJA,IAAAA,KAAvB,IAAA,EAA2C;AACzC,YAAMC,IAAI,GAAGC,IAAI,CAAJA,MAAAA,CAAb,IAAaA,CAAb;AACA,YAAMC,MAAM,GAAGC,QAAQ,CAAA,IAAA,EAAvB,IAAuB,CAAvB;AACA,UAAIC,MAAM,GAAV,CAAA;;AAEA,WAAK,MAAL,OAAA,IAAA,MAAA,EAA8B;AAC5B,YAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/BA,UAAAA,MAAM,IAAIC,OAAO,CAAjBD,MAAAA;AADF,SAAA,MAEO;AACL,gBAAME,KAAY,GAAlB,OAAA;AACAf,UAAAA,MAAM,CAANA,IAAAA,CAAY;AACVgB,YAAAA,MAAM,EAAE;AAAA,cAAA,IAAA;AAAQH,cAAAA;AAAR,aADE;AAEVI,YAAAA,KAAK,EAAE;AAAA,cAAA,IAAA;AAAQJ,cAAAA,MAAM,EAAEA,MAAM,GAAGE,KAAK,CAACG;AAA/B,aAFG;AAGVC,YAAAA,SAAS,EAAG,qBAAoBJ,KAAK,CAACnB,IAH5B,GAAA;AAIV,aAACmB,KAAK,CAAN,IAAA,GAJU,IAAA;AAKVK,YAAAA,KAAK,EAAE;AALG,WAAZpB;AAOAa,UAAAA,MAAM,IAAIE,KAAK,CAAfF,MAAAA;AACD;AACF;AACF;;AACD,WAAA,MAAA;AA3CF,GAAA;AA6CD,C;;MCpGYQ,wBAAyC,GAAG;AACvDC,EAAAA,OAAO,EAAGC,EAAD,IAAQ;AAAA,QAAA,eAAA,EAAA,MAAA;;AACf,QAAIC,KAAK,GAAA,CAAA,eAAA,GAAGD,EAAE,CAAL,WAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,eAAAA,CAAAA,KAAAA,CAAZ,IAAYA,CAAZ;;AAEA,QAAI,EAAA,CAAA,MAAA,GAAA,KAAA,MAAA,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,IAACC,MAAAA,CAAL,MAAI,CAAJ,EAAoB;AAAA,UAAA,gBAAA;;AAClBA,MAAAA,KAAK,GAAG,CAAA,CAAA,gBAAA,GAACD,EAAE,CAAH,WAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,gBAAA,GAARC,EAAQ,CAARA;AACD;;AAED,UAAMC,SAAS,GAAG,KAAK,CAAL,GAAA,CAAWC,IAAD,KAAW;AACrC9B,MAAAA,IAAI,EADiC,iBAAA;AAErC+B,MAAAA,QAAQ,EAAE,CAAC;AAAElB,QAAAA,IAAI,EAAEiB;AAAR,OAAD;AAF2B,KAAX,CAAV,CAAlB;AAKA,WAAO;AACL9B,MAAAA,IAAI,EADC,kBAAA;AAEL+B,MAAAA,QAAQ,EAAEF;AAFL,KAAP;AAID;AAjBsD,C;;MCA5CG,eAAe,GAAYC,MAAT,IAC7BC,aAAa,CAAA,MAAA,EAAA,iBAAA,C;ACMf;AACA;AACA;;;MACaC,gBAAgB,GAAG,CAAA,MAAA,EAE9B;AAAEC,EAAAA,EAAE,GAAGH,MAAM,CAACI;AAAd,IAF8B,EAAA,KAG3B;AACH,MACED,EAAE,IACFE,QAAQ,CAAA,MAAA,EAAS;AAAA,IAAA,EAAA;AAEfC,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AAAvB;AAFQ,GAAT,CAFV,EAME;AACA,UAAMQ,eAAe,GAAGlC,SAAS,CAAA,MAAA,EAAjC,EAAiC,CAAjC;AACA,QAAI,CAAJ,eAAA,EAAsB;AACtB,UAAM,GAAA,UAAA,IAAN,eAAA;AAEA,UAAMmC,QAAQ,GACZ,QAAQ,CAAA,MAAA,EAAS;AAAA,MAAA,EAAA;AAEfF,MAAAA,KAAK,EAAE;AAAEvC,QAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AAAvB;AAFQ,KAAT,CAAR,IAGM1B,SAAS,CAAA,MAAA,EAJjB,UAIiB,CAJjB;AAMA,QAAI,CAAJ,QAAA,EAAe;AACf,UAAM,CAAA,YAAA,EAAA,YAAA,IAAN,QAAA;AAEA,QACEK,SAAS,CAATA,YAAS,CAATA,IACA+B,YAAY,CAAZA,IAAAA,KAAsBV,eAAe,CAFvC,MAEuC,CAFvC,EAIE;AAEF,UAAM3B,SAAS,GAAGC,SAAS,CAAA,MAAA,EAA3B,YAA2B,CAA3B;AACA,QAAI,CAAJ,SAAA,EAAgB;AAEhB,WAAO;AAAA,MAAA,SAAA;AAELmC,MAAAA;AAFK,KAAP;AAID;AACF,C;AC/CD;AACA;AACA;;;MACaE,YAAY,GAAG,CAAA,MAAA,EAE1B;AAAEP,EAAAA,EAAE,GAAGH,MAAM,CAACI;AAAd,IAF0B,EAAA,KAGvB;AACH,MAAI,CAAJ,EAAA,EAAS;AAET,SAAO,CACL,GAAGO,QAAQ,CAAA,MAAA,EAAS;AAAA,IAAA,EAAA;AAElBL,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AAAvB;AAFW,GAAT,CADN,CAAP;AAMD,C;ACXD;AACA;AACA;AACA;AACA;AACA;;;MACaa,cAAc,GAAG,CAAA,MAAA,EAE5B;AAAEJ,EAAAA;AAAF,CAF4B,KAGzB;AACH,QAAM,GAAA,YAAA,IAAN,QAAA;AACA,QAAMK,aAAa,GAAGC,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAtB,YAAsBA,CAAtB;;AACA,MAAI,CAACC,UAAU,CAACf,MAAM,CAAtB,SAAe,CAAf,EAAmC;AAAA,QAAA,iBAAA;;AACjC,UAAMgB,MAAM,GAAA,CAAA,iBAAA,GAAGhB,MAAM,CAAT,SAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,iBAAAA,CAAf,MAAA;AACA,UAAMiB,KAAK,GAAGH,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAAA,aAAAA,EAAd,MAAcA,CAAd;AACA,UAAMlC,IAAI,GAAGkC,MAAM,CAANA,MAAAA,CAAAA,MAAAA,EAAb,KAAaA,CAAb;;AAEA,QAAI,KAAA,IAAA,CAAJ,IAAI,CAAJ,EAAqB;AACnBI,MAAAA,UAAU,CAAVA,UAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAoC;AAAEf,QAAAA,EAAE,EAAEH,MAAM,CAACI;AAAb,OAApCc;AACA;AACD;AACF;;AAEDA,EAAAA,UAAU,CAAVA,UAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAoC;AAAEf,IAAAA,EAAE,EAAEU;AAAN,GAApCK;AACD,C;AC5BD;AACA;AACA;AACA;;;MACaC,gBAAgB,GAAG,CAAA,MAAA,EAE9B;AAAEX,EAAAA;AAAF,CAF8B,KAG3B;AACH,QAAM,GAAA,YAAA,IAAN,QAAA;AACA,QAAMK,aAAa,GAAGC,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAtB,YAAsBA,CAAtB;AACA,QAAMM,WAAW,GAAGP,aAAa,IAAIC,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAArC,aAAqCA,CAArC;AACA,QAAMO,UAAU,GACdD,WAAW,IAAIN,MAAM,CAANA,KAAAA,CAAAA,MAAAA,EAAAA,aAAAA,EADjB,WACiBA,CADjB;AAEA,QAAMQ,SAAS,GAAGC,OAAO,CAAA,MAAA,EAAzB,UAAyB,CAAzB;;AAEA,MAAI,KAAA,IAAA,CAAJ,SAAI,CAAJ,EAA0B;AACxBL,IAAAA,UAAU,CAAVA,MAAAA,CAAAA,MAAAA,EAA0B;AAAEf,MAAAA,EAAE,EAAEkB;AAAN,KAA1BH;AACA,WAAA,IAAA;AACD;;AAED,SAAA,KAAA;AACD,C;AChBD;AACA;AACA;AACA;;;MACaM,eAAe,GAAG,CAAA,MAAA,EAE7B;AAAA,EAAA,SAAA;AAAahB,EAAAA;AAAb,CAF6B,KAG1B;AACH,QAAMiB,OAAO,GAAGN,gBAAgB,CAAA,MAAA,EAAS;AAAA,IAAA,SAAA;AAAaX,IAAAA;AAAb,GAAT,CAAhC;AACAiB,EAAAA,OAAO,IAAIN,gBAAgB,CAAA,MAAA,EAAS;AAAA,IAAA,SAAA;AAAaX,IAAAA;AAAb,GAAT,CAA3BiB;AACD,C;ACXD;AACA;AACA;AACA;;;MACaC,kBAAwD,GACnE1B,MADsE,IAElE2B,CAAD,IAAO;AACV,MAAIA,CAAC,CAADA,GAAAA,KAAJ,KAAA,EAAqB;AACnB,UAAMC,QAAQ,GAAGD,CAAC,CAAlB,QAAA;AACA,UAAME,GAAG,GAAG3B,gBAAgB,CAAA,MAAA,EAA5B,EAA4B,CAA5B;;AACA,QAAA,GAAA,EAAS;AACP,YAAM;AAAA,QAAA,SAAA;AAAaM,QAAAA;AAAb,UAAN,GAAA;AAEAmB,MAAAA,CAAC,CAHM,cAGPA,GAHO,CAAA;;AAOP,UAAA,QAAA,EAAc;AACZ;AACAH,QAAAA,eAAe,CAAA,MAAA,EAAS;AAAA,UAAA,SAAA;AAAahB,UAAAA;AAAb,SAAT,CAAfgB;AATK,OAAA,CAAA;;;AAaP,YAAMM,GAAG,GAAG,CAACH,CAAC,CAAd,QAAA;;AACA,UAAA,GAAA,EAAS;AACP;AACAf,QAAAA,cAAc,CAAA,MAAA,EAAS;AAAA,UAAA,SAAA;AAAaJ,UAAAA;AAAb,SAAT,CAAdI;AACD;;AACD;AACD;;AACD,UAAMhB,SAAS,GAAGc,YAAY,CAAA,MAAA,EAA9B,EAA8B,CAA9B;;AACA,QAAId,SAAS,IAAIA,SAAJ,KAAA,IAATA,IAAaA,SAAJ,KAAA,KAAA,CAATA,IAAaA,SAAS,CAA1B,CAA0B,CAA1B,EAAiC;AAC/B+B,MAAAA,CAAC,CAADA,cAAAA;AACA,YAAM,GAAA,aAAA,IAAoB/B,SAAS,CAAnC,CAAmC,CAAnC;AACA,YAAMxB,SAAS,GAAGC,SAAS,CAAA,MAAA,EAA3B,aAA2B,CAA3B;;AACA,WAAK,MAAL,QAAA,IAAA,SAAA,EAAkC;AAChC,YAAA,QAAA,EAAc;AACZ;AACAmD,UAAAA,eAAe,CAAA,MAAA,EAAS;AAAA,YAAA,SAAA;AAAahB,YAAAA;AAAb,WAAT,CAAfgB;AAH8B,SAAA,CAAA;;;AAOhC,cAAMM,GAAG,GAAG,CAACH,CAAC,CAAd,QAAA;;AACA,YAAA,GAAA,EAAS;AACP;AACAf,UAAAA,cAAc,CAAA,MAAA,EAAS;AAAA,YAAA,SAAA;AAAaJ,YAAAA;AAAb,WAAT,CAAdI;AACD;AACF;AACF;AA1CO,GAAA,CAAA;;;AA8CV,MAAIe,CAAC,CAADA,GAAAA,KAAAA,GAAAA,KAAkBA,CAAC,CAADA,OAAAA,IAAaA,CAAC,CAApC,OAAIA,CAAJ,EAA+C;AAC7C,UAAME,GAAG,GAAG3B,gBAAgB,CAAA,MAAA,EAA5B,EAA4B,CAA5B;AACA,QAAI,CAAJ,GAAA,EAAU;AAEV,UAAM;AAAE9B,MAAAA;AAAF,QAAN,GAAA;AACA,UAAM,GAAA,aAAA,IALuC,SAK7C,CAL6C,CAAA;;AAQ7C8C,IAAAA,UAAU,CAAVA,MAAAA,CAAAA,MAAAA,EAAAA,aAAAA;AAEAS,IAAAA,CAAC,CAADA,cAAAA;AACAA,IAAAA,CAAC,CAADA,eAAAA;AAzDQ,GAAA,CAAA;AA6DV;AACA;;AACD,C;;MCpEYI,uBAAuB,GAAI/B,MAAD,IAAyB;AAC9D,QAAM;AAAEgC,IAAAA;AAAF,MAAN,MAAA;AACA,QAAMC,aAAa,GAAGhC,aAAa,CAAA,MAAA,EAAnC,kBAAmC,CAAnC;AACA,QAAMiC,YAAY,GAAGjC,aAAa,CAAA,MAAA,EAAlC,iBAAkC,CAAlC;;AAEA,WAAA,qBAAA,CAAA,IAAA,EAAkD;AAChD,WAAO;AACLlC,MAAAA,IAAI,EADC,YAAA;AAEL+B,MAAAA,QAAQ,EAAE,CAAC;AAAElB,QAAAA,IAAI,EAAEC,IAAI,CAAJA,MAAAA,CAAAA,IAAAA;AAAR,OAAD;AAFL,KAAP;AAID;;AAED,WAAA,6BAAA,CAAA,IAAA,EAA0D;AACxD,WAAOF,IAAI,CAAX,QAAA;AACD;;AAED,SAAQwD,QAAD,IAA6B;AAClC,UAAMC,UAAU,GAAGC,QAAQ,CAAA,MAAA,EAAS;AAAE/B,MAAAA,KAAK,EAAE;AAAEvC,QAAAA,IAAI,EAAEmE;AAAR;AAAT,KAAT,CAA3B;;AACA,QAAI,CAAJ,UAAA,EAAiB;AACf,aAAOF,cAAc,CAArB,QAAqB,CAArB;AACD;;AAED,WAAOd,UAAU,CAAVA,cAAAA,CAAAA,MAAAA,EAELiB,QAAQ,CAARA,OAAAA,CAAkBxD,IAAD,IACfA,IAAI,CAAJA,IAAAA,KAAAA,aAAAA,GACI2D,6BAA6B,CADjC3D,IACiC,CADjCA,GAEI4D,qBAAqB,CAL7B,IAK6B,CAH3BJ,CAFKjB,CAAP;AANF,GAAA;AAeD,C;;MCrCYsB,cAAc,GAAG,CAAA,MAAA,EAE5B;AAAEhC,EAAAA;AAAF,CAF4B,KAGzB;AACH,QAAM,GAAA,YAAA,IAAN,QAAA;AACA,QAAM5B,IAAI,GAAG2C,OAAO,CAAA,MAAA,EAApB,YAAoB,CAApB;AACA,SAAO3C,IAAI,CAAJA,MAAAA,CAAP,MAAOA,CAAP;AACD,C;ACID;AACA;AACA;AACA;;;MACa6D,eAAe,GAAG,CAAA,MAAA,EAE7BC,kBAAqD,GAFxB,EAAA,KAG1B;AACH,MAAI,CAAC1C,MAAM,CAAP,SAAA,IAAqBe,UAAU,CAACf,MAAM,CAA1C,SAAmC,CAAnC,EAAuD;;AAEvD,QAAM2C,iBAAiB,GAAIhE,IAAD,IACxBA,IAAI,CAAJA,IAAAA,KAAcsB,aAAa,CAAA,MAAA,EAA3BtB,kBAA2B,CAA3BA,IACAA,IAAI,CAAJA,IAAAA,KAAcoB,eAAe,CAF/B,MAE+B,CAF/B;;AAIA,MACEM,QAAQ,CAAA,MAAA,EAAS;AACfC,IAAAA,KAAK,EAAEqC;AADQ,GAAT,CADV,EAIE;AACA;AACD;;AAED,MAAI,CAACC,uBAAuB,CAA5B,MAA4B,CAA5B,EAAsC;AACpC5C,IAAAA,MAAM,CAANA,WAAAA;AACD;;AAED6C,EAAAA,QAAQ,CAAA,MAAA,EAEN;AACE9E,IAAAA,IAAI,EAAEgC,eAAe,CADvB,MACuB,CADvB;AAEED,IAAAA,QAAQ,EAAE,CAAC;AAAElB,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFZ,GAFM,EAARiE,kBAAQ,CAARA;AASAC,EAAAA,SAAS,CAAA,MAAA,EAEP;AACE/E,IAAAA,IAAI,EAAEkC,aAAa,CAAA,MAAA,EADrB,kBACqB,CADrB;AAEEH,IAAAA,QAAQ,EAAE;AAFZ,GAFO,EAATgD,kBAAS,CAATA;AAQD,C;ACtDD;AACA;AACA;;;MACaC,cAAc,GAAG,CAAA,MAAA,EAAsBC,WAAW,GAAjC,CAAA,KAA0C;AACtE,MAAIhD,MAAM,CAAV,SAAA,EAAsB;AACpB,UAAMiD,MAAM,GAAG,IAAA,MAAA,CAAf,WAAe,CAAf;AAEAC,IAAAA,WAAW,CAAA,MAAA,EAAmB;AAC5BnF,MAAAA,IAAI,EAAEgC,eAAe,CADO,MACP,CADO;AAE5BD,MAAAA,QAAQ,EAAE,CAAC;AAAElB,QAAAA,IAAI,EAAEqE;AAAR,OAAD;AAFkB,KAAnB,CAAXC;AAID;AACF,C;ACFD;AACA;AACA;AACA;;;MACaC,oBAAoB,GAAG,CAAA,MAAA,EAElC;AACEC,EAAAA,WAAW,GAAGnD,aAAa,CAAA,MAAA,EAD7B,eAC6B,CAD7B;AAAA,EAAA,kBAAA;AAGEoD,EAAAA,KAAK,GAAG;AAHV,CAFkC,KAO/B;AACH,MAAI,CAACrD,MAAM,CAAX,SAAA,EAAuB;;AAEvB,MAAIe,UAAU,CAACf,MAAM,CAAjBe,SAAU,CAAVA,IAAgC,CAACuC,iBAAiB,CAAtD,MAAsD,CAAtD,EAAgE;AAC9D,UAAMC,aAAa,GAAGzC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAoBd,MAAM,CAAhD,SAAsBc,CAAtB;AACA,UAAM0C,UAAU,GAAGC,IAAI,CAAJA,IAAAA,CAAUF,aAAa,CAAbA,KAAAA,CAAAA,CAAAA,EAAuBF,KAAK,GAAzD,CAA6BE,CAAVE,CAAnB;AACAP,IAAAA,WAAW,CAAA,MAAA,EAET;AAAEnF,MAAAA,IAAI,EAAN,WAAA;AAAqB+B,MAAAA,QAAQ,EAAE,CAAC;AAAElB,QAAAA,IAAI,EAAE;AAAR,OAAD;AAA/B,KAFS,EAGT;AACEuB,MAAAA,EAAE,EADJ,UAAA;AAEEuD,MAAAA,MAAM,EAAE;AAFV,KAHS,CAAXR;AAQD;;AACDT,EAAAA,eAAe,CAAA,MAAA,EAAfA,kBAAe,CAAfA;AACD,C;;MCpCYkB,eAAe,GAAI3D,MAAD,IAAyB;AACtD4D,EAAAA,WAAW,CAAA,MAAA,EAAS;AAClBtD,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AAAvB;AADW,GAAT,CAAX6D;AAGAA,EAAAA,WAAW,CAAA,MAAA,EAAS;AAClBtD,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,IAAI,EAAEkC,aAAa,CAAA,MAAA,EAAA,kBAAA;AAArB,KADW;AAElB4D,IAAAA,KAAK,EAAE;AAFW,GAAT,CAAXD;AAID,C;;MCCYE,eAAe,GAAI9D,MAAD,IAAyB;AACtD,MAAI,CAACA,MAAM,CAAX,SAAA,EAAuB;AAEvB,QAAMiC,aAAa,GAAGhC,aAAa,CAAA,MAAA,EAAnC,kBAAmC,CAAnC;AAEA,QAAM8D,QAAQ,GAAG1D,QAAQ,CAAA,MAAA,EAAS;AAChCC,IAAAA,KAAK,EAAE;AAAEvC,MAAAA,IAAI,EAAEkE;AAAR;AADyB,GAAT,CAAzB;AAIA0B,EAAAA,eAAe,CAAfA,MAAe,CAAfA;AAEAd,EAAAA,QAAQ,CAAA,MAAA,EAAmB;AACzB9E,IAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AADI,GAAnB,CAAR8C;;AAIA,MAAI,CAAJ,QAAA,EAAe;AACb,UAAMzE,SAAS,GAAG;AAChBL,MAAAA,IAAI,EADY,aAAA;AAEhB+B,MAAAA,QAAQ,EAAE;AAFM,KAAlB;AAIAgD,IAAAA,SAAS,CAAA,MAAA,EAATA,SAAS,CAATA;AAEA,UAAMkB,KAAK,GAAG,CACZ,GAAGrD,QAAQ,CAAA,MAAA,EAAS;AAClBL,MAAAA,KAAK,EAAE;AAAEvC,QAAAA,IAAI,EAAEgC,eAAe,CAAA,MAAA;AAAvB;AADW,KAAT,CADC,CAAd;AAMA,UAAMS,QAAQ,GAAG;AACfzC,MAAAA,IAAI,EADW,aAAA;AAEf+B,MAAAA,QAAQ,EAAE;AAFK,KAAjB;;AAKA,SAAK,MAAM,GAAX,IAAW,CAAX,IAAA,KAAA,EAA8B;AAC5B;AACA+C,MAAAA,QAAQ,CAAA,MAAA,EAAA,QAAA,EAA6B;AACnC1C,QAAAA,EAAE,EAAE8D;AAD+B,OAA7B,CAARpB;AAGD;AACF;AACF,C;;MC/CYqB,aAAgD,GAAIlE,MAAD,IAAY;AAC1E,QAAM;AAAEmE,IAAAA;AAAF,MAAN,MAAA;;AAEA,QAAMC,oBAAoB,GAAG,MAAM;AACjC,QAAI,CAACpE,MAAM,CAAX,SAAA,EAAuB;AAEvB,UAAM6B,GAAG,GAAG3B,gBAAgB,CAAA,MAAA,EAA5B,EAA4B,CAA5B;AACA,QAAI,CAAJ,GAAA,EAAU;AAEV,UAAM;AAAA,MAAA,SAAA;AAAaM,MAAAA;AAAb,QAAN,GAAA;AACA,UAAMwC,WAAW,GAAGR,cAAc,CAAA,MAAA,EAAS;AAAA,MAAA,SAAA;AAEzChC,MAAAA;AAFyC,KAAT,CAAlC;AAIAuC,IAAAA,cAAc,CAAA,MAAA,EAAdA,WAAc,CAAdA;AAEA,WAAA,IAAA;AAbF,GAAA;;AAgBA/C,EAAAA,MAAM,CAANA,WAAAA,GAAqB,MAAM;AACzB,QAAIoE,oBAAJ,EAAA,EAA4B;AAE5BD,IAAAA,WAAW;AAHbnE,GAAAA;;AAMAA,EAAAA,MAAM,CAANA,cAAAA,GAAwB+B,uBAAuB,CAA/C/B,MAA+C,CAA/CA;AAEA,SAAA,MAAA;AACD,C;ACrBD;AACA;AACA;;;MACaqE,qBAAqB,GAAGC,mBAAmB,CAAkB;AACxEC,EAAAA,GAAG,EADqE,kBAAA;AAExE7F,EAAAA,SAAS,EAF+D,IAAA;AAGxE8F,EAAAA,eAAe,EAAE,EACf,GADe,wBAAA;AAEfC,IAAAA,aAAa,EAAE;AAFA,GAHuD;AAOxEC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAEjD;AADH,GAP8D;AAUxEkD,EAAAA,aAAa,EAV2D,aAAA;AAWxEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,CAAA,WAAA,EADD,aACC,CADD;AAEPC,IAAAA,MAAM,EAFC,IAAA;AAGPC,IAAAA,kBAAkB,EAAE;AAHb,GAX+D;AAgBxEC,EAAAA,IAAI,EAAGjF,MAAD,KAAa;AACjBkF,IAAAA,MAAM,EAAE;AACNC,MAAAA,YAAY,EAAE;AACZ,SAAA,oBAAA,GAAwB;AACtBnF,UAAAA,MAAM,EAAE;AACNoF,YAAAA,UAAU,EAAE;AACVC,cAAAA,KAAK,EAAE,MAAM;AACX,sBAAMC,SAAS,GAAGrH,SAAS,CAAA,MAAA,EAA3B,iBAA2B,CAA3B;AAEA,uBAAO,CAACoC,QAAQ,CAAA,MAAA,EAAS;AACvBC,kBAAAA,KAAK,EAAE;AAAEvC,oBAAAA,IAAI,EAAEuH,SAAS,CAACvH;AAAlB;AADgB,iBAAT,CAAhB;AAGD;AAPS;AADN;AADc;AADZ;AADR;AADS,GAAb,CAhBkE;AAmCxEwH,EAAAA,OAAO,EAAE,CACP;AACEhB,IAAAA,GAAG,EADL,iBAAA;AAEE7F,IAAAA,SAAS,EAFX,IAAA;AAGE8G,IAAAA,QAAQ,EAAE1H;AAHZ,GADO;AAnC+D,CAAlB,C","sourcesContent":["export const ELEMENT_CODE_BLOCK = 'code_block';\nexport const ELEMENT_CODE_LINE = 'code_line';\n\n// `\n// javascript:\n// abap: ABAP\n// arduino: Arduino\n// bash: Bash\n// basic: BASIC\n// c: C\n// clojure: Clojure\n// coffeescript: CoffeeScript\n// cpp: C++\n// csharp: C#\n// css: CSS\n// dart: Dart\n// diff: Diff\n// docker: Docker\n// elixir: Elixir\n// elm: Elm\n// erlang: Erlang\n// flow: Flow\n// fortran: Fortran\n// fsharp: F#\n// gherkin: Gherkin\n// glsl: GLSL\n// go: Go\n// graphql: GraphQL\n// groovy: Groovy\n// haskell\n// less\n// livescript\n// lua\n// makefile\n// match\n// matlab\n// nix\n// objectivec\n// ocaml\n// pascal\n// perl\n// prolog\n// purebasic\n// r\n// reason\n// scss\n// scala\n// scheme\n// sql\n// swift\n// vbnet\n// verilog\n// vhdl\n// visual-basic\n// wasm\n// `;\n\nexport const CODE_BLOCK_LANGUAGES_POPULAR: Record<string, string> = {\n  bash: 'Bash',\n  css: 'CSS',\n  git: 'Git',\n  graphql: 'GraphQL',\n  html: 'HTML',\n  javascript: 'JavaScript',\n  json: 'JSON',\n  jsx: 'JSX',\n  markdown: 'Markdown',\n  sql: 'SQL',\n  svg: 'SVG',\n  tsx: 'TSX',\n  typescript: 'TypeScript',\n  wasm: 'WebAssembly',\n};\n\nexport const CODE_BLOCK_LANGUAGES: Record<string, string> = {\n  antlr4: 'ANTLR4',\n  bash: 'Bash',\n  c: 'C',\n  csharp: 'C#',\n  css: 'CSS',\n  coffeescript: 'CoffeeScript',\n  cmake: 'CMake',\n  dart: 'Dart',\n  django: 'Django',\n  docker: 'Docker',\n  ejs: 'EJS',\n  erlang: 'Erlang',\n  git: 'Git',\n  go: 'Go',\n  graphql: 'GraphQL',\n  groovy: 'Groovy',\n  html: 'HTML',\n  java: 'Java',\n  javascript: 'JavaScript',\n  json: 'JSON',\n  jsx: 'JSX',\n  kotlin: 'Kotlin',\n  latex: 'LaTeX',\n  less: 'Less',\n  lua: 'Lua',\n  makefile: 'Makefile',\n  markdown: 'Markdown',\n  matlab: 'MATLAB',\n  markup: 'Markup',\n  objectivec: 'Objective-C',\n  perl: 'Perl',\n  php: 'PHP',\n  powershell: 'PowerShell',\n  properties: '.properties',\n  protobuf: 'Protocol Buffers',\n  python: 'Python',\n  r: 'R',\n  ruby: 'Ruby',\n  sass: 'Sass (Sass)',\n  scss: 'Sass (Scss)',\n  // FIXME: Error with current scala grammar\n  // scala: 'Scala',\n  scheme: 'Scheme',\n  sql: 'SQL',\n  shell: 'Shell',\n  swift: 'Swift',\n  svg: 'SVG',\n  tsx: 'TSX',\n  typescript: 'TypeScript',\n  wasm: 'WebAssembly',\n  yaml: 'YAML',\n  xml: 'XML',\n};\n","Prism.languages.antlr4 = {\n\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t'string': {\n\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n\t\tgreedy: true\n\t},\n\t'character-class': {\n\t\tpattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n\t\tgreedy: true,\n\t\talias: 'regex',\n\t\tinside: {\n\t\t\t'range': {\n\t\t\t\tpattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'punctuation'\n\t\t\t},\n\t\t\t'escape': /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n\t\t\t'punctuation': /[\\[\\]]/\n\t\t}\n\t},\n\t'action': {\n\t\tpattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'content': {\n\t\t\t\t// this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n\t\t\t\tpattern: /(\\{)[\\s\\S]+(?=\\})/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'punctuation': /[{}]/\n\t\t}\n\t},\n\t'command': {\n\t\tpattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'function': /\\b\\w+(?=\\s*(?:[,(]|$))/,\n\t\t\t'punctuation': /[,()]/\n\t\t}\n\t},\n\t'annotation': {\n\t\tpattern: /@\\w+(?:::\\w+)*/,\n\t\talias: 'keyword'\n\t},\n\t'label': {\n\t\tpattern: /#[ \\t]*\\w+/,\n\t\talias: 'punctuation'\n\t},\n\t'keyword': /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n\t'definition': [\n\t\t{\n\t\t\tpattern: /\\b[a-z]\\w*(?=\\s*:)/,\n\t\t\talias: ['rule', 'class-name']\n\t\t},\n\t\t{\n\t\t\tpattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n\t\t\talias: ['token', 'constant']\n\t\t},\n\t],\n\t'constant': /\\b[A-Z][A-Z_]*\\b/,\n\t'operator': /\\.\\.|->|[|~]|[*+?]\\??/,\n\t'punctuation': /[;:()=]/\n};\n\nPrism.languages.g4 = Prism.languages.antlr4;\n","(function (Prism) {\n\t// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n\t// + LC_ALL, RANDOM, REPLY, SECONDS.\n\t// + make sure PS1..4 are here as they are not always set,\n\t// - some useless things.\n\tvar envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n\n\tvar commandAfterHeredoc = {\n\t\tpattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation', // this looks reasonably well in all themes\n\t\tinside: null // see below\n\t};\n\n\tvar insideString = {\n\t\t'bash': commandAfterHeredoc,\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': [\n\t\t\t// [0]: Arithmetic Environment\n\t\t\t{\n\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable\n\t\t\t\t\t'variable': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/^\\$\\(\\(/\n\t\t\t\t\t],\n\t\t\t\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n\t\t\t\t\t'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation\n\t\t\t\t\t'punctuation': /\\(\\(?|\\)\\)?|,|;/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [1]: Command Substitution\n\t\t\t{\n\t\t\t\tpattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'variable': /^\\$\\(|^`|\\)$|`$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [2]: Brace expansion\n\t\t\t{\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n\t\t\t\t\t'punctuation': /[\\[\\]]/,\n\t\t\t\t\t'environment': {\n\t\t\t\t\t\tpattern: RegExp('(\\\\{)' + envVars),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'constant'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t/\\$(?:\\w+|[#?*!@$])/\n\t\t],\n\t\t// Escape sequences from echo and printf's manuals, and escaped quotes.\n\t\t'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n\t};\n\n\tPrism.languages.bash = {\n\t\t'shebang': {\n\t\t\tpattern: /^#!\\s*\\/.*/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\"{\\\\$])#.*/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function-name': [\n\t\t\t// a) function foo {\n\t\t\t// b) foo() {\n\t\t\t// c) function foo() {\n\t\t\t// but not “foo {”\n\t\t\t{\n\t\t\t\t// a) and c)\n\t\t\t\tpattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'function'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// b)\n\t\t\t\tpattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n\t\t\t\talias: 'function'\n\t\t\t}\n\t\t],\n\t\t// Highlight variable names as variables in for and select beginnings.\n\t\t'for-or-select': {\n\t\t\tpattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight variable names as variables in the left-hand part\n\t\t// of assignments (“=” and “+=”).\n\t\t'assign-left': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n\t\t\tinside: {\n\t\t\t\t'environment': {\n\t\t\t\t\tpattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'constant'\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': [\n\t\t\t// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t// Here-document with quotes around the tag\n\t\t\t// → No expansion (so no “inside”).\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'bash': commandAfterHeredoc\n\t\t\t\t}\n\t\t\t},\n\t\t\t// “Normal” string\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n\t\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n\t\t\t\tpattern: /(^|[^$\\\\])'[^']*'/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n\t\t\t\tpattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'entity': insideString.entity\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$?' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': insideString.variable,\n\t\t'function': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n\t\t'builtin': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true,\n\t\t\t// Alias added to make those easier to distinguish from strings.\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'file-descriptor': {\n\t\t\tpattern: /\\B&\\d\\b/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'operator': {\n\t\t\t// Lots of redirections here, but not just that.\n\t\t\tpattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n\t\t\tinside: {\n\t\t\t\t'file-descriptor': {\n\t\t\t\t\tpattern: /^\\d/,\n\t\t\t\t\talias: 'important'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n\t\t'number': {\n\t\t\tpattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n\t\t\tlookbehind: true\n\t\t}\n\t};\n\n\tcommandAfterHeredoc.inside = Prism.languages.bash;\n\n\t/* Patterns in command substitution. */\n\tvar toBeCopied = [\n\t\t'comment',\n\t\t'function-name',\n\t\t'for-or-select',\n\t\t'assign-left',\n\t\t'string',\n\t\t'environment',\n\t\t'function',\n\t\t'keyword',\n\t\t'builtin',\n\t\t'boolean',\n\t\t'file-descriptor',\n\t\t'operator',\n\t\t'punctuation',\n\t\t'number'\n\t];\n\tvar inside = insideString.variable[1].inside;\n\tfor (var i = 0; i < toBeCopied.length; i++) {\n\t\tinside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n\t}\n\n\tPrism.languages.shell = Prism.languages.bash;\n}(Prism));\n","Prism.languages.c = Prism.languages.extend('clike', {\n\t'comment': {\n\t\tpattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n\t\tlookbehind: true\n\t},\n\t'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\n\nPrism.languages.insertBefore('c', 'string', {\n\t'macro': {\n\t\t// allow for multiline macro definitions\n\t\t// spaces after the # character compile fine with gcc\n\t\tpattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t'string': [\n\t\t\t\t{\n\t\t\t\t\t// highlight the path of the include statement as a string\n\t\t\t\t\tpattern: /^(#\\s*include\\s*)<[^>]+>/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tPrism.languages.c['string']\n\t\t\t],\n\t\t\t'comment': Prism.languages.c['comment'],\n\t\t\t'macro-name': [\n\t\t\t\t{\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'function'\n\t\t\t\t}\n\t\t\t],\n\t\t\t// highlight macro directives as keywords\n\t\t\t'directive': {\n\t\t\t\tpattern: /^(#\\s*)[a-z]+/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t'directive-hash': /^#/,\n\t\t\t'punctuation': /##|\\\\(?=[\\r\\n])/,\n\t\t\t'expression': {\n\t\t\t\tpattern: /\\S[\\s\\S]*/,\n\t\t\t\tinside: Prism.languages.c\n\t\t\t}\n\t\t}\n\t},\n\t// highlight predefined macros as constants\n\t'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\n\ndelete Prism.languages.c['boolean'];\n","Prism.languages.cmake = {\n\t'comment': /#.*/,\n\t'string': {\n\t\tpattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$\\{(?:[^{}$]|\\$\\{[^{}$]*\\})*\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\$\\{|\\}/,\n\t\t\t\t\t'variable': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'variable': /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n\t'property': /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n\t'keyword': /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n\t'boolean': /\\b(?:ON|OFF|TRUE|FALSE)\\b/,\n\t'namespace': /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,\n\t'operator': /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,\n\t'inserted': {\n\t\tpattern: /\\b\\w+::\\w+\\b/,\n\t\talias: 'class-name'\n\t},\n\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n\t'punctuation': /[()>}]|\\$[<{]/\n};\n","(function (Prism) {\n\n\t// Ignore comments starting with { to privilege string interpolation highlighting\n\tvar comment = /#(?!\\{).+/;\n\tvar interpolation = {\n\t\tpattern: /#\\{[^}]+\\}/,\n\t\talias: 'variable'\n\t};\n\n\tPrism.languages.coffeescript = Prism.languages.extend('javascript', {\n\t\t'comment': comment,\n\t\t'string': [\n\n\t\t\t// Strings are multiline\n\t\t\t{\n\t\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\n\t\t\t{\n\t\t\t\t// Strings are multiline\n\t\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n\t\t'class-member': {\n\t\t\tpattern: /@(?!\\d)\\w+/,\n\t\t\talias: 'variable'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'comment', {\n\t\t'multiline-comment': {\n\t\t\tpattern: /###[\\s\\S]+?###/,\n\t\t\talias: 'comment'\n\t\t},\n\n\t\t// Block regexp can contain comments and interpolation\n\t\t'block-regex': {\n\t\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n\t\t\talias: 'regex',\n\t\t\tinside: {\n\t\t\t\t'comment': comment,\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'string', {\n\t\t'inline-javascript': {\n\t\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^`|`$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'script': {\n\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\talias: 'language-javascript',\n\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Block strings\n\t\t'multiline-string': [\n\t\t\t{\n\t\t\t\tpattern: /'''[\\s\\S]*?'''/,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'string',\n\t\t\t\tinside: {\n\t\t\t\t\tinterpolation: interpolation\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\n\t});\n\n\tPrism.languages.insertBefore('coffeescript', 'keyword', {\n\t\t// Object property\n\t\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n\t});\n\n\tdelete Prism.languages.coffeescript['template-string'];\n\n\tPrism.languages.coffee = Prism.languages.coffeescript;\n}(Prism));\n","(function (Prism) {\n\n\tvar keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n\tvar modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () { return keyword.source; });\n\n\tPrism.languages.cpp = Prism.languages.extend('c', {\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source\n\t\t\t\t\t.replace(/<keyword>/g, function () { return keyword.source; })),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t// This is intended to capture the class name of method implementations like:\n\t\t\t//   void foo::bar() const {}\n\t\t\t// However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n\t\t\t// it starts with an uppercase letter. This approximation should give decent results.\n\t\t\t/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n\t\t\t// This will capture the class name before destructors like:\n\t\t\t//   Foo::~Foo() {}\n\t\t\t/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n\t\t\t// This also intends to capture the class name of method implementations but here the class has template\n\t\t\t// parameters, so it can't be a namespace (until C++ adds generic namespaces).\n\t\t\t/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n\t\t],\n\t\t'keyword': keyword,\n\t\t'number': {\n\t\t\tpattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n\t\t\tgreedy: true\n\t\t},\n\t\t'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n\t\t'boolean': /\\b(?:true|false)\\b/\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'string', {\n\t\t'module': {\n\t\t\t// https://en.cppreference.com/w/cpp/language/modules\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:module|import)\\s+)/.source +\n\t\t\t\t'(?:' +\n\t\t\t\t// header-name\n\t\t\t\t/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n\t\t\t\t'|' +\n\t\t\t\t// module name or partition or both\n\t\t\t\t/<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () { return modName; }) +\n\t\t\t\t')'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'string': /^[<\"][\\s\\S]+/,\n\t\t\t\t'operator': /:/,\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t'raw-string': {\n\t\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n\t\t\talias: 'string',\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'keyword', {\n\t\t'generic-function': {\n\t\t\tpattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n\t\t\tinside: {\n\t\t\t\t'function': /^\\w+/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/,\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: Prism.languages.cpp\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'operator', {\n\t\t'double-colon': {\n\t\t\tpattern: /::/,\n\t\t\talias: 'punctuation'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('cpp', 'class-name', {\n\t\t// the base clause is an optional list of parent classes\n\t\t// https://en.cppreference.com/w/cpp/language/class\n\t\t'base-clause': {\n\t\t\tpattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: Prism.languages.extend('cpp', {})\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('inside', 'double-colon', {\n\t\t// All untokenized words that are not namespaces should be class names\n\t\t'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n\t}, Prism.languages.cpp['base-clause']);\n\n}(Prism));\n","(function (Prism) {\n\n\t/**\n\t * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n\t *\n\t * Note: This is a simple text based replacement. Be careful when using backreferences!\n\t *\n\t * @param {string} pattern the given pattern.\n\t * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n\t * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n\t * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n\t */\n\tfunction replace(pattern, replacements) {\n\t\treturn pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n\t\t\treturn '(?:' + replacements[+index] + ')';\n\t\t});\n\t}\n\t/**\n\t * @param {string} pattern\n\t * @param {string[]} replacements\n\t * @param {string} [flags]\n\t * @returns {RegExp}\n\t */\n\tfunction re(pattern, replacements, flags) {\n\t\treturn RegExp(replace(pattern, replacements), flags || '');\n\t}\n\n\t/**\n\t * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n\t *\n\t * @param {string} pattern\n\t * @param {number} depthLog2\n\t * @returns {string}\n\t */\n\tfunction nested(pattern, depthLog2) {\n\t\tfor (var i = 0; i < depthLog2; i++) {\n\t\t\tpattern = pattern.replace(/<<self>>/g, function () { return '(?:' + pattern + ')'; });\n\t\t}\n\t\treturn pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]');\n\t}\n\n\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n\tvar keywordKinds = {\n\t\t// keywords which represent a return or variable type\n\t\ttype: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n\t\t// keywords which are used to declare a type\n\t\ttypeDeclaration: 'class enum interface record struct',\n\t\t// contextual keywords\n\t\t// (\"var\" and \"dynamic\" are missing because they are used like types)\n\t\tcontextual: 'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n\t\t// all other keywords\n\t\tother: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n\t};\n\n\t// keywords\n\tfunction keywordsToPattern(words) {\n\t\treturn '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b';\n\t}\n\tvar typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n\tvar keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));\n\tvar nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);\n\tvar nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other);\n\n\t// types\n\tvar generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n\tvar nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n\tvar name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n\tvar genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);\n\tvar identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);\n\tvar array = /\\[\\s*(?:,\\s*)*\\]/.source;\n\tvar typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);\n\tvar tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);\n\tvar tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);\n\tvar typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [tuple, identifier, array]);\n\n\tvar typeInside = {\n\t\t'keyword': keywords,\n\t\t'punctuation': /[<>()?,.:[\\]]/\n\t};\n\n\t// strings & characters\n\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n\tvar character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n\tvar regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n\tvar verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n\n\n\tPrism.languages.csharp = Prism.languages.extend('clike', {\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(character),\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'character'\n\t\t\t}\n\t\t],\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\t// Using static\n\t\t\t\t// using static System.Math;\n\t\t\t\tpattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Using alias (type)\n\t\t\t\t// using Project = PC.MyCompany.Project;\n\t\t\t\tpattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Using alias (alias)\n\t\t\t\t// using Project = PC.MyCompany.Project;\n\t\t\t\tpattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Type declarations\n\t\t\t\t// class Foo<A, B>\n\t\t\t\t// interface Foo<out A, B>\n\t\t\t\tpattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Single catch exception declaration\n\t\t\t\t// catch(Foo)\n\t\t\t\t// (things like catch(Foo e) is covered by variable declaration)\n\t\t\t\tpattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Name of the type parameter of generic constraints\n\t\t\t\t// where Foo : class\n\t\t\t\tpattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Casts and checks via as and is.\n\t\t\t\t// as Foo<A>, is Bar<B>\n\t\t\t\t// (things like if(a is Foo b) is covered by variable declaration)\n\t\t\t\tpattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Variable, field and parameter declaration\n\t\t\t\t// (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n\t\t\t\tpattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [typeExpression, nonContextualKeywords, name]),\n\t\t\t\tinside: typeInside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n\t\t'number': /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n\t\t'operator': />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n\t\t'punctuation': /\\?\\.?|::|[{}[\\];(),.:]/\n\t});\n\n\tPrism.languages.insertBefore('csharp', 'number', {\n\t\t'range': {\n\t\t\tpattern: /\\.\\./,\n\t\t\talias: 'operator'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('csharp', 'punctuation', {\n\t\t'named-parameter': {\n\t\t\tpattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('csharp', 'class-name', {\n\t\t'namespace': {\n\t\t\t// namespace Foo.Bar {}\n\t\t\t// using Foo.Bar;\n\t\t\tpattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t'type-expression': {\n\t\t\t// default(Foo), typeof(Foo<Bar>), sizeof(int)\n\t\t\tpattern: re(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [nestedRound]),\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name',\n\t\t\tinside: typeInside\n\t\t},\n\t\t'return-type': {\n\t\t\t// Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n\t\t\t// int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n\t\t\t// int Foo => 0; int Foo { get; set } = 0;\n\t\t\tpattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [typeExpression, identifier]),\n\t\t\tinside: typeInside,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'constructor-invocation': {\n\t\t\t// new List<Foo<Bar[]>> { }\n\t\t\tpattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t/*'explicit-implementation': {\n\t\t\t// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n\t\t\tpattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\n\t\t\tinside: classNameInside,\n\t\t\talias: 'class-name'\n\t\t},*/\n\t\t'generic-method': {\n\t\t\t// foo<Bar>()\n\t\t\tpattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n\t\t\tinside: {\n\t\t\t\t'function': re(/^<<0>>/.source, [name]),\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: RegExp(generic),\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'type-list': {\n\t\t\t// The list of types inherited or of generic constraints\n\t\t\t// class Foo<F> : Bar, IList<FooBar>\n\t\t\t// where F : Bar, IList<int>\n\t\t\tpattern: re(\n\t\t\t\t/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source,\n\t\t\t\t[typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\\bnew\\s*\\(\\s*\\)/.source]\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'record-arguments': {\n\t\t\t\t\tpattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [genericName, nestedRound]),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\tinside: Prism.languages.csharp\n\t\t\t\t},\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'class-name': {\n\t\t\t\t\tpattern: RegExp(typeExpression),\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\tinside: typeInside\n\t\t\t\t},\n\t\t\t\t'punctuation': /[,()]/\n\t\t\t}\n\t\t},\n\t\t'preprocessor': {\n\t\t\tpattern: /(^[\\t ]*)#.*/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'property',\n\t\t\tinside: {\n\t\t\t\t// highlight preprocessor directives as keywords\n\t\t\t\t'directive': {\n\t\t\t\t\tpattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// attributes\n\tvar regularStringOrCharacter = regularString + '|' + character;\n\tvar regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [regularStringOrCharacter]);\n\tvar roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2);\n\n\t// https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n\tvar attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n\tvar attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);\n\n\tPrism.languages.insertBefore('csharp', 'class-name', {\n\t\t'attribute': {\n\t\t\t// Attributes\n\t\t\t// [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n\t\t\tpattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [attrTarget, attr]),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'target': {\n\t\t\t\t\tpattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'attribute-arguments': {\n\t\t\t\t\tpattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n\t\t\t\t\tinside: Prism.languages.csharp\n\t\t\t\t},\n\t\t\t\t'class-name': {\n\t\t\t\t\tpattern: RegExp(identifier),\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'punctuation': /[:,]/\n\t\t\t}\n\t\t}\n\t});\n\n\n\t// string interpolation\n\tvar formatString = /:[^}\\r\\n]+/.source;\n\t// multi line\n\tvar mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2);\n\tvar mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]);\n\t// single line\n\tvar sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [regularStringOrCharacter]), 2);\n\tvar sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);\n\n\tfunction createInterpolationInside(interpolation, interpolationRound) {\n\t\treturn {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'format-string': {\n\t\t\t\t\t\tpattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [interpolationRound, formatString]),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'punctuation': /^:/\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /^\\{|\\}$/,\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\t\talias: 'language-csharp',\n\t\t\t\t\t\tinside: Prism.languages.csharp\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t};\n\t}\n\n\tPrism.languages.insertBefore('csharp', 'string', {\n\t\t'interpolation-string': [\n\t\t\t{\n\t\t\t\tpattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: createInterpolationInside(mInterpolation, mInterpolationRound),\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: createInterpolationInside(sInterpolation, sInterpolationRound),\n\t\t\t}\n\t\t]\n\t});\n\n}(Prism));\n\nPrism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n","(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n","(function (Prism) {\n\tvar keywords = [\n\t\t/\\b(?:async|sync|yield)\\*/,\n\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n\t];\n\n\t// Handles named imports, such as http.Client\n\tvar packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the dart naming conventions\n\tvar className = {\n\t\tpattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t};\n\n\tPrism.languages.dart = Prism.languages.extend('clike', {\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables and parameters\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n\t});\n\n\tPrism.languages.insertBefore('dart', 'function', {\n\t\t'metadata': {\n\t\t\tpattern: /@\\w+/,\n\t\t\talias: 'symbol'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('dart', 'class-name', {\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t});\n}(Prism));\n","// Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n\n(function (Prism) {\n\n\tPrism.languages.django = {\n\t\t'comment': /^\\{#[\\s\\S]*?#\\}$/,\n\t\t'tag': {\n\t\t\tpattern: /(^\\{%[+-]?\\s*)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\t'delimiter': {\n\t\t\tpattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'string': {\n\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'filter': {\n\t\t\tpattern: /(\\|)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'test': {\n\t\t\tpattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'function': /\\b[a-z_]\\w+(?=\\s*\\()/i,\n\t\t'keyword': /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n\t\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n\t\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n\t\t'boolean': /[Tt]rue|[Ff]alse|[Nn]one/,\n\t\t'variable': /\\b\\w+?\\b/,\n\t\t'punctuation': /[{}[\\](),.:;]/\n\t};\n\n\n\tvar pattern = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g;\n\tvar markupTemplating = Prism.languages['markup-templating'];\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tmarkupTemplating.buildPlaceholders(env, 'django', pattern);\n\t});\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tmarkupTemplating.tokenizePlaceholders(env, 'django');\n\t});\n\n\t// Add an Jinja2 alias\n\tPrism.languages.jinja2 = Prism.languages.django;\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tmarkupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n\t});\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tmarkupTemplating.tokenizePlaceholders(env, 'jinja2');\n\t});\n\n}(Prism));\n","(function (Prism) {\n\n\t// Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n\t// that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n\n\tvar spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source;\n\t// At least one space, comment, or line break\n\tvar space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source\n\t\t.replace(/<SP_BS>/g, function () { return spaceAfterBackSlash; });\n\n\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n\tvar option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () { return string; });\n\n\tvar stringRule = {\n\t\tpattern: RegExp(string),\n\t\tgreedy: true\n\t};\n\tvar commentRule = {\n\t\tpattern: /(^[ \\t]*)#.*/m,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t};\n\n\t/**\n\t * @param {string} source\n\t * @param {string} flags\n\t * @returns {RegExp}\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<OPT>/g, function () { return option; })\n\t\t\t.replace(/<SP>/g, function () { return space; });\n\n\t\treturn RegExp(source, flags);\n\t}\n\n\tPrism.languages.docker = {\n\t\t'instruction': {\n\t\t\tpattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'options': {\n\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'property': {\n\t\t\t\t\t\t\tpattern: /(^|\\s)--[\\w-]+/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'string': [\n\t\t\t\t\t\t\tstringRule,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n\t\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'operator': /\\\\$/m,\n\t\t\t\t\t\t'punctuation': /=/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'keyword': [\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#healthcheck\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#from\n\t\t\t\t\t\tpattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// https://docs.docker.com/engine/reference/builder/#onbuild\n\t\t\t\t\t\tpattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /^\\w+/,\n\t\t\t\t\t\tgreedy: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'comment': commentRule,\n\t\t\t\t'string': stringRule,\n\t\t\t\t'variable': /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n\t\t\t\t'operator': /\\\\$/m\n\t\t\t}\n\t\t},\n\t\t'comment': commentRule\n\t};\n\n\tPrism.languages.dockerfile = Prism.languages.docker;\n\n}(Prism));\n","(function (Prism) {\n\n\tPrism.languages.ejs = {\n\t\t'delimiter': {\n\t\t\tpattern: /^<%[-_=]?|[-_]?%>$/,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'comment': /^#[\\s\\S]*/,\n\t\t'language-javascript': {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t};\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');\n\t});\n\n\tPrism.languages.eta = Prism.languages.ejs;\n\n}(Prism));\n","Prism.languages.erlang = {\n\t'comment': /%.+/,\n\t'string': {\n\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n\t\tgreedy: true\n\t},\n\t'quoted-function': {\n\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n\t\talias: 'function'\n\t},\n\t'quoted-atom': {\n\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n\t\talias: 'atom'\n\t},\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n\t'number': [\n\t\t/\\$\\\\?./,\n\t\t/\\b\\d+#[a-z0-9]+/i,\n\t\t/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n\t],\n\t'function': /\\b[a-z][\\w@]*(?=\\()/,\n\t'variable': {\n\t\t// Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n\t\tpattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n\t\tlookbehind: true\n\t},\n\t'operator': [\n\t\t/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n\t\t{\n\t\t\t// We don't want to match <<\n\t\t\tpattern: /(^|[^<])<(?!<)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// We don't want to match >>\n\t\t\tpattern: /(^|[^>])>(?!>)/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'atom': /\\b[a-z][\\w@]*/,\n\t'punctuation': /[()[\\]{}:;,.#|]|<<|>>/\n\n};\n","Prism.languages.git = {\n\t/*\n\t * A simple one line comment like in a git status command\n\t * For instance:\n\t * $ git status\n\t * # On branch infinite-scroll\n\t * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n\t * # and have 1 and 2 different commits each, respectively.\n\t * nothing to commit (working directory clean)\n\t */\n\t'comment': /^#.*/m,\n\n\t/*\n\t * Regexp to match the changed lines in a git diff output. Check the example below.\n\t */\n\t'deleted': /^[-–].*/m,\n\t'inserted': /^\\+.*/m,\n\n\t/*\n\t * a string (double and simple quote)\n\t */\n\t'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n\t/*\n\t * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n\t * For instance:\n\t * $ git add file.txt\n\t */\n\t'command': {\n\t\tpattern: /^.*\\$ git .*$/m,\n\t\tinside: {\n\t\t\t/*\n\t\t\t * A git command can contain a parameter starting by a single or a double dash followed by a string\n\t\t\t * For instance:\n\t\t\t * $ git diff --cached\n\t\t\t * $ git log -p\n\t\t\t */\n\t\t\t'parameter': /\\s--?\\w+/m\n\t\t}\n\t},\n\n\t/*\n\t * Coordinates displayed in a git diff command\n\t * For instance:\n\t * $ git diff\n\t * diff --git file.txt file.txt\n\t * index 6214953..1d54a52 100644\n\t * --- file.txt\n\t * +++ file.txt\n\t * @@ -1 +1,2 @@\n\t * -Here's my tetx file\n\t * +Here's my text file\n\t * +And this is the second line\n\t */\n\t'coord': /^@@.*@@$/m,\n\n\t/*\n\t * Match a \"commit [SHA1]\" line in a git log output.\n\t * For instance:\n\t * $ git log\n\t * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n\t * Author: lgiraudel\n\t * Date:   Mon Feb 17 11:18:34 2014 +0100\n\t *\n\t *     Add of a new line\n\t */\n\t'commit-sha1': /^commit \\w{40}$/m\n};\n","Prism.languages.go = Prism.languages.extend('clike', {\n\t'string': {\n\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n\t'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n\t'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n\t'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n\t'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n","Prism.languages.graphql = {\n\t'comment': /#.*/,\n\t'description': {\n\t\tpattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n\t\tgreedy: true,\n\t\talias: 'string',\n\t\tinside: {\n\t\t\t'language-markdown': {\n\t\t\t\tpattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: Prism.languages.markdown\n\t\t\t}\n\t\t}\n\t},\n\t'string': {\n\t\tpattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n\t\tgreedy: true\n\t},\n\t'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'variable': /\\$[a-z_]\\w*/i,\n\t'directive': {\n\t\tpattern: /@[a-z_]\\w*/i,\n\t\talias: 'function'\n\t},\n\t'attr-name': {\n\t\tpattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n\t\tgreedy: true\n\t},\n\t'atom-input': {\n\t\tpattern: /[A-Z]\\w*Input(?=!?.*$)/m,\n\t\talias: 'class-name'\n\t},\n\t'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n\t'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n\t'class-name': {\n\t\tpattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n\t\tlookbehind: true\n\t},\n\t'fragment': {\n\t\tpattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'definition-mutation': {\n\t\tpattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'definition-query': {\n\t\tpattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n\t'operator': /[!=|&]|\\.{3}/,\n\t'property-query': /\\w+(?=\\s*\\()/,\n\t'object': /\\w+(?=\\s*\\{)/,\n\t'punctuation': /[!(){}\\[\\]:=,]/,\n\t'property': /\\w+/\n};\n\nPrism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n\tif (env.language !== 'graphql') {\n\t\treturn;\n\t}\n\n\t/**\n\t * get the graphql token stream that we want to customize\n\t *\n\t * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\t * @type {Token[]}\n\t */\n\tvar validTokens = env.tokens.filter(function (token) {\n\t\treturn typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n\t});\n\n\tvar currentIndex = 0;\n\n\t/**\n\t * Returns whether the token relative to the current index has the given type.\n\t *\n\t * @param {number} offset\n\t * @returns {Token | undefined}\n\t */\n\tfunction getToken(offset) {\n\t\treturn validTokens[currentIndex + offset];\n\t}\n\n\t/**\n\t * Returns whether the token relative to the current index has the given type.\n\t *\n\t * @param {readonly string[]} types\n\t * @param {number} [offset=0]\n\t * @returns {boolean}\n\t */\n\tfunction isTokenType(types, offset) {\n\t\toffset = offset || 0;\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tvar token = getToken(i + offset);\n\t\t\tif (!token || token.type !== types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the index of the closing bracket to an opening bracket.\n\t *\n\t * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n\t *\n\t * If no closing bracket could be found, `-1` will be returned.\n\t *\n\t * @param {RegExp} open\n\t * @param {RegExp} close\n\t * @returns {number}\n\t */\n\tfunction findClosingBracket(open, close) {\n\t\tvar stackHeight = 1;\n\n\t\tfor (var i = currentIndex; i < validTokens.length; i++) {\n\t\t\tvar token = validTokens[i];\n\t\t\tvar content = token.content;\n\n\t\t\tif (token.type === 'punctuation' && typeof content === 'string') {\n\t\t\t\tif (open.test(content)) {\n\t\t\t\t\tstackHeight++;\n\t\t\t\t} else if (close.test(content)) {\n\t\t\t\t\tstackHeight--;\n\n\t\t\t\t\tif (stackHeight === 0) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Adds an alias to the given token.\n\t *\n\t * @param {Token} token\n\t * @param {string} alias\n\t * @returns {void}\n\t */\n\tfunction addAlias(token, alias) {\n\t\tvar aliases = token.alias;\n\t\tif (!aliases) {\n\t\t\ttoken.alias = aliases = [];\n\t\t} else if (!Array.isArray(aliases)) {\n\t\t\ttoken.alias = aliases = [aliases];\n\t\t}\n\t\taliases.push(alias);\n\t}\n\n\tfor (; currentIndex < validTokens.length;) {\n\t\tvar startToken = validTokens[currentIndex++];\n\n\t\t// add special aliases for mutation tokens\n\t\tif (startToken.type === 'keyword' && startToken.content === 'mutation') {\n\t\t\t// any array of the names of all input variables (if any)\n\t\t\tvar inputVariables = [];\n\n\t\t\tif (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n\t\t\t\t// definition\n\n\t\t\t\tcurrentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n\t\t\t\tvar definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\t\t\t\tif (definitionEnd === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// find all input variables\n\t\t\t\tfor (; currentIndex < definitionEnd; currentIndex++) {\n\t\t\t\t\tvar t = getToken(0);\n\t\t\t\t\tif (t.type === 'variable') {\n\t\t\t\t\t\taddAlias(t, 'variable-input');\n\t\t\t\t\t\tinputVariables.push(t.content);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentIndex = definitionEnd + 1;\n\t\t\t}\n\n\t\t\tif (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n\t\t\t\tcurrentIndex++; // skip opening bracket\n\n\t\t\t\taddAlias(getToken(0), 'property-mutation');\n\n\t\t\t\tif (inputVariables.length > 0) {\n\t\t\t\t\tvar mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\t\t\t\t\tif (mutationEnd === -1) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// give references to input variables a special alias\n\t\t\t\t\tfor (var i = currentIndex; i < mutationEnd; i++) {\n\t\t\t\t\t\tvar varToken = validTokens[i];\n\t\t\t\t\t\tif (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n\t\t\t\t\t\t\taddAlias(varToken, 'variable-input');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n","Prism.languages.groovy = Prism.languages.extend('clike', {\n\t'string': [\n\t\t{\n\t\t\t// https://groovy-lang.org/syntax.html#_dollar_slashy_string\n\t\t\tpattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\t// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n\t\t\t// simple division (see JS regex), so find a fix maybe?\n\t\t\tpattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n\t'operator': {\n\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n\t\tlookbehind: true\n\t},\n\t'punctuation': /\\.+|[{}[\\];(),:$]/\n});\n\nPrism.languages.insertBefore('groovy', 'string', {\n\t'shebang': {\n\t\tpattern: /#!.+/,\n\t\talias: 'comment'\n\t}\n});\n\nPrism.languages.insertBefore('groovy', 'punctuation', {\n\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\n\nPrism.languages.insertBefore('groovy', 'function', {\n\t'annotation': {\n\t\tpattern: /(^|[^.])@\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t}\n});\n\n// Handle string interpolation\nPrism.hooks.add('wrap', function (env) {\n\tif (env.language === 'groovy' && env.type === 'string') {\n\t\tvar delimiter = env.content[0];\n\n\t\tif (delimiter != \"'\") {\n\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\tif (delimiter === '$') {\n\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\t}\n\n\t\t\t// To prevent double HTML-encoding we have to decode env.content first\n\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\t\t\tenv.content = Prism.highlight(env.content, {\n\t\t\t\t'expression': {\n\t\t\t\t\tpattern: pattern,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: Prism.languages.groovy\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n\t\t}\n\t}\n});\n","(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables and parameters\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n","Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n","// https://www.json.org/json-en.html\nPrism.languages.json = {\n\t'property': {\n\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'string': {\n\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'comment': {\n\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\tgreedy: true\n\t},\n\t'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n\t'punctuation': /[{}[\\],]/,\n\t'operator': /:/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t}\n};\n\nPrism.languages.webmanifest = Prism.languages.json;\n","(function (Prism) {\n\n\tvar javascript = Prism.util.clone(Prism.languages.javascript);\n\n\tvar space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n\tvar braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n\tvar spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n\n\t/**\n\t * @param {string} source\n\t * @param {string} [flags]\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<S>/g, function () { return space; })\n\t\t\t.replace(/<BRACES>/g, function () { return braces; })\n\t\t\t.replace(/<SPREAD>/g, function () { return spread; });\n\t\treturn RegExp(source, flags);\n\t}\n\n\tspread = re(spread).source;\n\n\n\tPrism.languages.jsx = Prism.languages.extend('markup', javascript);\n\tPrism.languages.jsx.tag.pattern = re(\n\t\t/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source\n\t);\n\n\tPrism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n\tPrism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i;\n\tPrism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n\tPrism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n\n\tPrism.languages.insertBefore('inside', 'attr-name', {\n\t\t'spread': {\n\t\t\tpattern: re(/<SPREAD>/.source),\n\t\t\tinside: Prism.languages.jsx\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\tPrism.languages.insertBefore('inside', 'special-attr', {\n\t\t'script': {\n\t\t\t// Allow for two levels of nesting\n\t\t\tpattern: re(/=<BRACES>/.source),\n\t\t\tinside: {\n\t\t\t\t'script-punctuation': {\n\t\t\t\t\tpattern: /^=(?=\\{)/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.jsx\n\t\t\t},\n\t\t\t'alias': 'language-javascript'\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\t// The following will handle plain text inside tags\n\tvar stringifyToken = function (token) {\n\t\tif (!token) {\n\t\t\treturn '';\n\t\t}\n\t\tif (typeof token === 'string') {\n\t\t\treturn token;\n\t\t}\n\t\tif (typeof token.content === 'string') {\n\t\t\treturn token.content;\n\t\t}\n\t\treturn token.content.map(stringifyToken).join('');\n\t};\n\n\tvar walkTokens = function (tokens) {\n\t\tvar openedTags = [];\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar notTagNorBrace = false;\n\n\t\t\tif (typeof token !== 'string') {\n\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n\t\t\t\t\t// We found a tag, now find its kind\n\n\t\t\t\t\tif (token.content[0].content[0].content === '</') {\n\t\t\t\t\t\t// Closing tag\n\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n\t\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\t\topenedTags.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {\n\t\t\t\t\t\t\t// Autoclosed tag, ignore\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\t\topenedTags.push({\n\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),\n\t\t\t\t\t\t\t\topenedBraces: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n\n\t\t\t\t\t// Here we might have entered a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;\n\n\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n\n\t\t\t\t\t// Here we might have left a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;\n\n\t\t\t\t} else {\n\t\t\t\t\tnotTagNorBrace = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (notTagNorBrace || typeof token === 'string') {\n\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n\t\t\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t\t\t// That's plain text: drop any tokens matched.\n\t\t\t\t\tvar plainText = stringifyToken(token);\n\n\t\t\t\t\t// And merge text with adjacent text\n\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);\n\t\t\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;\n\t\t\t\t\t\ttokens.splice(i - 1, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (token.content && typeof token.content !== 'string') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'jsx' && env.language !== 'tsx') {\n\t\t\treturn;\n\t\t}\n\t\twalkTokens(env.tokens);\n\t});\n\n}(Prism));\n","(function (Prism) {\n\tPrism.languages.kotlin = Prism.languages.extend('clike', {\n\t\t'keyword': {\n\t\t\t// The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n\t\t\tpattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function': [\n\t\t\t{\n\t\t\t\tpattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n\t\t'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n\t});\n\n\tdelete Prism.languages.kotlin['class-name'];\n\n\tPrism.languages.insertBefore('kotlin', 'string', {\n\t\t'raw-string': {\n\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n\t\t\talias: 'string'\n\t\t\t// See interpolation below\n\t\t}\n\t});\n\tPrism.languages.insertBefore('kotlin', 'keyword', {\n\t\t'annotation': {\n\t\t\tpattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n\t\t\talias: 'builtin'\n\t\t}\n\t});\n\tPrism.languages.insertBefore('kotlin', 'function', {\n\t\t'label': {\n\t\t\tpattern: /\\b\\w+@|@\\w+\\b/,\n\t\t\talias: 'symbol'\n\t\t}\n\t});\n\n\tvar interpolation = [\n\t\t{\n\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\talias: 'variable'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.kotlin\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /\\$\\w+/,\n\t\t\talias: 'variable'\n\t\t}\n\t];\n\n\tPrism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n\t\tinterpolation: interpolation\n\t};\n\n\tPrism.languages.kt = Prism.languages.kotlin;\n\tPrism.languages.kts = Prism.languages.kotlin;\n}(Prism));\n","(function (Prism) {\n\tvar funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i;\n\tvar insideEqu = {\n\t\t'equation-command': {\n\t\t\tpattern: funcPattern,\n\t\t\talias: 'regex'\n\t\t}\n\t};\n\n\tPrism.languages.latex = {\n\t\t'comment': /%.*/m,\n\t\t// the verbatim environment prints whitespace to the document\n\t\t'cdata': {\n\t\t\tpattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t/*\n\t\t * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]\n\t\t * (all are multiline)\n\t\t */\n\t\t'equation': [\n\t\t\t{\n\t\t\t\tpattern: /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n\t\t\t\tinside: insideEqu,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: insideEqu,\n\t\t\t\talias: 'string'\n\t\t\t}\n\t\t],\n\t\t/*\n\t\t * arguments which are keywords or references are highlighted\n\t\t * as keywords\n\t\t */\n\t\t'keyword': {\n\t\t\tpattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'url': {\n\t\t\tpattern: /(\\\\url\\{)[^}]+(?=\\})/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t/*\n\t\t * section or chapter headlines are highlighted as bold so that\n\t\t * they stand out more\n\t\t */\n\t\t'headline': {\n\t\t\tpattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'function': {\n\t\t\tpattern: funcPattern,\n\t\t\talias: 'selector'\n\t\t},\n\t\t'punctuation': /[[\\]{}&]/\n\t};\n\n\tPrism.languages.tex = Prism.languages.latex;\n\tPrism.languages.context = Prism.languages.latex;\n}(Prism));\n","/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n\t'comment': [\n\t\t/\\/\\*[\\s\\S]*?\\*\\//,\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'atrule': {\n\t\tpattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n\t\tinside: {\n\t\t\t'punctuation': /[:()]/\n\t\t}\n\t},\n\t// selectors and mixins are considered the same\n\t'selector': {\n\t\tpattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n\t\tinside: {\n\t\t\t// mixin parameters\n\t\t\t'variable': /@+[\\w-]+/\n\t\t}\n\t},\n\n\t'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n\t'operator': /[+\\-*\\/]/\n});\n\nPrism.languages.insertBefore('less', 'property', {\n\t'variable': [\n\t\t// Variable declaration (the colon must be consumed!)\n\t\t{\n\t\t\tpattern: /@[\\w-]+\\s*:/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/\n\t\t\t}\n\t\t},\n\n\t\t// Variable usage\n\t\t/@@?[\\w-]+/\n\t],\n\t'mixin-usage': {\n\t\tpattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t}\n});\n","Prism.languages.lua = {\n\t'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n\t// \\z may be used to skip the following space\n\t'string': {\n\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n\t\tgreedy: true\n\t},\n\t'number': /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n\t'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n\t'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n\t'operator': [\n\t\t/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n\t\t{\n\t\t\t// Match \"..\" but don't break \"...\"\n\t\t\tpattern: /(^|[^.])\\.\\.(?!\\.)/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'punctuation': /[\\[\\](){},;]|\\.+|:+/\n};\n","Prism.languages.makefile = {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n\t\tlookbehind: true\n\t},\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\n\t// Built-in target names\n\t'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n\n\t// Targets\n\t'symbol': {\n\t\tpattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n\t\tinside: {\n\t\t\t'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n\t\t}\n\t},\n\t'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n\n\t'keyword': [\n\t\t// Directives\n\t\t/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n\t\t// Functions\n\t\t{\n\t\t\tpattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'operator': /(?:::|[?:+!])?=|[|@]/,\n\t'punctuation': /[:;(){}]/\n};\n","(function (Prism) {\n\n\t// Allow only one line break\n\tvar inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n\n\t/**\n\t * This function is intended for the creation of the bold or italic pattern.\n\t *\n\t * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n\t *\n\t * _Note:_ Keep in mind that this adds a capturing group.\n\t *\n\t * @param {string} pattern\n\t * @returns {RegExp}\n\t */\n\tfunction createInline(pattern) {\n\t\tpattern = pattern.replace(/<inner>/g, function () { return inner; });\n\t\treturn RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n\t}\n\n\n\tvar tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n\tvar tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () { return tableCell; });\n\tvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n\n\n\tPrism.languages.markdown = Prism.languages.extend('markup', {});\n\tPrism.languages.insertBefore('markdown', 'prolog', {\n\t\t'front-matter-block': {\n\t\t\tpattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^---|---$/,\n\t\t\t\t'font-matter': {\n\t\t\t\t\tpattern: /\\S+(?:\\s+\\S+)*/,\n\t\t\t\t\talias: ['yaml', 'language-yaml'],\n\t\t\t\t\tinside: Prism.languages.yaml\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'blockquote': {\n\t\t\t// > ...\n\t\t\tpattern: /^>(?:[\\t ]*>)*/m,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'table': {\n\t\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n\t\t\tinside: {\n\t\t\t\t'table-data-rows': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-data': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-line': {\n\t\t\t\t\tpattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /\\||:?-{3,}:?/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'table-header-row': {\n\t\t\t\t\tpattern: RegExp('^' + tableRow + '$'),\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'table-header': {\n\t\t\t\t\t\t\tpattern: RegExp(tableCell),\n\t\t\t\t\t\t\talias: 'important',\n\t\t\t\t\t\t\tinside: Prism.languages.markdown\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': /\\|/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'code': [\n\t\t\t{\n\t\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line\n\t\t\t\tpattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// ```optional language\n\t\t\t\t// code block\n\t\t\t\t// ```\n\t\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'code-block': {\n\t\t\t\t\t\tpattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'code-language': {\n\t\t\t\t\t\tpattern: /^(```).+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /```/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'title': [\n\t\t\t{\n\t\t\t\t// title 1\n\t\t\t\t// =======\n\n\t\t\t\t// title 2\n\t\t\t\t// -------\n\t\t\t\tpattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /==+$|--+$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// # title 1\n\t\t\t\t// ###### title 6\n\t\t\t\tpattern: /(^\\s*)#.+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'important',\n\t\t\t\tinside: {\n\t\t\t\t\tpunctuation: /^#+|#+$/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'hr': {\n\t\t\t// ***\n\t\t\t// ---\n\t\t\t// * * *\n\t\t\t// -----------\n\t\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'list': {\n\t\t\t// * item\n\t\t\t// + item\n\t\t\t// - item\n\t\t\t// 1. item\n\t\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'url-reference': {\n\t\t\t// [id]: http://example.com \"Optional title\"\n\t\t\t// [id]: http://example.com 'Optional title'\n\t\t\t// [id]: http://example.com (Optional title)\n\t\t\t// [id]: <http://example.com> \"Optional title\"\n\t\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n\t\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\n\t\t\t},\n\t\t\talias: 'url'\n\t\t},\n\t\t'bold': {\n\t\t\t// **strong**\n\t\t\t// __strong__\n\n\t\t\t// allow one nested instance of italic text using the same delimiter\n\t\t\tpattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\*\\*|__/\n\t\t\t}\n\t\t},\n\t\t'italic': {\n\t\t\t// *em*\n\t\t\t// _em_\n\n\t\t\t// allow one nested instance of bold text using the same delimiter\n\t\t\tpattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^.)[\\s\\S]+(?=.$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /[*_]/\n\t\t\t}\n\t\t},\n\t\t'strike': {\n\t\t\t// ~~strike through~~\n\t\t\t// ~strike~\n\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\tpattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'punctuation': /~~?/\n\t\t\t}\n\t\t},\n\t\t'code-snippet': {\n\t\t\t// `code`\n\t\t\t// ``code``\n\t\t\tpattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: ['code', 'keyword']\n\t\t},\n\t\t'url': {\n\t\t\t// [example](http://example.com \"Optional title\")\n\t\t\t// [example][id]\n\t\t\t// [example] [id]\n\t\t\tpattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'operator': /^!/,\n\t\t\t\t'content': {\n\t\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {} // see below\n\t\t\t\t},\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'url': {\n\t\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n\t\t['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n\t\t\tif (token !== inside) {\n\t\t\t\tPrism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n\t\t\t}\n\t\t});\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'markdown' && env.language !== 'md') {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction walkTokens(tokens) {\n\t\t\tif (!tokens || typeof tokens === 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\t\tvar token = tokens[i];\n\n\t\t\t\tif (token.type !== 'code') {\n\t\t\t\t\twalkTokens(token.content);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n\t\t\t\t * is optional. But the grammar is defined so that there is only one case we have to handle:\n\t\t\t\t *\n\t\t\t\t * token.content = [\n\t\t\t\t *     <span class=\"punctuation\">```</span>,\n\t\t\t\t *     <span class=\"code-language\">xxxx</span>,\n\t\t\t\t *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n\t\t\t\t *     <span class=\"code-block\">...</span>,\n\t\t\t\t *     '\\n', // exactly one new lines again\n\t\t\t\t *     <span class=\"punctuation\">```</span>\n\t\t\t\t * ];\n\t\t\t\t */\n\n\t\t\t\tvar codeLang = token.content[1];\n\t\t\t\tvar codeBlock = token.content[3];\n\n\t\t\t\tif (codeLang && codeBlock &&\n\t\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\n\t\t\t\t\ttypeof codeLang.content === 'string') {\n\n\t\t\t\t\t// this might be a language that Prism does not support\n\n\t\t\t\t\t// do some replacements to support C++, C#, and F#\n\t\t\t\t\tvar lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp');\n\t\t\t\t\t// only use the first word\n\t\t\t\t\tlang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n\t\t\t\t\tvar alias = 'language-' + lang;\n\n\t\t\t\t\t// add alias\n\t\t\t\t\tif (!codeBlock.alias) {\n\t\t\t\t\t\tcodeBlock.alias = [alias];\n\t\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\n\t\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcodeBlock.alias.push(alias);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twalkTokens(env.tokens);\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (env.type !== 'code-block') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar codeLang = '';\n\t\tfor (var i = 0, l = env.classes.length; i < l; i++) {\n\t\t\tvar cls = env.classes[i];\n\t\t\tvar match = /language-(.+)/.exec(cls);\n\t\t\tif (match) {\n\t\t\t\tcodeLang = match[1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar grammar = Prism.languages[codeLang];\n\n\t\tif (!grammar) {\n\t\t\tif (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n\t\t\t\tvar id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n\t\t\t\tenv.attributes['id'] = id;\n\n\t\t\t\tPrism.plugins.autoloader.loadLanguages(codeLang, function () {\n\t\t\t\t\tvar ele = document.getElementById(id);\n\t\t\t\t\tif (ele) {\n\t\t\t\t\t\tele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tenv.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n\t\t}\n\t});\n\n\tvar tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n\n\t/**\n\t * A list of known entity names.\n\t *\n\t * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n\t *\n\t * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n\t */\n\tvar KNOWN_ENTITY_NAMES = {\n\t\t'amp': '&',\n\t\t'lt': '<',\n\t\t'gt': '>',\n\t\t'quot': '\"',\n\t};\n\n\t// IE 11 doesn't support `String.fromCodePoint`\n\tvar fromCodePoint = String.fromCodePoint || String.fromCharCode;\n\n\t/**\n\t * Returns the text content of a given HTML source code string.\n\t *\n\t * @param {string} html\n\t * @returns {string}\n\t */\n\tfunction textContent(html) {\n\t\t// remove all tags\n\t\tvar text = html.replace(tagPattern, '');\n\n\t\t// decode known entities\n\t\ttext = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n\t\t\tcode = code.toLowerCase();\n\n\t\t\tif (code[0] === '#') {\n\t\t\t\tvar value;\n\t\t\t\tif (code[1] === 'x') {\n\t\t\t\t\tvalue = parseInt(code.slice(2), 16);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = Number(code.slice(1));\n\t\t\t\t}\n\n\t\t\t\treturn fromCodePoint(value);\n\t\t\t} else {\n\t\t\t\tvar known = KNOWN_ENTITY_NAMES[code];\n\t\t\t\tif (known) {\n\t\t\t\t\treturn known;\n\t\t\t\t}\n\n\t\t\t\t// unable to decode\n\t\t\t\treturn m;\n\t\t\t}\n\t\t});\n\n\t\treturn text;\n\t}\n\n\tPrism.languages.md = Prism.languages.markdown;\n\n}(Prism));\n","Prism.languages.matlab = {\n\t'comment': [\n\t\t/%\\{[\\s\\S]*?\\}%/,\n\t\t/%.+/\n\t],\n\t'string': {\n\t\tpattern: /\\B'(?:''|[^'\\r\\n])*'/,\n\t\tgreedy: true\n\t},\n\t// FIXME We could handle imaginary numbers as a whole\n\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n\t'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n\t'function': /\\b(?!\\d)\\w+(?=\\s*\\()/,\n\t'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n\t'punctuation': /\\.{3}|[.,;\\[\\](){}!]/\n};\n","Prism.languages.objectivec = Prism.languages.extend('c', {\n\t'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n\t'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\n\ndelete Prism.languages.objectivec['class-name'];\n\nPrism.languages.objc = Prism.languages.objectivec;\n","Prism.languages.perl = {\n\t'comment': [\n\t\t{\n\t\t\t// POD\n\t\t\tpattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\$])#.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t// TODO Could be nice to handle Heredoc too.\n\t'string': [\n\t\t// q/.../\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// q a...a\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// q(...)\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// q{...}\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// q[...]\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// q<...>\n\t\t{\n\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// \"...\", `...`\n\t\t{\n\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// '...'\n\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n\t\t{\n\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'regex': [\n\t\t// m/.../\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// m a...a\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// m(...)\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// m{...}\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// m[...]\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// m<...>\n\t\t{\n\t\t\tpattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// The lookbehinds prevent -s from breaking\n\t\t// FIXME We don't handle change of separator like s(...)[...]\n\t\t// s/.../.../\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// s a...a...a\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// s(...)(...)\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// s{...}{...}\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// s[...][...]\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// s<...><...>\n\t\t{\n\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t// /.../\n\t\t// The look-ahead tries to prevent two divisions on\n\t\t// the same line from being highlighted as regex.\n\t\t// This does not support multi-line regex.\n\t\t{\n\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\n\t// FIXME Not sure about the handling of ::, ', and #\n\t'variable': [\n\t\t// ${^POSTMATCH}\n\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,\n\t\t// $^V\n\t\t/[&*$@%]\\^[A-Z_]/,\n\t\t// ${...}\n\t\t/[&*$@%]#?(?=\\{)/,\n\t\t// $foo\n\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/i,\n\t\t// $1\n\t\t/[&*$@%]\\d+/,\n\t\t// $_, @_, %!\n\t\t// The negative lookahead prevents from breaking the %= operator\n\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n\t],\n\t'filehandle': {\n\t\t// <>, <FOO>, _\n\t\tpattern: /<(?![<=])\\S*>|\\b_\\b/,\n\t\talias: 'symbol'\n\t},\n\t'vstring': {\n\t\t// v1.2, 1.2.3\n\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n\t\talias: 'string'\n\t},\n\t'function': {\n\t\tpattern: /sub \\w+/i,\n\t\tinside: {\n\t\t\tkeyword: /sub/\n\t\t}\n\t},\n\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\n\t'punctuation': /[{}[\\];(),:]/\n};\n","/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n * Rewritten by Tom Pavelec\n *\n * Supports PHP 5.3 - 8.0\n */\n(function (Prism) {\n\tvar comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n\tvar constant = [\n\t\t{\n\t\t\tpattern: /\\b(?:false|true)\\b/i,\n\t\t\talias: 'boolean'\n\t\t},\n\t\t{\n\t\t\tpattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n\t\t\tgreedy: true,\n\t\t\tlookbehind: true,\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n\t\t\tgreedy: true,\n\t\t\tlookbehind: true,\n\t\t},\n\t\t/\\b(?:null)\\b/i,\n\t\t/\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/,\n\t];\n\tvar number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n\tvar operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n\tvar punctuation = /[{}\\[\\](),:;]/;\n\n\tPrism.languages.php = {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n\t\t\talias: 'important'\n\t\t},\n\t\t'comment': comment,\n\t\t'variable': /\\$+(?:\\w+\\b|(?=\\{))/i,\n\t\t'package': {\n\t\t\tpattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\\\/\n\t\t\t}\n\t\t},\n\t\t'class-name-definition': {\n\t\t\tpattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'function-definition': {\n\t\t\tpattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'keyword': [\n\t\t\t{\n\t\t\t\tpattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n\t\t\t\talias: 'type-casting',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n\t\t\t\talias: 'type-hint',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n\t\t\t\talias: 'type-hint',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n\t\t\t\talias: 'return-type',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,\n\t\t\t\talias: 'return-type',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n\t\t\t\talias: 'type-declaration',\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\|\\s*)(?:null|false)\\b/i,\n\t\t\t\talias: 'type-declaration',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n\t\t\t\talias: 'static-context',\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// yield from\n\t\t\t\tpattern: /(\\byield\\s+)from\\b/i,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t// `class` is always a keyword unlike other keywords\n\t\t\t/\\bclass\\b/i,\n\t\t\t{\n\t\t\t\t// https://www.php.net/manual/en/reserved.keywords.php\n\t\t\t\t//\n\t\t\t\t// keywords cannot be preceded by \"->\"\n\t\t\t\t// the complex lookbehind means `(?<!(?:->|::)\\s*)`\n\t\t\t\tpattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'argument-name': {\n\t\t\tpattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n\t\t\t\talias: 'class-name-fully-qualified',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n\t\t\t\talias: 'class-name-fully-qualified',\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n\t\t\t\talias: 'class-name-fully-qualified',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n\t\t\t\talias: 'type-declaration',\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n\t\t\t\talias: ['class-name-fully-qualified', 'type-declaration'],\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n\t\t\t\talias: 'static-context',\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n\t\t\t\talias: ['class-name-fully-qualified', 'static-context'],\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n\t\t\t\talias: 'type-hint',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n\t\t\t\talias: ['class-name-fully-qualified', 'type-hint'],\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n\t\t\t\talias: 'return-type',\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n\t\t\t\talias: ['class-name-fully-qualified', 'return-type'],\n\t\t\t\tgreedy: true,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'constant': constant,\n\t\t'function': {\n\t\t\tpattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\\\/\n\t\t\t}\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(->\\s*)\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'number': number,\n\t\t'operator': operator,\n\t\t'punctuation': punctuation\n\t};\n\n\tvar string_interpolation = {\n\t\tpattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n\t\tlookbehind: true,\n\t\tinside: Prism.languages.php\n\t};\n\n\tvar string = [\n\t\t{\n\t\t\tpattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n\t\t\talias: 'nowdoc-string',\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n\t\t\talias: 'heredoc-string',\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': string_interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n\t\t\talias: 'backtick-quoted-string',\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\talias: 'single-quoted-string',\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\talias: 'double-quoted-string',\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': string_interpolation\n\t\t\t}\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('php', 'variable', {\n\t\t'string': string,\n\t\t'attribute': {\n\t\t\tpattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'attribute-content': {\n\t\t\t\t\tpattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t// inside can appear subset of php\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'comment': comment,\n\t\t\t\t\t\t'string': string,\n\t\t\t\t\t\t'attribute-class-name': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n\t\t\t\t\t\t\t\talias: 'class-name',\n\t\t\t\t\t\t\t\tgreedy: true,\n\t\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n\t\t\t\t\t\t\t\talias: [\n\t\t\t\t\t\t\t\t\t'class-name',\n\t\t\t\t\t\t\t\t\t'class-name-fully-qualified'\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tgreedy: true,\n\t\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t\t\t'punctuation': /\\\\/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'constant': constant,\n\t\t\t\t\t\t'number': number,\n\t\t\t\t\t\t'operator': operator,\n\t\t\t\t\t\t'punctuation': punctuation\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^#\\[|\\]$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tif (!/<\\?/.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));\n","(function (Prism) {\n\n\tvar powershell = Prism.languages.powershell = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /(^|[^`])<#[\\s\\S]*?#>/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^`])#.*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'function': {\n\t\t\t\t\t\t// Allow for one level of nesting\n\t\t\t\t\t\tpattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t// Populated at end of file\n\t\t\t\t\t\tinside: {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /'(?:[^']|'')*'/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n\t\t// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n\t\t'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n\t\t'boolean': /\\$(?:true|false)\\b/i,\n\t\t'variable': /\\$\\w+\\b/,\n\t\t// Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n\t\t// Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n\t\t// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n\t\t'function': [\n\t\t\t/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,\n\t\t\t/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i\n\t\t],\n\t\t// per http://technet.microsoft.com/en-us/library/hh847744.aspx\n\t\t'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n\t\t'operator': {\n\t\t\tpattern: /(\\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[|{}[\\];(),.]/\n\t};\n\n\t// Variable interpolation inside strings, and nested expressions\n\tvar stringInside = powershell.string[0].inside;\n\tstringInside.boolean = powershell.boolean;\n\tstringInside.variable = powershell.variable;\n\tstringInside.function.inside = powershell;\n\n}(Prism));\n","Prism.languages.properties = {\n\t'comment': /^[ \\t]*[#!].*$/m,\n\t'attr-value': {\n\t\tpattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n\t\tlookbehind: true\n\t},\n\t'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?= *[=:]| )/m,\n\t'punctuation': /[=:]/\n};\n","(function (Prism) {\n\n\tvar builtinTypes = /\\b(?:double|float|[su]?int(?:32|64)|s?fixed(?:32|64)|bool|string|bytes)\\b/;\n\n\tPrism.languages.protobuf = Prism.languages.extend('clike', {\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'keyword': /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i\n\t});\n\n\tPrism.languages.insertBefore('protobuf', 'operator', {\n\t\t'map': {\n\t\t\tpattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n\t\t\talias: 'class-name',\n\t\t\tinside: {\n\t\t\t\t'punctuation': /[<>.,]/,\n\t\t\t\t'builtin': builtinTypes\n\t\t\t}\n\t\t},\n\t\t'builtin': builtinTypes,\n\t\t'positional-class-name': {\n\t\t\tpattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n\t\t\talias: 'class-name',\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t'annotation': {\n\t\t\tpattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));\n","Prism.languages.python = {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])#.*/,\n\t\tlookbehind: true\n\t},\n\t'string-interpolation': {\n\t\tpattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\t// \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n\t\t\t\tpattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'format-spec': {\n\t\t\t\t\t\tpattern: /(:)[^:(){}]+(?=\\}$)/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t},\n\t\t\t\t\t'conversion-option': {\n\t\t\t\t\t\tpattern: /![sra](?=[:}]$)/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: null\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'triple-quoted-string': {\n\t\tpattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\t'string': {\n\t\tpattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n\t\tgreedy: true\n\t},\n\t'function': {\n\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n\t\tlookbehind: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\bclass\\s+)\\w+/i,\n\t\tlookbehind: true\n\t},\n\t'decorator': {\n\t\tpattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/im,\n\t\tlookbehind: true,\n\t\talias: ['annotation', 'punctuation'],\n\t\tinside: {\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n\t'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n\t'boolean': /\\b(?:True|False|None)\\b/,\n\t'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?\\b/i,\n\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\n\nPrism.languages.py = Prism.languages.python;\n","Prism.languages.r = {\n\t'comment': /#.*/,\n\t'string': {\n\t\tpattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'percent-operator': {\n\t\t// Includes user-defined operators\n\t\t// and %%, %*%, %/%, %in%, %o%, %x%\n\t\tpattern: /%[^%\\s]*%/,\n\t\talias: 'operator'\n\t},\n\t'boolean': /\\b(?:TRUE|FALSE)\\b/,\n\t'ellipsis': /\\.\\.(?:\\.|\\d+)/,\n\t'number': [\n\t\t/\\b(?:NaN|Inf)\\b/,\n\t\t/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n\t],\n\t'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n\t'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n\t'punctuation': /[(){}\\[\\],;]/\n};\n","/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n *     constant, builtin, variable, symbol, regex\n */\n(function (Prism) {\n\tPrism.languages.ruby = Prism.languages.extend('clike', {\n\t\t'comment': [\n\t\t\t/#.*/,\n\t\t\t{\n\t\t\t\tpattern: /^=begin\\s[\\s\\S]*?^=end/m,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /[.\\\\]/\n\t\t\t}\n\t\t},\n\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n\t});\n\n\tvar interpolation = {\n\t\tpattern: /#\\{[^}]+\\}/,\n\t\tinside: {\n\t\t\t'delimiter': {\n\t\t\t\tpattern: /^#\\{|\\}$/,\n\t\t\t\talias: 'tag'\n\t\t\t},\n\t\t\trest: Prism.languages.ruby\n\t\t}\n\t};\n\n\tdelete Prism.languages.ruby.function;\n\n\tPrism.languages.insertBefore('ruby', 'keyword', {\n\t\t'regex': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/%r/.source + '(?:' + [\n\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\t\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n\t\t\t\t\t// Here we need to specifically allow interpolation\n\t\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n\t\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n\t\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source\n\t\t\t\t].join('|') + ')' + /[egimnosux]{0,6}/.source),\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n\t\t'symbol': {\n\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'method-definition': {\n\t\t\tpattern: /(\\bdef\\s+)[\\w.]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'function': /\\w+$/,\n\t\t\t\trest: Prism.languages.ruby\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('ruby', 'number', {\n\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n\t});\n\n\tPrism.languages.ruby.string = [\n\t\t{\n\t\t\tpattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [\n\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n\t\t\t\t// Here we need to specifically allow interpolation\n\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source\n\t\t\t].join('|') + ')'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n\t\t\talias: 'heredoc-string',\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<[-~]?/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n\t\t\talias: 'heredoc-string',\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<[-~]?'|'$/,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t];\n\n\tPrism.languages.rb = Prism.languages.ruby;\n}(Prism));\n","(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n}(Prism));\n","(function (Prism) {\n\tPrism.languages.scheme = {\n\t\t// this supports \"normal\" single-line comments:\n\t\t//   ; comment\n\t\t// and (potentially nested) multiline comments:\n\t\t//   #| comment #| nested |# still comment |#\n\t\t// (only 1 level of nesting is supported)\n\t\t'comment': /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n\t\t'string': {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'symbol': {\n\t\t\tpattern: /'[^()\\[\\]#'\\s]+/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'character': {\n\t\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'lambda-parameter': [\n\t\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'keyword': {\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'builtin': {\n\t\t\t// all functions of the base library of R7RS plus some of built-ins of R5Rs\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'operator': {\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'number': {\n\t\t\t// The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n\t\t\t//\n\t\t\t// <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n\t\t\t// <num R>       := <prefix R><complex R>\n\t\t\t// <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n\t\t\t// <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n\t\t\t// <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n\t\t\t// <ureal R>     := <uint R>(?:\\/<uint R>)?\n\t\t\t//                | <decimal R>\n\t\t\t//\n\t\t\t// <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n\t\t\t// <uint R>      := <digit R>+\n\t\t\t// <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n\t\t\t// <radix 2>     := #b\n\t\t\t// <radix 8>     := #o\n\t\t\t// <radix 10>    := (?:#d)?\n\t\t\t// <radix 16>    := #x\n\t\t\t// <digit 2>     := [01]\n\t\t\t// <digit 8>     := [0-7]\n\t\t\t// <digit 10>    := \\d\n\t\t\t// <digit 16>    := [0-9a-f]\n\t\t\t//\n\t\t\t// The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n\t\t\t// non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n\t\t\t// pattern:\n\t\t\tpattern: RegExp(SortedBNF({\n\t\t\t\t'<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,\n\t\t\t\t'<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n\t\t\t\t'<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n\t\t\t\t'<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n\t\t\t\t'<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n\n\t\t\t\t'<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n\t\t\t\t'<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n\t\t\t\t'<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n\t\t\t\t'<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n\t\t\t\t'<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n\n\t\t\t\t'<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source,\n\t\t\t}), 'i'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'identifier': {\n\t\t\tpattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'punctuation': /[()\\[\\]']/\n\t};\n\n\t/**\n\t * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\n\t *\n\t * @param {Record<string, string>} grammar\n\t * @returns {string}\n\t */\n\tfunction SortedBNF(grammar) {\n\t\tfor (var key in grammar) {\n\t\t\tgrammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n\t\t\t\treturn '(?:' + grammar[key].trim() + ')';\n\t\t\t});\n\t\t}\n\t\t// return the last item\n\t\treturn grammar[key];\n\t}\n\n}(Prism));\n","Prism.languages.scss = Prism.languages.extend('css', {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\tlookbehind: true\n\t},\n\t'atrule': {\n\t\tpattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t// url, compassified\n\t'url': /(?:[-a-z]+-)?url(?=\\()/i,\n\t// CSS selector regex is not appropriate for Sass\n\t// since there can be lot more things (var, @ directive, nesting..)\n\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)\n\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n\t// can \"pass\" as a selector- e.g: proper#{$erty})\n\t// this one was hard to do, so please be careful if you edit this one :)\n\t'selector': {\n\t\t// Initial look-ahead is used to prevent matching of blank selectors\n\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/m,\n\t\tinside: {\n\t\t\t'parent': {\n\t\t\t\tpattern: /&/,\n\t\t\t\talias: 'important'\n\t\t\t},\n\t\t\t'placeholder': /%[-\\w]+/,\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t},\n\t'property': {\n\t\tpattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n\t\tinside: {\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('scss', 'atrule', {\n\t'keyword': [\n\t\t/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i,\n\t\t{\n\t\t\tpattern: /( )(?:from|through)(?= )/,\n\t\t\tlookbehind: true\n\t\t}\n\t]\n});\n\nPrism.languages.insertBefore('scss', 'important', {\n\t// var and interpolated vars\n\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\n\nPrism.languages.insertBefore('scss', 'function', {\n\t'module-modifier': {\n\t\tpattern: /\\b(?:as|with|show|hide)\\b/i,\n\t\talias: 'keyword'\n\t},\n\t'placeholder': {\n\t\tpattern: /%[-\\w]+/,\n\t\talias: 'selector'\n\t},\n\t'statement': {\n\t\tpattern: /\\B!(?:default|optional)\\b/i,\n\t\talias: 'keyword'\n\t},\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t},\n\t'operator': {\n\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n\t\tlookbehind: true\n\t}\n});\n\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n","Prism.languages.sql = {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n\t\tlookbehind: true\n\t},\n\t'variable': [\n\t\t{\n\t\t\tpattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t/@[\\w.$]+/\n\t],\n\t'string': {\n\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n\t\tgreedy: true,\n\t\tlookbehind: true\n\t},\n\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?\n\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n\t'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n\t'punctuation': /[;[\\]()`,.]/\n};\n","Prism.languages.swift = {\n\t'comment': {\n\t\t// Nested comments are supported up to 2 levels\n\t\tpattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'string-literal': [\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ /(?![\"#])/.source\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\\\(?=[\\r\\n])/,\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[^\"#])(#+)/.source\n\t\t\t\t+ '(?:'\n\t\t\t\t// single-line string\n\t\t\t\t+ /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source\n\t\t\t\t+ '|'\n\t\t\t\t// multi-line string\n\t\t\t\t+ /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source\n\t\t\t\t+ ')'\n\t\t\t\t+ '\\\\2'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: null // see below\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^\\)|\\\\#+\\($/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t],\n\n\t'directive': {\n\t\t// directives with conditions\n\t\tpattern: RegExp(\n\t\t\t/#/.source\n\t\t\t+ '(?:'\n\t\t\t+ (\n\t\t\t\t/(?:elseif|if)\\b/.source\n\t\t\t\t+ '(?:[ \\t]*'\n\t\t\t\t// This regex is a little complex. It's equivalent to this:\n\t\t\t\t//   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n\t\t\t\t// where <round> is a general parentheses expression.\n\t\t\t\t+ /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source\n\t\t\t\t+ ')+'\n\t\t\t)\n\t\t\t+ '|'\n\t\t\t+ /(?:else|endif)\\b/.source\n\t\t\t+ ')'\n\t\t),\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t'directive-name': /^#\\w+/,\n\t\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,\n\t\t\t'operator': /!|&&|\\|\\||[<>]=?/,\n\t\t\t'punctuation': /[(),]/\n\t\t}\n\t},\n\t'literal': {\n\t\tpattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n\t\talias: 'constant'\n\t},\n\t'other-directive': {\n\t\tpattern: /#\\w+\\b/,\n\t\talias: 'property'\n\t},\n\n\t'attribute': {\n\t\tpattern: /@\\w+/,\n\t\talias: 'atrule'\n\t},\n\n\t'function-definition': {\n\t\tpattern: /(\\bfunc\\s+)\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'label': {\n\t\t// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n\t\tpattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n\t\tlookbehind: true,\n\t\talias: 'important'\n\t},\n\n\t'keyword': /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'nil': {\n\t\tpattern: /\\bnil\\b/,\n\t\talias: 'constant'\n\t},\n\n\t'short-argument': /\\$\\d+\\b/,\n\t'omit': {\n\t\tpattern: /\\b_\\b/,\n\t\talias: 'keyword'\n\t},\n\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n\n\t// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n\t'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n\t'constant': /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n\n\t// Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n\t// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n\t// This regex only supports ASCII operators.\n\t'operator': /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n\t'punctuation': /[{}[\\]();,.:\\\\]/\n};\n\nPrism.languages.swift['string-literal'].forEach(function (rule) {\n\trule.inside['interpolation'].inside = Prism.languages.swift;\n});\n","(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n","(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n","Prism.languages.wasm = {\n\t'comment': [\n\t\t/\\(;[\\s\\S]*?;\\)/,\n\t\t{\n\t\t\tpattern: /;;.*/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n\t\tgreedy: true\n\t},\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /\\b(?:align|offset)=/,\n\t\t\tinside: {\n\t\t\t\t'operator': /=/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/\n\t],\n\t'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/i,\n\t'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n\t'punctuation': /[()]/\n};\n","(function (Prism) {\n\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n\tvar anchorOrAlias = /[*&][^\\s[\\]{},]+/;\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\tvar tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/;\n\t// https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\tvar properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|'\n\t\t+ anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)';\n\t// https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n\t// This is a simplified version that doesn't support \"#\" and multiline keys\n\t// All these long scarry character classes are simplified versions of YAML's characters\n\tvar plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source\n\t\t.replace(/<PLAIN>/g, function () { return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source; });\n\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n\n\t/**\n\t *\n\t * @param {string} value\n\t * @param {string} [flags]\n\t * @returns {RegExp}\n\t */\n\tfunction createValuePattern(value, flags) {\n\t\tflags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\t\tvar pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source\n\t\t\t.replace(/<<prop>>/g, function () { return properties; }).replace(/<<value>>/g, function () { return value; });\n\t\treturn RegExp(pattern, flags);\n\t}\n\n\tPrism.languages.yaml = {\n\t\t'scalar': {\n\t\t\tpattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source\n\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })),\n\t\t\tlookbehind: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'comment': /#.*/,\n\t\t'key': {\n\t\t\tpattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source\n\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })\n\t\t\t\t.replace(/<<key>>/g, function () { return '(?:' + plainKey + '|' + string + ')'; })),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'atrule'\n\t\t},\n\t\t'directive': {\n\t\t\tpattern: /(^[ \\t]*)%.+/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'datetime': {\n\t\t\tpattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'number'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: createValuePattern(/true|false/.source, 'i'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'null': {\n\t\t\tpattern: createValuePattern(/null|~/.source, 'i'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'important'\n\t\t},\n\t\t'string': {\n\t\t\tpattern: createValuePattern(string),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'number': {\n\t\t\tpattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'tag': tag,\n\t\t'important': anchorOrAlias,\n\t\t'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n\t};\n\n\tPrism.languages.yml = Prism.languages.yaml;\n\n}(Prism));\n","/* eslint-disable @typescript-eslint/no-unused-vars,simple-import-sort/imports */\nimport { Decorate, getParent, getPlugin, isElement } from '@udecode/plate-core';\n// noinspection ES6UnusedImports\nimport Prism, { languages, Token, tokenize } from 'prismjs';\nimport 'prismjs/components/prism-antlr4';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-cmake';\nimport 'prismjs/components/prism-coffeescript';\nimport 'prismjs/components/prism-cpp';\nimport 'prismjs/components/prism-csharp';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-dart';\nimport 'prismjs/components/prism-django';\nimport 'prismjs/components/prism-docker';\nimport 'prismjs/components/prism-ejs';\nimport 'prismjs/components/prism-erlang';\nimport 'prismjs/components/prism-git';\nimport 'prismjs/components/prism-go';\nimport 'prismjs/components/prism-graphql';\nimport 'prismjs/components/prism-groovy';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-kotlin';\nimport 'prismjs/components/prism-latex';\nimport 'prismjs/components/prism-less';\nimport 'prismjs/components/prism-lua';\nimport 'prismjs/components/prism-makefile';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-matlab';\nimport 'prismjs/components/prism-objectivec';\nimport 'prismjs/components/prism-perl';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-powershell';\nimport 'prismjs/components/prism-properties';\nimport 'prismjs/components/prism-protobuf';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-r';\nimport 'prismjs/components/prism-ruby';\nimport 'prismjs/components/prism-sass';\n// import 'prismjs/components/prism-scala';\nimport 'prismjs/components/prism-scheme';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-wasm';\nimport 'prismjs/components/prism-yaml';\nimport { Node, NodeEntry } from 'slate';\nimport { ELEMENT_CODE_BLOCK } from './constants';\nimport { CodeBlockPlugin } from './types';\n\nexport const decorateCodeLine: Decorate = (editor, { type }) => {\n  const code_block = getPlugin<CodeBlockPlugin>(editor, ELEMENT_CODE_BLOCK);\n\n  return (entry: NodeEntry) => {\n    const ranges: any = [];\n    const [node, path] = entry;\n    const codeBlock = getParent(editor, path);\n\n    if (!codeBlock) return;\n\n    let langName = '';\n    if (codeBlock?.[0].type === code_block.type) {\n      const [codeBlockNode] = codeBlock;\n      langName = codeBlockNode?.lang;\n    }\n\n    if (!code_block.options.syntax || langName === 'plain') {\n      langName = '';\n    }\n    const lang = languages[langName];\n\n    if (!lang) {\n      return ranges;\n    }\n\n    if (isElement(node) && node.type === type) {\n      const text = Node.string(node);\n      const tokens = tokenize(text, lang);\n      let offset = 0;\n\n      for (const element of tokens) {\n        if (typeof element === 'string') {\n          offset += element.length;\n        } else {\n          const token: Token = element;\n          ranges.push({\n            anchor: { path, offset },\n            focus: { path, offset: offset + token.length },\n            className: `prism-token token ${token.type} `,\n            [token.type]: true,\n            prism: true,\n          });\n          offset += token.length;\n        }\n      }\n    }\n    return ranges;\n  };\n};\n","import { DeserializeHtml } from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './constants';\n\nexport const deserializeHtmlCodeBlock: DeserializeHtml = {\n  getNode: (el) => {\n    let lines = el.textContent?.split('\\n');\n\n    if (!lines?.length) {\n      lines = [el.textContent ?? ''];\n    }\n\n    const codeLines = lines.map((line) => ({\n      type: ELEMENT_CODE_LINE,\n      children: [{ text: line }],\n    }));\n\n    return {\n      type: ELEMENT_CODE_BLOCK,\n      children: codeLines,\n    };\n  },\n};\n","import { getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { ELEMENT_CODE_LINE } from '../constants';\n\nexport const getCodeLineType = <T = {}>(editor: PlateEditor<T>): string =>\n  getPluginType(editor, ELEMENT_CODE_LINE);\n","import {\n  getAbove,\n  getParent,\n  isElement,\n  PlateEditor,\n  someNode,\n} from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { getCodeLineType } from '../options';\n\n/**\n * If at (default = selection) is in ul>li>p, return li and ul node entries.\n */\nexport const getCodeLineEntry = (\n  editor: PlateEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (\n    at &&\n    someNode(editor, {\n      at,\n      match: { type: getCodeLineType(editor) },\n    })\n  ) {\n    const selectionParent = getParent(editor, at);\n    if (!selectionParent) return;\n    const [, parentPath] = selectionParent;\n\n    const codeLine =\n      getAbove(editor, {\n        at,\n        match: { type: getCodeLineType(editor) },\n      }) || getParent(editor, parentPath);\n\n    if (!codeLine) return;\n    const [codeLineNode, codeLinePath] = codeLine;\n\n    if (\n      isElement(codeLineNode) &&\n      codeLineNode.type !== getCodeLineType(editor)\n    )\n      return;\n\n    const codeBlock = getParent(editor, codeLinePath);\n    if (!codeBlock) return;\n\n    return {\n      codeBlock,\n      codeLine,\n    };\n  }\n};\n","import { getNodes, PlateEditor } from '@udecode/plate-core';\nimport { Location } from 'slate';\nimport { getCodeLineType } from '../options';\n\n/**\n * Get code line entries\n */\nexport const getCodeLines = (\n  editor: PlateEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (!at) return;\n\n  return [\n    ...getNodes(editor, {\n      at,\n      match: { type: getCodeLineType(editor) },\n    }),\n  ];\n};\n","import { isExpanded, TEditor } from '@udecode/plate-core';\nimport { Ancestor, Editor, Node, NodeEntry, Transforms } from 'slate';\n\nexport interface IndentCodeLineOptions {\n  codeBlock: NodeEntry<Ancestor>;\n  codeLine: NodeEntry<Ancestor | Node>;\n}\n\n/**\n * Indent if:\n * - the selection is expanded\n * - the selected code line has no whitespace character\n * Indentation = 2 spaces.\n */\nexport const indentCodeLine = (\n  editor: TEditor,\n  { codeLine }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n  if (!isExpanded(editor.selection)) {\n    const cursor = editor.selection?.anchor;\n    const range = Editor.range(editor, codeLineStart, cursor);\n    const text = Editor.string(editor, range);\n\n    if (/\\S/.test(text)) {\n      Transforms.insertText(editor, '  ', { at: editor.selection! });\n      return;\n    }\n  }\n\n  Transforms.insertText(editor, '  ', { at: codeLineStart });\n};\n","import { getText, TEditor } from '@udecode/plate-core';\nimport { Editor, Transforms } from 'slate';\nimport { OutdentCodeLineOptions } from './outdentCodeLine';\n\n/**\n * If there is a whitespace character at the start of the code line,\n * delete it.\n */\nexport const deleteStartSpace = (\n  editor: TEditor,\n  { codeLine }: OutdentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = Editor.start(editor, codeLinePath);\n  const codeLineEnd = codeLineStart && Editor.after(editor, codeLineStart);\n  const spaceRange =\n    codeLineEnd && Editor.range(editor, codeLineStart, codeLineEnd);\n  const spaceText = getText(editor, spaceRange);\n\n  if (/\\s/.test(spaceText)) {\n    Transforms.delete(editor, { at: spaceRange });\n    return true;\n  }\n\n  return false;\n};\n","import { TEditor } from '@udecode/plate-core';\nimport { Ancestor, Node, NodeEntry } from 'slate';\nimport { deleteStartSpace } from './deleteStartSpace';\n\nexport interface OutdentCodeLineOptions {\n  codeBlock: NodeEntry<Ancestor>;\n  codeLine: NodeEntry<Ancestor | Node>;\n}\n\n/**\n * Outdent the code line.\n * Remove 2 whitespace characters if any.\n */\nexport const outdentCodeLine = (\n  editor: TEditor,\n  { codeBlock, codeLine }: OutdentCodeLineOptions\n) => {\n  const deleted = deleteStartSpace(editor, { codeBlock, codeLine });\n  deleted && deleteStartSpace(editor, { codeBlock, codeLine });\n};\n","import { getParent, KeyboardHandler } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { getCodeLineEntry } from './queries/getCodeLineEntry';\nimport { getCodeLines } from './queries/getCodeLines';\nimport { indentCodeLine } from './transforms/indentCodeLine';\nimport { outdentCodeLine } from './transforms/outdentCodeLine';\nimport { CodeBlockPlugin } from './types';\n\n/**\n * - Shift+Tab: outdent code line.\n * - Tab: indent code line.\n */\nexport const onKeyDownCodeBlock: KeyboardHandler<{}, CodeBlockPlugin> = (\n  editor\n) => (e) => {\n  if (e.key === 'Tab') {\n    const shiftTab = e.shiftKey;\n    const res = getCodeLineEntry(editor, {});\n    if (res) {\n      const { codeBlock, codeLine } = res;\n\n      e.preventDefault();\n\n      // outdent with shift+tab\n\n      if (shiftTab) {\n        // TODO: outdent multiple lines\n        outdentCodeLine(editor, { codeBlock, codeLine });\n      }\n\n      // indent with tab\n      const tab = !e.shiftKey;\n      if (tab) {\n        // TODO: indent multiple lines\n        indentCodeLine(editor, { codeBlock, codeLine });\n      }\n      return;\n    }\n    const codeLines = getCodeLines(editor, {});\n    if (codeLines && codeLines?.[0]) {\n      e.preventDefault();\n      const [, firstLinePath] = codeLines[0];\n      const codeBlock = getParent(editor, firstLinePath)!;\n      for (const codeLine of codeLines) {\n        if (shiftTab) {\n          // TODO: outdent multiple lines\n          outdentCodeLine(editor, { codeBlock, codeLine });\n        }\n\n        // indent with tab\n        const tab = !e.shiftKey;\n        if (tab) {\n          // TODO: indent multiple lines\n          indentCodeLine(editor, { codeBlock, codeLine });\n        }\n      }\n    }\n  }\n\n  // FIXME: would prefer this as mod+a, but doesn't work\n  if (e.key === 'a' && (e.metaKey || e.ctrlKey)) {\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n\n    const { codeBlock } = res;\n    const [, codeBlockPath] = codeBlock;\n\n    // select the whole code block\n    Transforms.select(editor, codeBlockPath);\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  // Note: rather than handling mod+enter/mod+shift+enter here, we recommend\n  // using the exit-break plugin/ If not using exit-break, follow similar logic\n  // to exit-break to add behavior to exit the code-block\n};\n","import {\n  findNode,\n  getPluginType,\n  PlateEditor,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Node, Transforms } from 'slate';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './constants';\n\nexport const insertFragmentCodeBlock = (editor: PlateEditor) => {\n  const { insertFragment } = editor;\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const codeLineType = getPluginType(editor, ELEMENT_CODE_LINE);\n\n  function convertNodeToCodeLine(node: TDescendant) {\n    return {\n      type: codeLineType,\n      children: [{ text: Node.string(node) }],\n    };\n  }\n\n  function extractCodeLinesFromCodeBlock(node: TDescendant) {\n    return node.children;\n  }\n\n  return (fragment: TDescendant[]) => {\n    const inCodeLine = findNode(editor, { match: { type: codeLineType } });\n    if (!inCodeLine) {\n      return insertFragment(fragment);\n    }\n\n    return Transforms.insertFragment(\n      editor,\n      fragment.flatMap((node) =>\n        node.type === codeBlockType\n          ? extractCodeLinesFromCodeBlock(node)\n          : convertNodeToCodeLine(node)\n      )\n    );\n  };\n};\n","import { getText, TEditor } from '@udecode/plate-core';\nimport { IndentCodeLineOptions } from '../transforms/indentCodeLine';\n\nexport const getIndentDepth = (\n  editor: TEditor,\n  { codeLine }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const text = getText(editor, codeLinePath);\n  return text.search(/\\S|$/);\n};\n","import {\n  getPluginType,\n  InsertNodesOptions,\n  isExpanded,\n  isSelectionAtBlockStart,\n  PlateEditor,\n  setNodes,\n  someNode,\n  TElement,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\n\n/**\n * Insert a code block: set the node to code line and wrap it with a code block.\n * If the cursor is not at the block start, insert break before.\n */\nexport const insertCodeBlock = (\n  editor: PlateEditor,\n  insertNodesOptions: Omit<InsertNodesOptions, 'match'> = {}\n) => {\n  if (!editor.selection || isExpanded(editor.selection)) return;\n\n  const matchCodeElements = (node: TElement) =>\n    node.type === getPluginType(editor, ELEMENT_CODE_BLOCK) ||\n    node.type === getCodeLineType(editor);\n\n  if (\n    someNode(editor, {\n      match: matchCodeElements,\n    })\n  ) {\n    return;\n  }\n\n  if (!isSelectionAtBlockStart(editor)) {\n    editor.insertBreak();\n  }\n\n  setNodes<TElement>(\n    editor,\n    {\n      type: getCodeLineType(editor),\n      children: [{ text: '' }],\n    },\n    insertNodesOptions\n  );\n\n  wrapNodes(\n    editor,\n    {\n      type: getPluginType(editor, ELEMENT_CODE_BLOCK),\n      children: [],\n    },\n    insertNodesOptions\n  );\n};\n","import { insertNodes, PlateEditor, TElement } from '@udecode/plate-core';\nimport { getCodeLineType } from '../options';\n\n/**\n * Insert a code line starting with indentation.\n */\nexport const insertCodeLine = (editor: PlateEditor, indentDepth = 0) => {\n  if (editor.selection) {\n    const indent = ' '.repeat(indentDepth);\n\n    insertNodes<TElement>(editor, {\n      type: getCodeLineType(editor),\n      children: [{ text: indent }],\n    });\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getPluginType,\n  insertNodes,\n  isBlockAboveEmpty,\n  isExpanded,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, Path } from 'slate';\nimport { CodeBlockInsertOptions } from '../types';\nimport { insertCodeBlock } from './insertCodeBlock';\n\n/**\n * Called by toolbars to make sure a code-block gets inserted below a paragraph\n * rather than awkwardly splitting the current selection.\n */\nexport const insertEmptyCodeBlock = (\n  editor: PlateEditor,\n  {\n    defaultType = getPluginType(editor, ELEMENT_DEFAULT),\n    insertNodesOptions,\n    level = 0,\n  }: CodeBlockInsertOptions\n) => {\n  if (!editor.selection) return;\n\n  if (isExpanded(editor.selection) || !isBlockAboveEmpty(editor)) {\n    const selectionPath = Editor.path(editor, editor.selection);\n    const insertPath = Path.next(selectionPath.slice(0, level + 1));\n    insertNodes<TElement>(\n      editor,\n      { type: defaultType, children: [{ text: '' }] },\n      {\n        at: insertPath,\n        select: true,\n      }\n    );\n  }\n  insertCodeBlock(editor, insertNodesOptions);\n};\n","import { getPluginType, PlateEditor, unwrapNodes } from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\n\nexport const unwrapCodeBlock = (editor: PlateEditor) => {\n  unwrapNodes(editor, {\n    match: { type: getCodeLineType(editor) },\n  });\n  unwrapNodes(editor, {\n    match: { type: getPluginType(editor, ELEMENT_CODE_BLOCK) },\n    split: true,\n  });\n};\n","import {\n  getNodes,\n  getPluginType,\n  PlateEditor,\n  setNodes,\n  someNode,\n  TElement,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\nimport { unwrapCodeBlock } from './unwrapCodeBlock';\n\nexport const toggleCodeBlock = (editor: PlateEditor) => {\n  if (!editor.selection) return;\n\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n\n  const isActive = someNode(editor, {\n    match: { type: codeBlockType },\n  });\n\n  unwrapCodeBlock(editor);\n\n  setNodes<TElement>(editor, {\n    type: getCodeLineType(editor),\n  });\n\n  if (!isActive) {\n    const codeBlock = {\n      type: codeBlockType,\n      children: [],\n    };\n    wrapNodes(editor, codeBlock);\n\n    const nodes = [\n      ...getNodes(editor, {\n        match: { type: getCodeLineType(editor) },\n      }),\n    ];\n\n    const codeLine = {\n      type: codeBlockType,\n      children: [],\n    };\n\n    for (const [, path] of nodes) {\n      // Transforms.wrapNodes(editor, codeLine, {\n      setNodes<TElement>(editor, codeLine, {\n        at: path,\n      });\n    }\n  }\n};\n","import { WithOverride } from '@udecode/plate-core';\nimport { insertFragmentCodeBlock } from './insertFragmentCodeBlock';\nimport { getCodeLineEntry, getIndentDepth } from './queries';\nimport { insertCodeLine } from './transforms';\nimport { CodeBlockPlugin } from './types';\n\nexport const withCodeBlock: WithOverride<{}, CodeBlockPlugin> = (editor) => {\n  const { insertBreak } = editor;\n\n  const insertBreakCodeBlock = () => {\n    if (!editor.selection) return;\n\n    const res = getCodeLineEntry(editor, {});\n    if (!res) return;\n\n    const { codeBlock, codeLine } = res;\n    const indentDepth = getIndentDepth(editor, {\n      codeBlock,\n      codeLine,\n    });\n    insertCodeLine(editor, indentDepth);\n\n    return true;\n  };\n\n  editor.insertBreak = () => {\n    if (insertBreakCodeBlock()) return;\n\n    insertBreak();\n  };\n\n  editor.insertFragment = insertFragmentCodeBlock(editor);\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  getPlugin,\n  KEY_DESERIALIZE_HTML,\n  someNode,\n} from '@udecode/plate-core';\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './constants';\nimport { decorateCodeLine } from './decorateCodeLine';\nimport { deserializeHtmlCodeBlock } from './deserializeHtmlCodeBlockPre';\nimport { onKeyDownCodeBlock } from './onKeyDownCodeBlock';\nimport { CodeBlockPlugin } from './types';\nimport { withCodeBlock } from './withCodeBlock';\n\n/**\n * Enables support for pre-formatted code blocks.\n */\nexport const createCodeBlockPlugin = createPluginFactory<CodeBlockPlugin>({\n  key: ELEMENT_CODE_BLOCK,\n  isElement: true,\n  deserializeHtml: {\n    ...deserializeHtmlCodeBlock,\n    validNodeName: 'PRE',\n  },\n  handlers: {\n    onKeyDown: onKeyDownCodeBlock,\n  },\n  withOverrides: withCodeBlock,\n  options: {\n    hotkey: ['mod+opt+8', 'mod+shift+8'],\n    syntax: true,\n    syntaxPopularFirst: false,\n  },\n  then: (editor) => ({\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              query: () => {\n                const code_line = getPlugin(editor, ELEMENT_CODE_LINE);\n\n                return !someNode(editor, {\n                  match: { type: code_line.type },\n                });\n              },\n            },\n          },\n        },\n      },\n    },\n  }),\n  plugins: [\n    {\n      key: ELEMENT_CODE_LINE,\n      isElement: true,\n      decorate: decorateCodeLine,\n    },\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}
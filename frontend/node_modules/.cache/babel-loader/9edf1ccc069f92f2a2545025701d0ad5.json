{"ast":null,"code":"import { getPluginInjectProps, getNodes, setNodes, createPluginFactory, getPluginType, ELEMENT_DEFAULT } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\n/**\n * Add offset to the indentation of the selected blocks.\n */\n\nconst setIndent = (editor, {\n  offset = 1,\n  getNodesOptions,\n  setNodesProps,\n  unsetNodesProps = []\n}) => {\n  const {\n    nodeKey\n  } = getPluginInjectProps(editor, KEY_INDENT);\n  const nodes = Array.from(getNodes(editor, {\n    block: true,\n    ...getNodesOptions\n  }));\n  nodes.forEach(([node, path]) => {\n    var _node, _setNodesProps;\n\n    const blockIndent = (_node = node[nodeKey]) !== null && _node !== void 0 ? _node : 0;\n    const newIndent = blockIndent + offset;\n    const props = (_setNodesProps = setNodesProps === null || setNodesProps === void 0 ? void 0 : setNodesProps({\n      indent: newIndent\n    })) !== null && _setNodesProps !== void 0 ? _setNodesProps : {};\n\n    if (newIndent <= 0) {\n      Transforms.unsetNodes(editor, [nodeKey, ...unsetNodesProps], {\n        at: path\n      });\n    } else {\n      setNodes(editor, {\n        [nodeKey]: newIndent,\n        ...props\n      }, {\n        at: path\n      });\n    }\n  });\n};\n/**\n * Increase the indentation of the selected blocks.\n */\n\n\nconst indent = (editor, options) => {\n  setIndent(editor, {\n    offset: 1,\n    ...options\n  });\n};\n/**\n * Decrease the indentation of the selected blocks.\n */\n\n\nconst outdent = (editor, options) => {\n  setIndent(editor, {\n    offset: -1,\n    ...options\n  });\n};\n\nconst onKeyDownIndent = editor => e => {\n  if (e.key === 'Tab' && !e.altKey && !e.ctrlKey && !e.metaKey) {\n    e.preventDefault();\n    e.shiftKey ? outdent(editor) : indent(editor);\n  }\n};\n/**\n * - `node.indent` can not exceed `indentMax`\n * - `node.indent` is unset if `node.type` is not in `types`\n */\n\n\nconst withIndent = (editor, {\n  inject: {\n    props: {\n      validTypes\n    } = {}\n  },\n  options: {\n    indentMax\n  }\n}) => {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    const element = node;\n    const {\n      type\n    } = element;\n\n    if (type) {\n      if (validTypes.includes(type)) {\n        if (indentMax && element.indent && element.indent > indentMax) {\n          setNodes(editor, {\n            indent: indentMax\n          }, {\n            at: path\n          });\n          return;\n        }\n      } else if (element.indent) {\n        Transforms.unsetNodes(editor, 'indent', {\n          at: path\n        });\n        return;\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n\nconst KEY_INDENT = 'indent';\nconst createIndentPlugin = createPluginFactory({\n  key: KEY_INDENT,\n  withOverrides: withIndent,\n  handlers: {\n    onKeyDown: onKeyDownIndent\n  },\n  options: {\n    offset: 24,\n    unit: 'px'\n  },\n  then: (editor, {\n    options: {\n      offset,\n      unit\n    } = {}\n  }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_INDENT,\n        styleKey: 'marginLeft',\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n        transformNodeValue: ({\n          nodeValue\n        }) => {\n          return nodeValue * offset + unit;\n        }\n      }\n    }\n  })\n});\nexport { KEY_INDENT, createIndentPlugin, indent, onKeyDownIndent, outdent, setIndent, withIndent };","map":{"version":3,"sources":["../src/transforms/setIndent.ts","../src/transforms/indent.ts","../src/transforms/outdent.ts","../src/onKeyDownIndent.ts","../src/withIndent.ts","../src/createIndentPlugin.ts"],"names":["setIndent","offset","unsetNodesProps","nodeKey","getPluginInjectProps","nodes","getNodes","block","getNodesOptions","blockIndent","node","newIndent","props","setNodesProps","indent","Transforms","at","path","setNodes","options","outdent","onKeyDownIndent","editor","e","withIndent","inject","validTypes","indentMax","normalizeNode","element","type","KEY_INDENT","createIndentPlugin","createPluginFactory","key","withOverrides","handlers","onKeyDown","unit","then","styleKey","getPluginType","transformNodeValue","nodeValue"],"mappings":"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","sourcesContent":["import {\n  AnyObject,\n  EditorNodesOptions,\n  getNodes,\n  getPluginInjectProps,\n  PlateEditor,\n  setNodes,\n  UnhangRangeOptions,\n} from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { KEY_INDENT } from '../createIndentPlugin';\n\nexport interface SetIndentOptions {\n  /**\n   * 1 to indent\n   * -1 to outdent\n   * @default 1\n   */\n  offset?: number;\n\n  /**\n   * getNodes options\n   */\n  getNodesOptions?: EditorNodesOptions & UnhangRangeOptions;\n\n  /**\n   * Set other props than the indent one.\n   * These will be unset if indent = 0.\n   */\n  setNodesProps?: ({ indent }: { indent: number }) => AnyObject;\n\n  /**\n   * Nodes props to unset when indent = 0.\n   */\n  unsetNodesProps?: string[];\n}\n\n/**\n * Add offset to the indentation of the selected blocks.\n */\nexport const setIndent = (\n  editor: PlateEditor,\n  {\n    offset = 1,\n    getNodesOptions,\n    setNodesProps,\n    unsetNodesProps = [],\n  }: SetIndentOptions\n) => {\n  const { nodeKey } = getPluginInjectProps(editor, KEY_INDENT);\n\n  const nodes = Array.from(\n    getNodes(editor, {\n      block: true,\n      ...getNodesOptions,\n    })\n  );\n\n  nodes.forEach(([node, path]) => {\n    const blockIndent = node[nodeKey!] ?? 0;\n    const newIndent = blockIndent + offset;\n\n    const props = setNodesProps?.({ indent: newIndent }) ?? {};\n\n    if (newIndent <= 0) {\n      Transforms.unsetNodes(editor, [nodeKey!, ...unsetNodesProps], {\n        at: path,\n      });\n    } else {\n      setNodes(editor, { [nodeKey!]: newIndent, ...props }, { at: path });\n    }\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indent = (editor: PlateEditor, options?: SetIndentOptions) => {\n  setIndent(editor, { offset: 1, ...options });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdent = (editor: PlateEditor, options?: SetIndentOptions) => {\n  setIndent(editor, { offset: -1, ...options });\n};\n","import { KeyboardHandler } from '@udecode/plate-core';\nimport { indent, outdent } from './transforms/index';\n\nexport const onKeyDownIndent: KeyboardHandler = (editor) => (e) => {\n  if (e.key === 'Tab' && !e.altKey && !e.ctrlKey && !e.metaKey) {\n    e.preventDefault();\n    e.shiftKey ? outdent(editor) : indent(editor);\n  }\n};\n","import { setNodes, TElement, WithOverride } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { IndentPlugin } from './types';\n\n/**\n * - `node.indent` can not exceed `indentMax`\n * - `node.indent` is unset if `node.type` is not in `types`\n */\nexport const withIndent: WithOverride<{}, IndentPlugin> = (\n  editor,\n  { inject: { props: { validTypes } = {} }, options: { indentMax } }\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    const element = node as TElement;\n    const { type } = element;\n\n    if (type) {\n      if (validTypes!.includes(type)) {\n        if (indentMax && element.indent && element.indent > indentMax) {\n          setNodes(editor, { indent: indentMax }, { at: path });\n          return;\n        }\n      } else if (element.indent) {\n        Transforms.unsetNodes(editor, 'indent', { at: path });\n        return;\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\nimport { onKeyDownIndent } from './onKeyDownIndent';\nimport { IndentPlugin } from './types';\nimport { withIndent } from './withIndent';\n\nexport const KEY_INDENT = 'indent';\n\nexport const createIndentPlugin = createPluginFactory<IndentPlugin>({\n  key: KEY_INDENT,\n  withOverrides: withIndent,\n  handlers: {\n    onKeyDown: onKeyDownIndent,\n  },\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_INDENT,\n        styleKey: 'marginLeft',\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n        transformNodeValue: ({ nodeValue }) => {\n          return nodeValue * offset! + unit!;\n        },\n      },\n    },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}
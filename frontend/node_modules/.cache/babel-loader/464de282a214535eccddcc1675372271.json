{"ast":null,"code":"import { createStyles } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport React from 'react';\nimport { useEditorState, isCollapsed, createNodeHOC, createNodesHOC } from '@udecode/plate-core';\nimport { Editor } from 'slate';\nimport { useFocused, useSelected } from 'slate-react';\n\nconst getPlaceholderStyles = props => createStyles({\n  prefixClassNames: 'Placeholder',\n  ...props\n}, {\n  root: props.enabled && css([\"::before{content:attr(placeholder);opacity:0.3;\", \"}\"], {\n    \"display\": \"block\",\n    \"position\": \"absolute\",\n    \"cursor\": \"text\"\n  })\n});\n\nconst Placeholder = props => {\n  const {\n    children,\n    element,\n    placeholder,\n    hideOnBlur = true,\n    nodeProps\n  } = props;\n  const focused = useFocused();\n  const selected = useSelected();\n  const editor = useEditorState();\n  const isEmptyBlock = Editor.isEmpty(editor, element);\n  const enabled = isEmptyBlock && (!hideOnBlur || isCollapsed(editor.selection) && hideOnBlur && focused && selected);\n  return React.Children.map(children, child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: child.props.className,\n      nodeProps: { ...nodeProps,\n        styles: getPlaceholderStyles({\n          enabled,\n          ...props\n        }),\n        placeholder\n      }\n    });\n  });\n};\n\nconst withPlaceholder = createNodeHOC(Placeholder);\nconst withPlaceholders = createNodesHOC(Placeholder);\nexport { Placeholder, getPlaceholderStyles, withPlaceholder, withPlaceholders };","map":{"version":3,"sources":["../src/components/Placeholder.styles.ts","../src/components/Placeholder.tsx"],"names":["getPlaceholderStyles","props","createStyles","prefixClassNames","root","css","Placeholder","hideOnBlur","nodeProps","focused","useFocused","selected","useSelected","editor","useEditorState","isEmptyBlock","Editor","enabled","isCollapsed","child","className","styles","placeholder","withPlaceholder","createNodeHOC","withPlaceholders","createNodesHOC"],"mappings":";;;;;;;MAKaA,oBAAoB,GAAIC,KAAD,IAClCC,YAAY,CACV;AAAEC,EAAAA,gBAAgB,EAAlB,aAAA;AAAmC,KAAGF;AAAtC,CADU,EAEV;AACEG,EAAAA,IAAI,EACF,KAAK,CAAL,OAAA,IACAC,GADA,CAAA,CAAA,iDAAA,EAAA,GAAA,CAAA,EAKQ;AAAA,eAAA,OAAA;AAAA,gBAAA,UAAA;AAAA,cAAA;AAAA,GALR;AAFJ,CAFU,C;;MCMDC,WAAW,GAAIL,KAAD,IAA6B;AACtD,QAAM;AAAA,IAAA,QAAA;AAAA,IAAA,OAAA;AAAA,IAAA,WAAA;AAIJM,IAAAA,UAAU,GAJN,IAAA;AAKJC,IAAAA;AALI,MAAN,KAAA;AAQA,QAAMC,OAAO,GAAGC,UAAhB,EAAA;AACA,QAAMC,QAAQ,GAAGC,WAAjB,EAAA;AACA,QAAMC,MAAM,GAAGC,cAAf,EAAA;AAEA,QAAMC,YAAY,GAAGC,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAArB,OAAqBA,CAArB;AAEA,QAAMC,OAAO,GACXF,YAAY,KACX,CAAA,UAAA,IACEG,WAAW,CAACL,MAAM,CAAlBK,SAAW,CAAXA,IAAAA,UAAAA,IAAAA,OAAAA,IAHL,QACc,CADd;AAKA,SAAO,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA8BC,KAAD,IAAW;AAC7C,WAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BC,MAAAA,SAAS,EAAED,KAAK,CAALA,KAAAA,CADoB,SAAA;AAE/BX,MAAAA,SAAS,EAAE,EACT,GADS,SAAA;AAETa,QAAAA,MAAM,EAAErB,oBAAoB,CAAC;AAAA,UAAA,OAAA;AAAW,aAAGC;AAAd,SAAD,CAFnB;AAGTqB,QAAAA;AAHS;AAFoB,KAA1B,CAAP;AADF,GAAO,CAAP;AAUD,C;;MAEYC,eAAe,GAAGC,aAAa,CAAA,WAAA,C;MAC/BC,gBAAgB,GAAGC,cAAc,CAAA,WAAA,C","sourcesContent":["import { createStyles } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\nimport { PlaceholderProps } from './Placeholder.types';\n\nexport const getPlaceholderStyles = (props: PlaceholderProps) =>\n  createStyles(\n    { prefixClassNames: 'Placeholder', ...props },\n    {\n      root:\n        props.enabled &&\n        css`\n          ::before {\n            content: attr(placeholder);\n            opacity: 0.3;\n            ${tw`block absolute cursor-text`}\n          }\n        `,\n    }\n  );\n","import React from 'react';\nimport {\n  createNodeHOC,\n  createNodesHOC,\n  isCollapsed,\n  useEditorState,\n} from '@udecode/plate-core';\nimport { Editor } from 'slate';\nimport { useFocused, useSelected } from 'slate-react';\nimport { getPlaceholderStyles } from './Placeholder.styles';\nimport { PlaceholderProps } from './Placeholder.types';\n\nexport const Placeholder = (props: PlaceholderProps) => {\n  const {\n    children,\n    element,\n    placeholder,\n    hideOnBlur = true,\n    nodeProps,\n  } = props;\n\n  const focused = useFocused();\n  const selected = useSelected();\n  const editor = useEditorState();\n\n  const isEmptyBlock = Editor.isEmpty(editor, element);\n\n  const enabled =\n    isEmptyBlock &&\n    (!hideOnBlur ||\n      (isCollapsed(editor.selection) && hideOnBlur && focused && selected));\n\n  return React.Children.map(children, (child) => {\n    return React.cloneElement(child, {\n      className: child.props.className,\n      nodeProps: {\n        ...nodeProps,\n        styles: getPlaceholderStyles({ enabled, ...props }),\n        placeholder,\n      },\n    });\n  });\n};\n\nexport const withPlaceholder = createNodeHOC(Placeholder);\nexport const withPlaceholders = createNodesHOC(Placeholder);\n"]},"metadata":{},"sourceType":"module"}
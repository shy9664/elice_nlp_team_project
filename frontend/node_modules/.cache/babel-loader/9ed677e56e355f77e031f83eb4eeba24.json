{"ast":null,"code":"import { createStyles, getRootProps } from '@udecode/plate-styled-components';\nimport _styled, { css } from 'styled-components';\nimport React from 'react';\nimport { ELEMENT_CODE_BLOCK, CODE_BLOCK_LANGUAGES_POPULAR, CODE_BLOCK_LANGUAGES, insertEmptyCodeBlock } from '@udecode/plate-code-block';\nimport { useEditorRef, getPluginOptions, setNodes, usePlateEditorState, getPluginType, getPreventDefaultHandler } from '@udecode/plate-core';\nimport { ReactEditor } from 'slate-react';\nimport { BlockToolbarButton } from '@udecode/plate-toolbar';\n\nconst getCodeBlockElementStyles = props => createStyles({\n  prefixClassNames: 'CodeBlockElement',\n  ...props\n}, {\n  root: [{\n    \"whiteSpace\": \"pre-wrap\",\n    \"paddingTop\": \"0.75rem\",\n    \"paddingBottom\": \"0.75rem\",\n    \"paddingLeft\": \"1rem\",\n    \"paddingRight\": \"1rem\"\n  }, css([\"font-size:16px;font-family:SFMono-Regular,Consolas,Monaco,'Liberation Mono',Menlo,Courier,monospace;tab-size:2;line-height:normal;border-radius:3px;background-color:rgb(247,246,243);\"])]\n});\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst CodeBlockSelectElement = ({\n  lang,\n  onChange,\n  ...props\n}) => {\n  const [value, setValue] = React.useState(lang);\n  const editor = useEditorRef();\n  const {\n    syntaxPopularFirst\n  } = getPluginOptions(editor, ELEMENT_CODE_BLOCK);\n  return /*#__PURE__*/React.createElement(\"select\", _extends({\n    value: value,\n    style: {\n      float: 'right'\n    },\n    onClick: e => {\n      e.stopPropagation();\n    },\n    onChange: e => {\n      onChange(e.target.value);\n      setValue(e.target.value);\n    },\n    contentEditable: false\n  }, props), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, \"Plain text\"), syntaxPopularFirst && Object.entries(CODE_BLOCK_LANGUAGES_POPULAR).map(([key, val]) => /*#__PURE__*/React.createElement(\"option\", {\n    key: key,\n    value: key\n  }, val)), Object.entries(CODE_BLOCK_LANGUAGES).map(([key, val]) => /*#__PURE__*/React.createElement(\"option\", {\n    key: key,\n    value: key\n  }, val)));\n};\n\nconst CodeBlockElement = props => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element,\n    editor\n  } = props;\n  const rootProps = getRootProps(props);\n  const {\n    lang\n  } = element;\n  const {\n    root\n  } = getCodeBlockElementStyles(props);\n  const {\n    syntax\n  } = getPluginOptions(editor, ELEMENT_CODE_BLOCK);\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_StyledPre, _extends({}, attributes, {\n    className: root.className\n  }, rootProps, nodeProps, {\n    $_css: root.css\n  }), syntax && /*#__PURE__*/React.createElement(CodeBlockSelectElement, {\n    \"data-testid\": \"CodeBlockSelectElement\",\n    lang: lang,\n    onChange: val => {\n      const path = ReactEditor.findPath(editor, element);\n      setNodes(editor, {\n        lang: val\n      }, {\n        at: path\n      });\n    }\n  }), /*#__PURE__*/React.createElement(\"code\", {\n    className: codeClassName\n  }, children)));\n};\n\nvar _StyledPre = _styled(\"pre\").withConfig({\n  displayName: \"CodeBlockElement___StyledPre\",\n  componentId: \"sc-edret1-0\"\n})([\"\", \"\"], p => p.$_css);\n\nconst getCodeLineElementStyles = props => createStyles({\n  prefixClassNames: 'CodeLineElement',\n  ...props\n}, {\n  root: [{}]\n});\n\nconst CodeLineElement = props => {\n  const {\n    attributes,\n    children,\n    nodeProps\n  } = props;\n  const rootProps = getRootProps(props);\n  const {\n    root\n  } = getCodeLineElementStyles(props);\n  return /*#__PURE__*/React.createElement(_StyledDiv, _extends({}, attributes, {\n    className: root.className\n  }, rootProps, nodeProps, {\n    $_css: root.css\n  }), children);\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"CodeLineElement___StyledDiv\",\n  componentId: \"sc-11fh9za-0\"\n})([\"\", \"\"], p => p.$_css);\n\nconst CodeBlockToolbarButton = ({\n  options,\n  ...props\n}) => {\n  const editor = usePlateEditorState();\n\n  if (!editor) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(BlockToolbarButton, _extends({\n    type: getPluginType(editor, ELEMENT_CODE_BLOCK),\n    onMouseDown: getPreventDefaultHandler(insertEmptyCodeBlock, editor, {\n      insertNodesOptions: {\n        select: true\n      },\n      ...options\n    })\n  }, props));\n};\n\nexport { CodeBlockElement, CodeBlockSelectElement, CodeBlockToolbarButton, CodeLineElement, getCodeBlockElementStyles, getCodeLineElementStyles };","map":{"version":3,"sources":["../src/CodeBlockElement/CodeBlockElement.styles.ts","../src/CodeBlockElement/CodeBlockSelectElement.tsx","../src/CodeBlockElement/CodeBlockElement.tsx","../src/CodeBlockElement/CodeLineElement.styles.ts","../src/CodeBlockElement/CodeLineElement.tsx","../src/CodeBlockToolbarButton/CodeBlockToolbarButton.tsx"],"names":["getCodeBlockElementStyles","props","createStyles","prefixClassNames","root","css","CodeBlockSelectElement","React","editor","useEditorRef","syntaxPopularFirst","getPluginOptions","float","e","onChange","setValue","key","CodeBlockElement","rootProps","getRootProps","lang","syntax","codeClassName","className","val","path","ReactEditor","setNodes","at","getCodeLineElementStyles","CodeLineElement","nodeProps","CodeBlockToolbarButton","usePlateEditorState","getPluginType","getPreventDefaultHandler","insertNodesOptions","select","options"],"mappings":"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","sourcesContent":["import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const getCodeBlockElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeBlockElement', ...props },\n    {\n      root: [\n        tw`whitespace-pre-wrap py-3 px-4`,\n        css`\n          font-size: 16px;\n          font-family: SFMono-Regular, Consolas, Monaco, 'Liberation Mono',\n            Menlo, Courier, monospace;\n          tab-size: 2;\n          line-height: normal;\n          border-radius: 3px;\n          background-color: rgb(247, 246, 243);\n        `,\n      ],\n    }\n  );\n","import React from 'react';\nimport {\n  CODE_BLOCK_LANGUAGES,\n  CODE_BLOCK_LANGUAGES_POPULAR,\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n} from '@udecode/plate-code-block';\nimport { getPluginOptions, useEditorRef } from '@udecode/plate-core';\nimport { CSSProp } from 'styled-components';\n\nexport const CodeBlockSelectElement = ({\n  lang,\n  onChange,\n  ...props\n}: {\n  lang?: string;\n  onChange: Function;\n  className?: string;\n  css?: CSSProp;\n}) => {\n  const [value, setValue] = React.useState(lang);\n  const editor = useEditorRef();\n  const { syntaxPopularFirst } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n  return (\n    <select\n      value={value}\n      style={{ float: 'right' }}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n      onChange={(e) => {\n        onChange(e.target.value);\n        setValue(e.target.value);\n      }}\n      contentEditable={false}\n      {...props}\n    >\n      <option value=\"\">Plain text</option>\n      {syntaxPopularFirst &&\n        Object.entries(CODE_BLOCK_LANGUAGES_POPULAR).map(([key, val]) => (\n          <option key={key} value={key}>\n            {val}\n          </option>\n        ))}\n      {Object.entries(CODE_BLOCK_LANGUAGES).map(([key, val]) => (\n        <option key={key} value={key}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockNodeData,\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n} from '@udecode/plate-code-block';\nimport { getPluginOptions, setNodes, TElement } from '@udecode/plate-core';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { ReactEditor } from 'slate-react';\nimport { getCodeBlockElementStyles } from './CodeBlockElement.styles';\nimport { CodeBlockSelectElement } from './CodeBlockSelectElement';\n\nexport const CodeBlockElement = (props: StyledElementProps) => {\n  const { attributes, children, nodeProps, element, editor } = props;\n\n  const rootProps = getRootProps(props);\n\n  const { lang } = element;\n  const { root } = getCodeBlockElementStyles(props);\n  const { syntax } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n\n  return (\n    <>\n      <pre\n        {...attributes}\n        css={root.css}\n        className={root.className}\n        {...rootProps}\n        {...nodeProps}\n      >\n        {syntax && (\n          <CodeBlockSelectElement\n            data-testid=\"CodeBlockSelectElement\"\n            lang={lang}\n            onChange={(val: string) => {\n              const path = ReactEditor.findPath(editor, element);\n              setNodes<TElement<CodeBlockNodeData>>(\n                editor,\n                { lang: val },\n                { at: path }\n              );\n            }}\n          />\n        )}\n        <code className={codeClassName}>{children}</code>\n      </pre>\n    </>\n  );\n};\n","import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\n\nexport const getCodeLineElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeLineElement', ...props },\n    {\n      root: [{}],\n    }\n  );\n","import React from 'react';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getCodeLineElementStyles } from './CodeLineElement.styles';\n\nexport const CodeLineElement = (props: StyledElementProps) => {\n  const { attributes, children, nodeProps } = props;\n\n  const rootProps = getRootProps(props);\n  const { root } = getCodeLineElementStyles(props);\n\n  return (\n    <div\n      {...attributes}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockInsertOptions,\n  ELEMENT_CODE_BLOCK,\n  insertEmptyCodeBlock,\n} from '@udecode/plate-code-block';\nimport {\n  getPluginType,\n  getPreventDefaultHandler,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { BlockToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport const CodeBlockToolbarButton = ({\n  options,\n  ...props\n}: ToolbarButtonProps & {\n  options?: CodeBlockInsertOptions;\n}) => {\n  const editor = usePlateEditorState()!;\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BlockToolbarButton\n      type={getPluginType(editor, ELEMENT_CODE_BLOCK)}\n      onMouseDown={getPreventDefaultHandler(insertEmptyCodeBlock, editor, {\n        insertNodesOptions: { select: true },\n        ...options,\n      })}\n      {...props}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
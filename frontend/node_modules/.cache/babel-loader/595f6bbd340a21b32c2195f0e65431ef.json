{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n/**\r\n * Search a node and its children for nodes passing a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param node Node to search. Will be included in the result set if it matches.\r\n * @param recurse Also consider child nodes.\r\n * @param limit Maximum number of nodes to return.\r\n * @returns All nodes passing `test`.\r\n */\n\n\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  if (!Array.isArray(node)) node = [node];\n  return find(test, node, recurse, limit);\n}\n\nexports.filter = filter;\n/**\r\n * Search an array of node and its children for nodes passing a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @param recurse Also consider child nodes.\r\n * @param limit Maximum number of nodes to return.\r\n * @returns All nodes passing `test`.\r\n */\n\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var elem = nodes_1[_i];\n\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) break;\n    }\n\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      var children = find(test, elem.children, recurse, limit);\n      result.push.apply(result, children);\n      limit -= children.length;\n      if (limit <= 0) break;\n    }\n  }\n\n  return result;\n}\n\nexports.find = find;\n/**\r\n * Finds the first element inside of an array that matches a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns The first node in the array that passes `test`.\r\n */\n\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n\nexports.findOneChild = findOneChild;\n/**\r\n * Finds one element in a tree that passes a test.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @param recurse Also consider child nodes.\r\n * @returns The first child node that passes `test`.\r\n */\n\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  var elem = null;\n\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var checked = nodes[i];\n\n    if (!(0, domhandler_1.isTag)(checked)) {\n      continue;\n    } else if (test(checked)) {\n      elem = checked;\n    } else if (recurse && checked.children.length > 0) {\n      elem = findOne(test, checked.children);\n    }\n  }\n\n  return elem;\n}\n\nexports.findOne = findOne;\n/**\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns Whether a tree of nodes contains at least one node passing a test.\r\n */\n\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));\n  });\n}\n\nexports.existsOne = existsOne;\n/**\r\n * Search and array of nodes and its children for nodes passing a test function.\r\n *\r\n * Same as `find`, only with less options, leading to reduced complexity.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns All nodes passing `test`.\r\n */\n\nfunction findAll(test, nodes) {\n  var _a;\n\n  var result = [];\n  var stack = nodes.filter(domhandler_1.isTag);\n  var elem;\n\n  while (elem = stack.shift()) {\n    var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n\n    if (children && children.length > 0) {\n      stack.unshift.apply(stack, children);\n    }\n\n    if (test(elem)) result.push(elem);\n  }\n\n  return result;\n}\n\nexports.findAll = findAll;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/domutils/lib/querying.js"],"names":["Object","defineProperty","exports","value","findAll","existsOne","findOne","findOneChild","find","filter","domhandler_1","require","test","node","recurse","limit","Infinity","Array","isArray","nodes","result","_i","nodes_1","length","elem","push","hasChildren","children","apply","i","checked","isTag","some","_a","stack","shift","unshift"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\r\nvar domhandler_1 = require(\"domhandler\");\r\n/**\r\n * Search a node and its children for nodes passing a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param node Node to search. Will be included in the result set if it matches.\r\n * @param recurse Also consider child nodes.\r\n * @param limit Maximum number of nodes to return.\r\n * @returns All nodes passing `test`.\r\n */\r\nfunction filter(test, node, recurse, limit) {\r\n    if (recurse === void 0) { recurse = true; }\r\n    if (limit === void 0) { limit = Infinity; }\r\n    if (!Array.isArray(node))\r\n        node = [node];\r\n    return find(test, node, recurse, limit);\r\n}\r\nexports.filter = filter;\r\n/**\r\n * Search an array of node and its children for nodes passing a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @param recurse Also consider child nodes.\r\n * @param limit Maximum number of nodes to return.\r\n * @returns All nodes passing `test`.\r\n */\r\nfunction find(test, nodes, recurse, limit) {\r\n    var result = [];\r\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\r\n        var elem = nodes_1[_i];\r\n        if (test(elem)) {\r\n            result.push(elem);\r\n            if (--limit <= 0)\r\n                break;\r\n        }\r\n        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\r\n            var children = find(test, elem.children, recurse, limit);\r\n            result.push.apply(result, children);\r\n            limit -= children.length;\r\n            if (limit <= 0)\r\n                break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.find = find;\r\n/**\r\n * Finds the first element inside of an array that matches a test function.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns The first node in the array that passes `test`.\r\n */\r\nfunction findOneChild(test, nodes) {\r\n    return nodes.find(test);\r\n}\r\nexports.findOneChild = findOneChild;\r\n/**\r\n * Finds one element in a tree that passes a test.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @param recurse Also consider child nodes.\r\n * @returns The first child node that passes `test`.\r\n */\r\nfunction findOne(test, nodes, recurse) {\r\n    if (recurse === void 0) { recurse = true; }\r\n    var elem = null;\r\n    for (var i = 0; i < nodes.length && !elem; i++) {\r\n        var checked = nodes[i];\r\n        if (!(0, domhandler_1.isTag)(checked)) {\r\n            continue;\r\n        }\r\n        else if (test(checked)) {\r\n            elem = checked;\r\n        }\r\n        else if (recurse && checked.children.length > 0) {\r\n            elem = findOne(test, checked.children);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\nexports.findOne = findOne;\r\n/**\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns Whether a tree of nodes contains at least one node passing a test.\r\n */\r\nfunction existsOne(test, nodes) {\r\n    return nodes.some(function (checked) {\r\n        return (0, domhandler_1.isTag)(checked) &&\r\n            (test(checked) ||\r\n                (checked.children.length > 0 &&\r\n                    existsOne(test, checked.children)));\r\n    });\r\n}\r\nexports.existsOne = existsOne;\r\n/**\r\n * Search and array of nodes and its children for nodes passing a test function.\r\n *\r\n * Same as `find`, only with less options, leading to reduced complexity.\r\n *\r\n * @param test Function to test nodes on.\r\n * @param nodes Array of nodes to search.\r\n * @returns All nodes passing `test`.\r\n */\r\nfunction findAll(test, nodes) {\r\n    var _a;\r\n    var result = [];\r\n    var stack = nodes.filter(domhandler_1.isTag);\r\n    var elem;\r\n    while ((elem = stack.shift())) {\r\n        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\r\n        if (children && children.length > 0) {\r\n            stack.unshift.apply(stack, children);\r\n        }\r\n        if (test(elem))\r\n            result.push(elem);\r\n    }\r\n    return result;\r\n}\r\nexports.findAll = findAll;\r\n"]},"metadata":{},"sourceType":"script"}
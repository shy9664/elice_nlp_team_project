{"ast":null,"code":"'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass PositionTrackingPreprocessorMixin extends Mixin {\n  constructor(preprocessor) {\n    super(preprocessor);\n    this.preprocessor = preprocessor;\n    this.isEol = false;\n    this.lineStartPos = 0;\n    this.droppedBufferSize = 0;\n    this.offset = 0;\n    this.col = 0;\n    this.line = 1;\n  }\n\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      advance() {\n        const pos = this.pos + 1;\n        const ch = this.html[pos]; //NOTE: LF should be in the last column of the line\n\n        if (mxn.isEol) {\n          mxn.isEol = false;\n          mxn.line++;\n          mxn.lineStartPos = pos;\n        }\n\n        if (ch === '\\n' || ch === '\\r' && this.html[pos + 1] !== '\\n') {\n          mxn.isEol = true;\n        }\n\n        mxn.col = pos - mxn.lineStartPos + 1;\n        mxn.offset = mxn.droppedBufferSize + pos;\n        return orig.advance.call(this);\n      },\n\n      retreat() {\n        orig.retreat.call(this);\n        mxn.isEol = false;\n        mxn.col = this.pos - mxn.lineStartPos + 1;\n      },\n\n      dropParsedChunk() {\n        const prevPos = this.pos;\n        orig.dropParsedChunk.call(this);\n        const reduction = prevPos - this.pos;\n        mxn.lineStartPos -= reduction;\n        mxn.droppedBufferSize += reduction;\n        mxn.offset = mxn.droppedBufferSize + this.pos;\n      }\n\n    };\n  }\n\n}\n\nmodule.exports = PositionTrackingPreprocessorMixin;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"],"names":["Mixin","require","PositionTrackingPreprocessorMixin","constructor","preprocessor","isEol","lineStartPos","droppedBufferSize","offset","col","line","_getOverriddenMethods","mxn","orig","advance","pos","ch","html","call","retreat","dropParsedChunk","prevPos","reduction","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AAEA,MAAMC,iCAAN,SAAgDF,KAAhD,CAAsD;AAClDG,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,UAAMA,YAAN;AAEA,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AAEA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,IAAL,GAAY,CAAZ;AACH;;AAEDC,EAAAA,qBAAqB,CAACC,GAAD,EAAMC,IAAN,EAAY;AAC7B,WAAO;AACHC,MAAAA,OAAO,GAAG;AACN,cAAMC,GAAG,GAAG,KAAKA,GAAL,GAAW,CAAvB;AACA,cAAMC,EAAE,GAAG,KAAKC,IAAL,CAAUF,GAAV,CAAX,CAFM,CAIN;;AACA,YAAIH,GAAG,CAACP,KAAR,EAAe;AACXO,UAAAA,GAAG,CAACP,KAAJ,GAAY,KAAZ;AACAO,UAAAA,GAAG,CAACF,IAAJ;AACAE,UAAAA,GAAG,CAACN,YAAJ,GAAmBS,GAAnB;AACH;;AAED,YAAIC,EAAE,KAAK,IAAP,IAAgBA,EAAE,KAAK,IAAP,IAAe,KAAKC,IAAL,CAAUF,GAAG,GAAG,CAAhB,MAAuB,IAA1D,EAAiE;AAC7DH,UAAAA,GAAG,CAACP,KAAJ,GAAY,IAAZ;AACH;;AAEDO,QAAAA,GAAG,CAACH,GAAJ,GAAUM,GAAG,GAAGH,GAAG,CAACN,YAAV,GAAyB,CAAnC;AACAM,QAAAA,GAAG,CAACJ,MAAJ,GAAaI,GAAG,CAACL,iBAAJ,GAAwBQ,GAArC;AAEA,eAAOF,IAAI,CAACC,OAAL,CAAaI,IAAb,CAAkB,IAAlB,CAAP;AACH,OApBE;;AAsBHC,MAAAA,OAAO,GAAG;AACNN,QAAAA,IAAI,CAACM,OAAL,CAAaD,IAAb,CAAkB,IAAlB;AAEAN,QAAAA,GAAG,CAACP,KAAJ,GAAY,KAAZ;AACAO,QAAAA,GAAG,CAACH,GAAJ,GAAU,KAAKM,GAAL,GAAWH,GAAG,CAACN,YAAf,GAA8B,CAAxC;AACH,OA3BE;;AA6BHc,MAAAA,eAAe,GAAG;AACd,cAAMC,OAAO,GAAG,KAAKN,GAArB;AAEAF,QAAAA,IAAI,CAACO,eAAL,CAAqBF,IAArB,CAA0B,IAA1B;AAEA,cAAMI,SAAS,GAAGD,OAAO,GAAG,KAAKN,GAAjC;AAEAH,QAAAA,GAAG,CAACN,YAAJ,IAAoBgB,SAApB;AACAV,QAAAA,GAAG,CAACL,iBAAJ,IAAyBe,SAAzB;AACAV,QAAAA,GAAG,CAACJ,MAAJ,GAAaI,GAAG,CAACL,iBAAJ,GAAwB,KAAKQ,GAA1C;AACH;;AAvCE,KAAP;AAyCH;;AAxDiD;;AA2DtDQ,MAAM,CAACC,OAAP,GAAiBtB,iCAAjB","sourcesContent":["'use strict';\r\n\r\nconst Mixin = require('../../utils/mixin');\r\n\r\nclass PositionTrackingPreprocessorMixin extends Mixin {\r\n    constructor(preprocessor) {\r\n        super(preprocessor);\r\n\r\n        this.preprocessor = preprocessor;\r\n        this.isEol = false;\r\n        this.lineStartPos = 0;\r\n        this.droppedBufferSize = 0;\r\n\r\n        this.offset = 0;\r\n        this.col = 0;\r\n        this.line = 1;\r\n    }\r\n\r\n    _getOverriddenMethods(mxn, orig) {\r\n        return {\r\n            advance() {\r\n                const pos = this.pos + 1;\r\n                const ch = this.html[pos];\r\n\r\n                //NOTE: LF should be in the last column of the line\r\n                if (mxn.isEol) {\r\n                    mxn.isEol = false;\r\n                    mxn.line++;\r\n                    mxn.lineStartPos = pos;\r\n                }\r\n\r\n                if (ch === '\\n' || (ch === '\\r' && this.html[pos + 1] !== '\\n')) {\r\n                    mxn.isEol = true;\r\n                }\r\n\r\n                mxn.col = pos - mxn.lineStartPos + 1;\r\n                mxn.offset = mxn.droppedBufferSize + pos;\r\n\r\n                return orig.advance.call(this);\r\n            },\r\n\r\n            retreat() {\r\n                orig.retreat.call(this);\r\n\r\n                mxn.isEol = false;\r\n                mxn.col = this.pos - mxn.lineStartPos + 1;\r\n            },\r\n\r\n            dropParsedChunk() {\r\n                const prevPos = this.pos;\r\n\r\n                orig.dropParsedChunk.call(this);\r\n\r\n                const reduction = prevPos - this.pos;\r\n\r\n                mxn.lineStartPos -= reduction;\r\n                mxn.droppedBufferSize += reduction;\r\n                mxn.offset = mxn.droppedBufferSize + this.pos;\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nmodule.exports = PositionTrackingPreprocessorMixin;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { createStyles, getRootProps } from '@udecode/plate-styled-components';\nimport _styled, { css } from 'styled-components';\nimport React from 'react';\nimport { setNodes, usePlateEditorRef } from '@udecode/plate-core';\nimport { ReactEditor } from 'slate-react';\nimport { insertMediaEmbed } from '@udecode/plate-media-embed';\nimport { ToolbarButton } from '@udecode/plate-toolbar';\n\nconst getMediaEmbedElementStyles = props => createStyles({\n  prefixClassNames: 'MediaEmbedElement',\n  ...props\n}, {\n  root: {\n    \"position\": \"relative\"\n  },\n  iframeWrapper: [{\n    \"position\": \"relative\"\n  }, {\n    \"padding\": \"75% 0 0 0\"\n  }],\n  iframe: [{\n    \"position\": \"absolute\",\n    \"top\": \"0px\",\n    \"left\": \"0px\",\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }],\n  input: [{\n    \"width\": \"100%\"\n  }, css([\"padding:0.5em;font-size:0.85em;border:2px solid #ddd;background:#fafafa;margin-top:5px;\"])]\n});\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst MediaEmbedUrlInput = ({\n  url,\n  onChange,\n  ...props\n}) => {\n  const [value, setValue] = React.useState(url);\n\n  const validateUrl = newUrl => {\n    // if not starting with http, assume pasting of full iframe embed code\n    if (newUrl.substring(0, 4) !== 'http') {\n      var _newUrl$match, _src$match;\n\n      const regexMatchSrc = /src=\".*?\"/;\n      const regexGroupQuotes = /\"([^\"]*)\"/;\n      const src = (_newUrl$match = newUrl.match(regexMatchSrc)) === null || _newUrl$match === void 0 ? void 0 : _newUrl$match[0];\n      const returnString = src === null || src === void 0 ? void 0 : (_src$match = src.match(regexGroupQuotes)) === null || _src$match === void 0 ? void 0 : _src$match[1];\n\n      if (returnString) {\n        newUrl = returnString;\n      }\n    }\n\n    return newUrl;\n  };\n\n  return /*#__PURE__*/React.createElement(\"input\", _extends({\n    value: value,\n    onClick: e => e.stopPropagation(),\n    onChange: e => {\n      const newUrl = e.target.value;\n      validateUrl(newUrl);\n      setValue(newUrl);\n      onChange(newUrl);\n    }\n  }, props));\n};\n\nconst MediaEmbedElement = props => {\n  var _styles$iframeWrapper, _styles$iframeWrapper2, _styles$iframe, _styles$iframe2, _styles$input, _styles$input2;\n\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element,\n    editor\n  } = props;\n  const rootProps = getRootProps(props);\n  const {\n    url\n  } = element;\n  const querySeparator = url.includes('?') ? '' : '?';\n  const styles = getMediaEmbedElementStyles(props);\n  return /*#__PURE__*/React.createElement(_StyledDiv, _extends({}, attributes, {\n    className: styles.root.className\n  }, rootProps, {\n    $_css: styles.root.css\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    contentEditable: false\n  }, /*#__PURE__*/React.createElement(_StyledDiv2, {\n    className: (_styles$iframeWrapper = styles.iframeWrapper) === null || _styles$iframeWrapper === void 0 ? void 0 : _styles$iframeWrapper.className,\n    $_css2: (_styles$iframeWrapper2 = styles.iframeWrapper) === null || _styles$iframeWrapper2 === void 0 ? void 0 : _styles$iframeWrapper2.css\n  }, /*#__PURE__*/React.createElement(_StyledIframe, _extends({\n    className: (_styles$iframe = styles.iframe) === null || _styles$iframe === void 0 ? void 0 : _styles$iframe.className,\n    title: \"embed\",\n    src: `${url}${querySeparator}&title=0&byline=0&portrait=0`,\n    frameBorder: \"0\"\n  }, nodeProps, {\n    $_css3: (_styles$iframe2 = styles.iframe) === null || _styles$iframe2 === void 0 ? void 0 : _styles$iframe2.css\n  }))), /*#__PURE__*/React.createElement(_StyledMediaEmbedUrlInput, {\n    \"data-testid\": \"MediaEmbedUrlInput\",\n    className: (_styles$input = styles.input) === null || _styles$input === void 0 ? void 0 : _styles$input.className,\n    url: url,\n    onChange: val => {\n      const path = ReactEditor.findPath(editor, element);\n      setNodes(editor, {\n        url: val\n      }, {\n        at: path\n      });\n    },\n    $_css4: (_styles$input2 = styles.input) === null || _styles$input2 === void 0 ? void 0 : _styles$input2.css\n  })), children);\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"MediaEmbedElement___StyledDiv\",\n  componentId: \"sc-14crjxm-0\"\n})([\"\", \"\"], p => p.$_css);\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"MediaEmbedElement___StyledDiv2\",\n  componentId: \"sc-14crjxm-1\"\n})([\"\", \"\"], p => p.$_css2);\n\nvar _StyledIframe = _styled(\"iframe\").withConfig({\n  displayName: \"MediaEmbedElement___StyledIframe\",\n  componentId: \"sc-14crjxm-2\"\n})([\"\", \"\"], p => p.$_css3);\n\nvar _StyledMediaEmbedUrlInput = _styled(MediaEmbedUrlInput).withConfig({\n  displayName: \"MediaEmbedElement___StyledMediaEmbedUrlInput\",\n  componentId: \"sc-14crjxm-3\"\n})([\"\", \"\"], p => p.$_css4);\n\nconst MediaEmbedToolbarButton = ({\n  getEmbedUrl,\n  ...props\n}) => {\n  const editor = usePlateEditorRef();\n  return /*#__PURE__*/React.createElement(ToolbarButton, _extends({\n    onMouseDown: async event => {\n      if (!editor) return;\n      event.preventDefault();\n      let url;\n\n      if (getEmbedUrl) {\n        url = await getEmbedUrl();\n      } else {\n        url = window.prompt('Enter the URL of the embed:');\n      }\n\n      if (!url) return;\n      insertMediaEmbed(editor, {\n        url\n      });\n    }\n  }, props));\n};\n\nexport { MediaEmbedElement, MediaEmbedToolbarButton, MediaEmbedUrlInput, getMediaEmbedElementStyles };","map":{"version":3,"sources":["../src/MediaEmbedElement/MediaEmbedElement.styles.ts","../src/MediaEmbedElement/MediaEmbedUrlInput.tsx","../src/MediaEmbedElement/MediaEmbedElement.tsx","../src/MediaEmbedToolbarButton/MediaEmbedToolbarButton.tsx"],"names":["getMediaEmbedElementStyles","props","createStyles","prefixClassNames","root","iframeWrapper","iframe","input","css","MediaEmbedUrlInput","React","validateUrl","newUrl","regexMatchSrc","regexGroupQuotes","src","returnString","e","setValue","onChange","MediaEmbedElement","editor","rootProps","getRootProps","url","querySeparator","styles","className","val","path","ReactEditor","setNodes","at","MediaEmbedToolbarButton","usePlateEditorRef","event","getEmbedUrl","window","insertMediaEmbed"],"mappings":"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","sourcesContent":["import { createStyles } from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\nimport { MediaEmbedElementProps } from './MediaEmbedElement.types';\n\nexport const getMediaEmbedElementStyles = (props: MediaEmbedElementProps) =>\n  createStyles(\n    { prefixClassNames: 'MediaEmbedElement', ...props },\n    {\n      root: tw`relative`,\n      iframeWrapper: [tw`relative`, tw`padding[75% 0 0 0]`],\n      iframe: [tw`absolute top-0 left-0 w-full h-full`],\n      input: [\n        tw`w-full`,\n        css`\n          padding: 0.5em;\n          font-size: 0.85em;\n          border: 2px solid #ddd;\n          background: #fafafa;\n          margin-top: 5px;\n        `,\n      ],\n    }\n  );\n","import React from 'react';\nimport { CSSProp } from 'styled-components';\n\nexport const MediaEmbedUrlInput = ({\n  url,\n  onChange,\n  ...props\n}: {\n  className?: string;\n  css?: CSSProp;\n  url: string;\n  onChange: Function;\n}) => {\n  const [value, setValue] = React.useState(url);\n\n  const validateUrl = (newUrl: string) => {\n    // if not starting with http, assume pasting of full iframe embed code\n    if (newUrl.substring(0, 4) !== 'http') {\n      const regexMatchSrc = /src=\".*?\"/;\n      const regexGroupQuotes = /\"([^\"]*)\"/;\n\n      const src = newUrl.match(regexMatchSrc)?.[0];\n      const returnString = src?.match(regexGroupQuotes)?.[1];\n\n      if (returnString) {\n        newUrl = returnString;\n      }\n    }\n    return newUrl;\n  };\n\n  return (\n    <input\n      value={value}\n      onClick={(e) => e.stopPropagation()}\n      onChange={(e) => {\n        const newUrl = e.target.value;\n        validateUrl(newUrl);\n        setValue(newUrl);\n        onChange(newUrl);\n      }}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport { setNodes, TElement } from '@udecode/plate-core';\nimport { MediaEmbedNodeData } from '@udecode/plate-media-embed';\nimport { getRootProps } from '@udecode/plate-styled-components';\nimport { ReactEditor } from 'slate-react';\nimport { getMediaEmbedElementStyles } from './MediaEmbedElement.styles';\nimport { MediaEmbedElementProps } from './MediaEmbedElement.types';\nimport { MediaEmbedUrlInput } from './MediaEmbedUrlInput';\n\nexport const MediaEmbedElement = (props: MediaEmbedElementProps) => {\n  const { attributes, children, nodeProps, element, editor } = props;\n\n  const rootProps = getRootProps(props);\n\n  const { url } = element;\n  const querySeparator = url.includes('?') ? '' : '?';\n\n  const styles = getMediaEmbedElementStyles(props);\n\n  return (\n    <div\n      {...attributes}\n      css={styles.root.css}\n      className={styles.root.className}\n      {...rootProps}\n    >\n      <div contentEditable={false}>\n        <div\n          css={styles.iframeWrapper?.css}\n          className={styles.iframeWrapper?.className}\n        >\n          <iframe\n            css={styles.iframe?.css}\n            className={styles.iframe?.className}\n            title=\"embed\"\n            src={`${url}${querySeparator}&title=0&byline=0&portrait=0`}\n            frameBorder=\"0\"\n            {...nodeProps}\n          />\n        </div>\n\n        <MediaEmbedUrlInput\n          data-testid=\"MediaEmbedUrlInput\"\n          css={styles.input?.css}\n          className={styles.input?.className}\n          url={url}\n          onChange={(val: string) => {\n            const path = ReactEditor.findPath(editor, element);\n            setNodes<TElement<MediaEmbedNodeData>>(\n              editor,\n              { url: val },\n              { at: path }\n            );\n          }}\n        />\n      </div>\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport { usePlateEditorRef } from '@udecode/plate-core';\nimport { insertMediaEmbed } from '@udecode/plate-media-embed';\nimport { ToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport interface MediaEmbedToolbarButtonProps extends ToolbarButtonProps {\n  /**\n   * Default onMouseDown is getting the embed url by calling this promise before inserting the embed.\n   */\n  getEmbedUrl?: () => Promise<string>;\n}\n\nexport const MediaEmbedToolbarButton = ({\n  getEmbedUrl,\n  ...props\n}: MediaEmbedToolbarButtonProps) => {\n  const editor = usePlateEditorRef()!;\n\n  return (\n    <ToolbarButton\n      onMouseDown={async (event) => {\n        if (!editor) return;\n\n        event.preventDefault();\n\n        let url;\n        if (getEmbedUrl) {\n          url = await getEmbedUrl();\n        } else {\n          url = window.prompt('Enter the URL of the embed:');\n        }\n        if (!url) return;\n\n        insertMediaEmbed(editor, { url });\n      }}\n      {...props}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
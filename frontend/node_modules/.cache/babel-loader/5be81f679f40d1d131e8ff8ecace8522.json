{"ast":null,"code":"import React from 'react';\nimport { usePlateEditorState, getPreventDefaultHandler, setNodes } from '@udecode/plate-core';\nimport { ELEMENT_UL, getListItemEntry, toggleList } from '@udecode/plate-list';\nimport { BlockToolbarButton } from '@udecode/plate-toolbar';\nimport { createStyles, getRootProps } from '@udecode/plate-styled-components';\nimport _styled from 'styled-components';\nimport { useReadOnly, ReactEditor } from 'slate-react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst ListToolbarButton = ({\n  type = ELEMENT_UL,\n  ...props\n}) => {\n  const editor = usePlateEditorState();\n  const res = !!(editor !== null && editor !== void 0 && editor.selection) && getListItemEntry(editor);\n  return /*#__PURE__*/React.createElement(BlockToolbarButton, _extends({\n    active: !!res && res.list[0].type === type,\n    type: type,\n    onMouseDown: editor && getPreventDefaultHandler(toggleList, editor, {\n      type\n    })\n  }, props));\n};\n\nconst getTodoListElementStyles = props => {\n  return createStyles({\n    prefixClassNames: 'TodoListElement',\n    ...props\n  }, {\n    root: {\n      \"display\": \"flex\",\n      \"flexDirection\": \"row\",\n      \"paddingTop\": \"0.25rem\",\n      \"paddingBottom\": \"0.25rem\"\n    },\n    ...(props.checked && {\n      rootChecked: {}\n    }),\n    checkboxWrapper: {\n      \"display\": \"flex\",\n      \"alignItems\": \"center\",\n      \"justifyContent\": \"center\",\n      \"userSelect\": \"none\",\n      \"marginRight\": \"0.375rem\"\n    },\n    checkbox: {\n      \"width\": \"1rem\",\n      \"height\": \"1rem\",\n      \"margin\": \"0px\"\n    },\n    text: [{\n      \"flex\": \"1 1 0%\",\n      \":focus\": {\n        \"outline\": \"2px solid transparent\",\n        \"outlineOffset\": \"2px\"\n      }\n    }, props.checked && {\n      \"textDecoration\": \"line-through\",\n      \"opacity\": \"0.666\"\n    }]\n  });\n};\n\nfunction toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (typeof mix === 'string' || typeof mix === 'number') {\n    str += mix;\n  } else if (typeof mix === 'object') {\n    if (Array.isArray(mix)) {\n      for (k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n          if (y = toVal(mix[k])) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else {\n      for (k in mix) {\n        if (mix[k]) {\n          str && (str += ' ');\n          str += k;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\nfunction clsx() {\n  var i = 0,\n      tmp,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (tmp = arguments[i++]) {\n      if (x = toVal(tmp)) {\n        str && (str += ' ');\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}\n\nconst TodoListElement = props => {\n  var _styles$rootChecked, _styles$checkboxWrapp, _styles$checkboxWrapp2, _styles$checkbox, _styles$checkbox2, _styles$text, _styles$text2;\n\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element,\n    editor\n  } = props;\n  const rootProps = getRootProps(props);\n  const readOnly = useReadOnly();\n  const {\n    checked\n  } = element;\n  const styles = getTodoListElementStyles({ ...props,\n    checked\n  });\n  return /*#__PURE__*/React.createElement(_StyledDiv, _extends({}, attributes, rootProps, {\n    className: clsx(styles.root.className, (_styles$rootChecked = styles.rootChecked) === null || _styles$rootChecked === void 0 ? void 0 : _styles$rootChecked.className, rootProps === null || rootProps === void 0 ? void 0 : rootProps.className),\n    $_css: styles.root.css\n  }), /*#__PURE__*/React.createElement(_StyledDiv2, {\n    contentEditable: false,\n    className: (_styles$checkboxWrapp = styles.checkboxWrapper) === null || _styles$checkboxWrapp === void 0 ? void 0 : _styles$checkboxWrapp.className,\n    $_css2: (_styles$checkboxWrapp2 = styles.checkboxWrapper) === null || _styles$checkboxWrapp2 === void 0 ? void 0 : _styles$checkboxWrapp2.css\n  }, /*#__PURE__*/React.createElement(_StyledInput, _extends({\n    \"data-testid\": \"TodoListElementCheckbox\",\n    className: (_styles$checkbox = styles.checkbox) === null || _styles$checkbox === void 0 ? void 0 : _styles$checkbox.className,\n    type: \"checkbox\",\n    checked: !!checked,\n    onChange: e => {\n      const path = ReactEditor.findPath(editor, element);\n      setNodes(editor, {\n        checked: e.target.checked\n      }, {\n        at: path\n      });\n    }\n  }, nodeProps, {\n    $_css3: (_styles$checkbox2 = styles.checkbox) === null || _styles$checkbox2 === void 0 ? void 0 : _styles$checkbox2.css\n  }))), /*#__PURE__*/React.createElement(_StyledSpan, {\n    className: (_styles$text = styles.text) === null || _styles$text === void 0 ? void 0 : _styles$text.className,\n    contentEditable: !readOnly,\n    suppressContentEditableWarning: true,\n    $_css4: (_styles$text2 = styles.text) === null || _styles$text2 === void 0 ? void 0 : _styles$text2.css\n  }, children));\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"TodoListElement___StyledDiv\",\n  componentId: \"sc-1o2qsxo-0\"\n})([\"\", \"\"], p => p.$_css);\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"TodoListElement___StyledDiv2\",\n  componentId: \"sc-1o2qsxo-1\"\n})([\"\", \"\"], p => p.$_css2);\n\nvar _StyledInput = _styled(\"input\").withConfig({\n  displayName: \"TodoListElement___StyledInput\",\n  componentId: \"sc-1o2qsxo-2\"\n})([\"\", \"\"], p => p.$_css3);\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"TodoListElement___StyledSpan\",\n  componentId: \"sc-1o2qsxo-3\"\n})([\"\", \"\"], p => p.$_css4);\n\nexport { ListToolbarButton, TodoListElement, getTodoListElementStyles };","map":{"version":3,"sources":["../src/ListToolbarButton/ListToolbarButton.tsx","../src/TodoListElement/TodoListElement.styles.ts","../../../../node_modules/clsx/dist/clsx.m.js","../src/TodoListElement/TodoListElement.tsx"],"names":["ListToolbarButton","type","props","editor","usePlateEditorState","res","getListItemEntry","getPreventDefaultHandler","getTodoListElementStyles","createStyles","prefixClassNames","root","rootChecked","checkboxWrapper","checkbox","text","TodoListElement","rootProps","getRootProps","readOnly","useReadOnly","checked","styles","css","clsx","e","path","ReactEditor","setNodes","at"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  getPreventDefaultHandler,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ELEMENT_UL, getListItemEntry, toggleList } from '@udecode/plate-list';\nimport { BlockToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport const ListToolbarButton = ({\n  type = ELEMENT_UL,\n  ...props\n}: ToolbarButtonProps & { type?: string }) => {\n  const editor = usePlateEditorState()!;\n\n  const res = !!editor?.selection && getListItemEntry(editor);\n\n  return (\n    <BlockToolbarButton\n      active={!!res && res.list[0].type === type}\n      type={type}\n      onMouseDown={\n        editor &&\n        getPreventDefaultHandler(toggleList, editor, {\n          type,\n        })\n      }\n      {...props}\n    />\n  );\n};\n","import { createStyles } from '@udecode/plate-styled-components';\nimport tw from 'twin.macro';\nimport { TodoListElementStyleProps } from './TodoListElement.types';\n\nexport const getTodoListElementStyles = (props: TodoListElementStyleProps) => {\n  return createStyles(\n    { prefixClassNames: 'TodoListElement', ...props },\n    {\n      root: tw`flex flex-row py-1`,\n      ...(props.checked && { rootChecked: {} }),\n      checkboxWrapper: tw`flex items-center justify-center select-none mr-1.5`,\n      checkbox: tw`w-4 h-4 m-0`,\n      text: [\n        tw`flex-1 focus:outline-none`,\n        props.checked && tw`line-through opacity[0.666]`,\n      ],\n    }\n  );\n};\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import React from 'react';\nimport { setNodes, TElement } from '@udecode/plate-core';\nimport { TodoListItemNodeData } from '@udecode/plate-list';\nimport { getRootProps } from '@udecode/plate-styled-components';\nimport clsx from 'clsx';\nimport { ReactEditor, useReadOnly } from 'slate-react';\nimport { getTodoListElementStyles } from './TodoListElement.styles';\nimport { TodoListElementProps } from './TodoListElement.types';\n\nexport const TodoListElement = (props: TodoListElementProps) => {\n  const { attributes, children, nodeProps, element, editor } = props;\n\n  const rootProps = getRootProps(props);\n\n  const readOnly = useReadOnly();\n\n  const { checked } = element;\n\n  const styles = getTodoListElementStyles({ ...props, checked });\n\n  return (\n    <div\n      {...attributes}\n      css={styles.root.css}\n      {...rootProps}\n      className={clsx(\n        styles.root.className,\n        styles.rootChecked?.className,\n        rootProps?.className\n      )}\n    >\n      <div\n        contentEditable={false}\n        css={styles.checkboxWrapper?.css}\n        className={styles.checkboxWrapper?.className}\n      >\n        <input\n          data-testid=\"TodoListElementCheckbox\"\n          css={styles.checkbox?.css}\n          className={styles.checkbox?.className}\n          type=\"checkbox\"\n          checked={!!checked}\n          onChange={(e) => {\n            const path = ReactEditor.findPath(editor, element);\n\n            setNodes<TElement<TodoListItemNodeData>>(\n              editor,\n              { checked: e.target.checked },\n              {\n                at: path,\n              }\n            );\n          }}\n          {...nodeProps}\n        />\n      </div>\n      <span\n        css={styles.text?.css}\n        className={styles.text?.className}\n        contentEditable={!readOnly}\n        suppressContentEditableWarning\n      >\n        {children}\n      </span>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
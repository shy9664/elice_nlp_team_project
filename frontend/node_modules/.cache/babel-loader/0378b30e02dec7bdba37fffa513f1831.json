{"ast":null,"code":"import { getLastNode, queryNode, insertNodes, createPluginFactory, getPluginType, ELEMENT_DEFAULT } from '@udecode/plate-core';\nimport { Path } from 'slate';\n/**\r\n * Add a trailing block when the last node type is not `type` and when the editor has .\r\n */\n\nconst withTrailingBlock = (editor, {\n  type,\n  options: {\n    level,\n    ...query\n  }\n}) => {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = ([currentNode, currentPath]) => {\n    if (!currentPath.length) {\n      const lastChild = getLastNode(editor, level);\n      const lastChildNode = lastChild === null || lastChild === void 0 ? void 0 : lastChild[0];\n\n      if (!lastChildNode || lastChildNode.type !== type && queryNode(lastChild, query)) {\n        const at = lastChild ? Path.next(lastChild[1]) : [0];\n        insertNodes(editor, {\n          type: type,\n          children: [{\n            text: ''\n          }]\n        }, {\n          at\n        });\n        return;\n      }\n    }\n\n    return normalizeNode([currentNode, currentPath]);\n  };\n\n  return editor;\n};\n\nconst KEY_TRAILING_BLOCK = 'trailingBlock';\n/**\r\n * @see {@link withTrailingNode}\r\n */\n\nconst createTrailingBlockPlugin = createPluginFactory({\n  key: KEY_TRAILING_BLOCK,\n  withOverrides: withTrailingBlock,\n  options: {\n    level: 0\n  },\n  then: editor => ({\n    type: getPluginType(editor, ELEMENT_DEFAULT)\n  })\n});\nexport { KEY_TRAILING_BLOCK, createTrailingBlockPlugin, withTrailingBlock };","map":{"version":3,"sources":["../src/withTrailingBlock.ts","../src/createTrailingBlockPlugin.ts"],"names":["withTrailingBlock","options","query","normalizeNode","editor","currentPath","lastChild","getLastNode","lastChildNode","queryNode","at","Path","insertNodes","type","children","text","KEY_TRAILING_BLOCK","createTrailingBlockPlugin","createPluginFactory","key","withOverrides","level","then","getPluginType"],"mappings":";;AAUA;AACA;AACA;;MACaA,iBAAwD,GAAG,CAAA,MAAA,EAEtE;AAAA,EAAA,IAAA;AAAQC,EAAAA,OAAO,EAAE;AAAA,IAAA,KAAA;AAAS,OAAGC;AAAZ;AAAjB,CAFsE,KAGnE;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAN,MAAA;;AAEAC,EAAAA,MAAM,CAANA,aAAAA,GAAuB,CAAC,CAAA,WAAA,EAAD,WAAC,CAAD,KAAgC;AACrD,QAAI,CAACC,WAAW,CAAhB,MAAA,EAAyB;AACvB,YAAMC,SAAS,GAAGC,WAAW,CAAA,MAAA,EAA7B,KAA6B,CAA7B;AAEA,YAAMC,aAAa,GAAGF,SAAH,KAAA,IAAGA,IAAAA,SAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,SAAS,CAA/B,CAA+B,CAA/B;;AAEA,UACE,CAAA,aAAA,IACCE,aAAa,CAAbA,IAAAA,KAAAA,IAAAA,IAA+BC,SAAS,CAAA,SAAA,EAF3C,KAE2C,CAF3C,EAGE;AACA,cAAMC,EAAE,GAAGJ,SAAS,GAAGK,IAAI,CAAJA,IAAAA,CAAUL,SAAS,CAAtB,CAAsB,CAAnBK,CAAH,GAA6B,CAAjD,CAAiD,CAAjD;AAEAC,QAAAA,WAAW,CAAA,MAAA,EAET;AACEC,UAAAA,IAAI,EADN,IAAA;AAEEC,UAAAA,QAAQ,EAAE,CAAC;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAD;AAFZ,SAFS,EAMT;AAAEL,UAAAA;AAAF,SANS,CAAXE;AAQA;AACD;AACF;;AAED,WAAOT,aAAa,CAAC,CAAA,WAAA,EAArB,WAAqB,CAAD,CAApB;AAxBFC,GAAAA;;AA2BA,SAAA,MAAA;AACD,C;;MC3BYY,kBAAkB,GAAG,e;AAElC;AACA;AACA;;MACaC,yBAAyB,GAAGC,mBAAmB,CAC1D;AACEC,EAAAA,GAAG,EADL,kBAAA;AAEEC,EAAAA,aAAa,EAFf,iBAAA;AAGEnB,EAAAA,OAAO,EAAE;AACPoB,IAAAA,KAAK,EAAE;AADA,GAHX;AAMEC,EAAAA,IAAI,EAAGlB,MAAD,KAAa;AACjBS,IAAAA,IAAI,EAAEU,aAAa,CAAA,MAAA,EAAA,eAAA;AADF,GAAb;AANR,CAD0D,C","sourcesContent":["import {\n  getLastNode,\n  insertNodes,\n  queryNode,\n  TElement,\n  WithOverride,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { TrailingBlockPlugin } from './createTrailingBlockPlugin';\n\n/**\n * Add a trailing block when the last node type is not `type` and when the editor has .\n */\nexport const withTrailingBlock: WithOverride<{}, TrailingBlockPlugin> = (\n  editor,\n  { type, options: { level, ...query } }\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([currentNode, currentPath]) => {\n    if (!currentPath.length) {\n      const lastChild = getLastNode(editor, level!);\n\n      const lastChildNode = lastChild?.[0];\n\n      if (\n        !lastChildNode ||\n        (lastChildNode.type !== type && queryNode(lastChild, query))\n      ) {\n        const at = lastChild ? Path.next(lastChild[1]) : [0];\n\n        insertNodes<TElement>(\n          editor,\n          {\n            type: type!,\n            children: [{ text: '' }],\n          },\n          { at }\n        );\n        return;\n      }\n    }\n\n    return normalizeNode([currentNode, currentPath]);\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  QueryNodeOptions,\n} from '@udecode/plate-core';\nimport { withTrailingBlock } from './withTrailingBlock';\n\nexport interface TrailingBlockPlugin extends QueryNodeOptions {\n  /**\n   * Level where the trailing node should be, the first level being 0.\n   */\n  level?: number;\n\n  /**\n   * Type of the trailing block\n   */\n  type?: string;\n}\n\nexport const KEY_TRAILING_BLOCK = 'trailingBlock';\n\n/**\n * @see {@link withTrailingNode}\n */\nexport const createTrailingBlockPlugin = createPluginFactory<TrailingBlockPlugin>(\n  {\n    key: KEY_TRAILING_BLOCK,\n    withOverrides: withTrailingBlock,\n    options: {\n      level: 0,\n    },\n    then: (editor) => ({\n      type: getPluginType(editor, ELEMENT_DEFAULT),\n    }),\n  }\n);\n"]},"metadata":{},"sourceType":"module"}
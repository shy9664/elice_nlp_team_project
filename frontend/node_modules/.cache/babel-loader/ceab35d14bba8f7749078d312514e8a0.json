{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.update = void 0;\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\n\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\n\nvar domhandler_1 = require(\"domhandler\");\n/*\r\n * Parser\r\n */\n\n\nfunction parse(content, options, isDocument) {\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    return options.xmlMode || options._useHtmlParser2 ? htmlparser2_adapter_1.parse(content, options) : parse5_adapter_1.parse(content, options, isDocument);\n  }\n\n  var doc = content;\n\n  if (!Array.isArray(doc) && domhandler_1.isDocument(doc)) {\n    // If `doc` is already a root, just return it\n    return doc;\n  } // Add conent to new root element\n\n\n  var root = new domhandler_1.Document([]); // Update the DOM using the root\n\n  update(doc, root);\n  return root;\n}\n\nexports.default = parse;\n/**\r\n * Update the dom structure, for one changed layer.\r\n *\r\n * @param newChilds - The new children.\r\n * @param parent - The new parent.\r\n * @returns The parent node.\r\n */\n\nfunction update(newChilds, parent) {\n  // Normalize\n  var arr = Array.isArray(newChilds) ? newChilds : [newChilds]; // Update parent\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  } // Update neighbors\n\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.\n\n    if (node.parent && node.parent.children !== arr) {\n      htmlparser2_1.DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n}\n\nexports.update = update;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/cheerio/lib/parse.js"],"names":["Object","defineProperty","exports","value","update","htmlparser2_1","require","htmlparser2_adapter_1","parse5_adapter_1","domhandler_1","parse","content","options","isDocument","Buffer","isBuffer","toString","xmlMode","_useHtmlParser2","doc","Array","isArray","root","Document","default","newChilds","parent","arr","children","i","length","node","DomUtils","removeElement","prev","next"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.update = void 0;\r\nvar htmlparser2_1 = require(\"htmlparser2\");\r\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\r\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\r\nvar domhandler_1 = require(\"domhandler\");\r\n/*\r\n * Parser\r\n */\r\nfunction parse(content, options, isDocument) {\r\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\r\n        content = content.toString();\r\n    }\r\n    if (typeof content === 'string') {\r\n        return options.xmlMode || options._useHtmlParser2\r\n            ? htmlparser2_adapter_1.parse(content, options)\r\n            : parse5_adapter_1.parse(content, options, isDocument);\r\n    }\r\n    var doc = content;\r\n    if (!Array.isArray(doc) && domhandler_1.isDocument(doc)) {\r\n        // If `doc` is already a root, just return it\r\n        return doc;\r\n    }\r\n    // Add conent to new root element\r\n    var root = new domhandler_1.Document([]);\r\n    // Update the DOM using the root\r\n    update(doc, root);\r\n    return root;\r\n}\r\nexports.default = parse;\r\n/**\r\n * Update the dom structure, for one changed layer.\r\n *\r\n * @param newChilds - The new children.\r\n * @param parent - The new parent.\r\n * @returns The parent node.\r\n */\r\nfunction update(newChilds, parent) {\r\n    // Normalize\r\n    var arr = Array.isArray(newChilds) ? newChilds : [newChilds];\r\n    // Update parent\r\n    if (parent) {\r\n        parent.children = arr;\r\n    }\r\n    else {\r\n        parent = null;\r\n    }\r\n    // Update neighbors\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var node = arr[i];\r\n        // Cleanly remove existing nodes from their previous structures.\r\n        if (node.parent && node.parent.children !== arr) {\r\n            htmlparser2_1.DomUtils.removeElement(node);\r\n        }\r\n        if (parent) {\r\n            node.prev = arr[i - 1] || null;\r\n            node.next = arr[i + 1] || null;\r\n        }\r\n        else {\r\n            node.prev = node.next = null;\r\n        }\r\n        node.parent = parent;\r\n    }\r\n    return parent;\r\n}\r\nexports.update = update;\r\n"]},"metadata":{},"sourceType":"script"}
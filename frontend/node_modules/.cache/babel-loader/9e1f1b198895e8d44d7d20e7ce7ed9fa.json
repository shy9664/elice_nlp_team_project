{"ast":null,"code":"var DEBUG = false; // `true` to print debugging info.\n\nvar TIMER = false; // `true` to time calls to `stringify()` and print the results.\n\nvar debug = require('./debug')('stringify');\n\nvar _comments; // Whether comments are allowed in the stringified CSS.\n\n\nvar _compress; // Whether the stringified CSS should be compressed.\n\n\nvar _indentation; // Indentation option value.\n\n\nvar _level; // Current indentation level.\n\n\nvar _n; // Compression-aware newline character.\n\n\nvar _s; // Compression-aware space character.\n\n\nexports = module.exports = stringify;\n/**\r\n * Convert a `stringify`-able AST into a CSS string.\r\n *\r\n * @param {Object} `stringify`-able AST\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.comments=false] allow comments in the CSS\r\n * @param {Boolean} [options.compress=false] compress whitespace\r\n * @param {String} [options.indentation=''] indentation sequence\r\n * @returns {String} CSS\r\n */\n\nfunction stringify(ast, options) {\n  var start; // Debug timer start.\n\n  options || (options = {});\n  _indentation = options.indentation || '';\n  _compress = !!options.compress;\n  _comments = !!options.comments;\n  _level = 1;\n\n  if (_compress) {\n    _n = _s = '';\n  } else {\n    _n = '\\n';\n    _s = ' ';\n  }\n\n  TIMER && (start = Date.now());\n  var css = reduce(ast.stylesheet.rules, stringifyNode).join('\\n').trim();\n  TIMER && debug('ran in', Date.now() - start + 'ms');\n  return css;\n} // -- Functions --------------------------------------------------------------\n\n/**\r\n * Modify the indentation level, or return a compression-aware sequence of\r\n * spaces equal to the current indentation level.\r\n *\r\n * @param {Number} [level=undefined] indentation level modifier\r\n * @returns {String} sequence of spaces\r\n */\n\n\nfunction indent(level) {\n  if (level) {\n    _level += level;\n    return;\n  }\n\n  if (_compress) {\n    return '';\n  }\n\n  return Array(_level).join(_indentation || '');\n} // -- Stringify Functions ------------------------------------------------------\n\n/**\r\n * Stringify an @-rule AST node.\r\n *\r\n * Use `stringifyAtGroup()` when dealing with @-groups that may contain blocks\r\n * such as @media.\r\n *\r\n * @param {String} type @-rule type. E.g., import, charset\r\n * @returns {String} Stringified @-rule\r\n */\n\n\nfunction stringifyAtRule(node) {\n  return '@' + node.type + ' ' + node.value + ';' + _n;\n}\n/**\r\n * Stringify an @-group AST node.\r\n *\r\n * Use `stringifyAtRule()` when dealing with @-rules that may not contain blocks\r\n * such as @import.\r\n *\r\n * @param {Object} node @-group AST node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyAtGroup(node) {\n  var label = '';\n  var prefix = node.prefix || '';\n\n  if (node.name) {\n    label = ' ' + node.name;\n  } // FIXME: @-rule conditional logic is leaking everywhere.\n\n\n  var chomp = node.type !== 'page';\n  return '@' + prefix + node.type + label + _s + stringifyBlock(node, chomp) + _n;\n}\n/**\r\n * Stringify a comment AST node.\r\n *\r\n * @param {Object} node comment AST node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyComment(node) {\n  if (!_comments) {\n    return '';\n  }\n\n  return '/*' + (node.text || '') + '*/' + _n;\n}\n/**\r\n * Stringify a rule AST node.\r\n *\r\n * @param {Object} node rule AST node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyRule(node) {\n  var label;\n\n  if (node.selectors) {\n    label = node.selectors.join(',' + _n);\n  } else {\n    label = '@' + node.type;\n    label += node.name ? ' ' + node.name : '';\n  }\n\n  return indent() + label + _s + stringifyBlock(node) + _n;\n} // -- Stringify Helper Functions -----------------------------------------------\n\n/**\r\n * Reduce an array by applying a function to each item and retaining the truthy\r\n * results.\r\n *\r\n * When `item.type` is `'comment'` `stringifyComment` will be applied instead.\r\n *\r\n * @param {Array} items array to reduce\r\n * @param {Function} fn function to call for each item in the array\r\n *   @returns {Mixed} Truthy values will be retained, falsy values omitted\r\n * @returns {Array} retained results\r\n */\n\n\nfunction reduce(items, fn) {\n  return items.reduce(function (results, item) {\n    var result = item.type === 'comment' ? stringifyComment(item) : fn(item);\n    result && results.push(result);\n    return results;\n  }, []);\n}\n/**\r\n * Stringify an AST node with the assumption that it represents a block of\r\n * declarations or other @-group contents.\r\n *\r\n * @param {Object} node AST node\r\n * @returns {String}\r\n */\n// FIXME: chomp should not be a magic boolean parameter\n\n\nfunction stringifyBlock(node, chomp) {\n  var children = node.declarations;\n  var fn = stringifyDeclaration;\n\n  if (node.rules) {\n    children = node.rules;\n    fn = stringifyRule;\n  }\n\n  children = stringifyChildren(children, fn);\n  children && (children = _n + children + (chomp ? '' : _n));\n  return '{' + children + indent() + '}';\n}\n/**\r\n * Stringify an array of child AST nodes by calling the given stringify function\r\n * once for each child, and concatenating the results.\r\n *\r\n * @param {Array} children `node.rules` or `node.declarations`\r\n * @param {Function} fn stringify function\r\n * @returns {String}\r\n */\n\n\nfunction stringifyChildren(children, fn) {\n  if (!children) {\n    return '';\n  }\n\n  indent(1);\n  var results = reduce(children, fn);\n  indent(-1);\n\n  if (!results.length) {\n    return '';\n  }\n\n  return results.join(_n);\n}\n/**\r\n * Stringify a declaration AST node.\r\n *\r\n * @param {Object} node declaration AST node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyDeclaration(node) {\n  if (node.type === 'property') {\n    return stringifyProperty(node);\n  }\n\n  DEBUG && debug('stringifyDeclaration: unexpected node:', JSON.stringify(node));\n}\n/**\r\n * Stringify an AST node.\r\n *\r\n * @param {Object} node AST node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyNode(node) {\n  switch (node.type) {\n    // Cases are listed in roughly descending order of probability.\n    case 'rule':\n      return stringifyRule(node);\n\n    case 'media':\n    case 'keyframes':\n      return stringifyAtGroup(node);\n\n    case 'comment':\n      return stringifyComment(node);\n\n    case 'import':\n    case 'charset':\n    case 'namespace':\n      return stringifyAtRule(node);\n\n    case 'font-face':\n    case 'supports':\n    case 'viewport':\n    case 'document':\n    case 'page':\n      return stringifyAtGroup(node);\n  }\n\n  DEBUG && debug('stringifyNode: unexpected node: ' + JSON.stringify(node));\n}\n/**\r\n * Stringify an AST property node.\r\n *\r\n * @param {Object} node AST property node\r\n * @returns {String}\r\n */\n\n\nfunction stringifyProperty(node) {\n  var name = node.name ? node.name + ':' + _s : '';\n  return indent() + name + node.value + ';';\n}","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/mensch/lib/stringify.js"],"names":["DEBUG","TIMER","debug","require","_comments","_compress","_indentation","_level","_n","_s","exports","module","stringify","ast","options","start","indentation","compress","comments","Date","now","css","reduce","stylesheet","rules","stringifyNode","join","trim","indent","level","Array","stringifyAtRule","node","type","value","stringifyAtGroup","label","prefix","name","chomp","stringifyBlock","stringifyComment","text","stringifyRule","selectors","items","fn","results","item","result","push","children","declarations","stringifyDeclaration","stringifyChildren","length","stringifyProperty","JSON"],"mappings":"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","sourcesContent":["var DEBUG = false; // `true` to print debugging info.\r\nvar TIMER = false; // `true` to time calls to `stringify()` and print the results.\r\n\r\nvar debug = require('./debug')('stringify');\r\n\r\nvar _comments;      // Whether comments are allowed in the stringified CSS.\r\nvar _compress;      // Whether the stringified CSS should be compressed.\r\nvar _indentation;   // Indentation option value.\r\nvar _level;         // Current indentation level.\r\nvar _n;             // Compression-aware newline character.\r\nvar _s;             // Compression-aware space character.\r\n\r\nexports = module.exports = stringify;\r\n\r\n/**\r\n * Convert a `stringify`-able AST into a CSS string.\r\n *\r\n * @param {Object} `stringify`-able AST\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.comments=false] allow comments in the CSS\r\n * @param {Boolean} [options.compress=false] compress whitespace\r\n * @param {String} [options.indentation=''] indentation sequence\r\n * @returns {String} CSS\r\n */\r\nfunction stringify(ast, options) {\r\n  var start; // Debug timer start.\r\n\r\n  options || (options = {});\r\n  _indentation = options.indentation || '';\r\n  _compress = !!options.compress;\r\n  _comments = !!options.comments;\r\n  _level = 1;\r\n\r\n  if (_compress) {\r\n    _n = _s = '';\r\n  } else {\r\n    _n = '\\n';\r\n    _s = ' ';\r\n  }\r\n\r\n  TIMER && (start = Date.now());\r\n\r\n  var css = reduce(ast.stylesheet.rules, stringifyNode).join('\\n').trim();\r\n\r\n  TIMER && debug('ran in', (Date.now() - start) + 'ms');\r\n\r\n  return css;\r\n}\r\n\r\n// -- Functions --------------------------------------------------------------\r\n\r\n/**\r\n * Modify the indentation level, or return a compression-aware sequence of\r\n * spaces equal to the current indentation level.\r\n *\r\n * @param {Number} [level=undefined] indentation level modifier\r\n * @returns {String} sequence of spaces\r\n */\r\nfunction indent(level) {\r\n  if (level) {\r\n    _level += level;\r\n    return;\r\n  }\r\n\r\n  if (_compress) { return ''; }\r\n\r\n  return Array(_level).join(_indentation || '');\r\n}\r\n\r\n// -- Stringify Functions ------------------------------------------------------\r\n\r\n/**\r\n * Stringify an @-rule AST node.\r\n *\r\n * Use `stringifyAtGroup()` when dealing with @-groups that may contain blocks\r\n * such as @media.\r\n *\r\n * @param {String} type @-rule type. E.g., import, charset\r\n * @returns {String} Stringified @-rule\r\n */\r\nfunction stringifyAtRule(node) {\r\n  return '@' + node.type + ' ' + node.value + ';' + _n;\r\n}\r\n\r\n/**\r\n * Stringify an @-group AST node.\r\n *\r\n * Use `stringifyAtRule()` when dealing with @-rules that may not contain blocks\r\n * such as @import.\r\n *\r\n * @param {Object} node @-group AST node\r\n * @returns {String}\r\n */\r\nfunction stringifyAtGroup(node) {\r\n  var label = '';\r\n  var prefix = node.prefix || '';\r\n\r\n  if (node.name) {\r\n    label = ' ' + node.name;\r\n  }\r\n\r\n  // FIXME: @-rule conditional logic is leaking everywhere.\r\n  var chomp = node.type !== 'page';\r\n\r\n  return '@' + prefix + node.type + label + _s + stringifyBlock(node, chomp) + _n;\r\n}\r\n\r\n/**\r\n * Stringify a comment AST node.\r\n *\r\n * @param {Object} node comment AST node\r\n * @returns {String}\r\n */\r\nfunction stringifyComment(node) {\r\n  if (!_comments) { return ''; }\r\n\r\n  return '/*' + (node.text || '') + '*/' + _n;\r\n}\r\n\r\n/**\r\n * Stringify a rule AST node.\r\n *\r\n * @param {Object} node rule AST node\r\n * @returns {String}\r\n */\r\nfunction stringifyRule(node) {\r\n  var label;\r\n\r\n  if (node.selectors) {\r\n    label = node.selectors.join(',' + _n);\r\n  } else {\r\n    label = '@' + node.type;\r\n    label += node.name ? ' ' + node.name : '';\r\n  }\r\n\r\n  return indent() + label + _s + stringifyBlock(node) + _n;\r\n}\r\n\r\n\r\n// -- Stringify Helper Functions -----------------------------------------------\r\n\r\n/**\r\n * Reduce an array by applying a function to each item and retaining the truthy\r\n * results.\r\n *\r\n * When `item.type` is `'comment'` `stringifyComment` will be applied instead.\r\n *\r\n * @param {Array} items array to reduce\r\n * @param {Function} fn function to call for each item in the array\r\n *   @returns {Mixed} Truthy values will be retained, falsy values omitted\r\n * @returns {Array} retained results\r\n */\r\nfunction reduce(items, fn) {\r\n  return items.reduce(function (results, item) {\r\n    var result = (item.type === 'comment') ? stringifyComment(item) : fn(item);\r\n    result && results.push(result);\r\n    return results;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * Stringify an AST node with the assumption that it represents a block of\r\n * declarations or other @-group contents.\r\n *\r\n * @param {Object} node AST node\r\n * @returns {String}\r\n */\r\n// FIXME: chomp should not be a magic boolean parameter\r\nfunction stringifyBlock(node, chomp) {\r\n  var children = node.declarations;\r\n  var fn = stringifyDeclaration;\r\n\r\n  if (node.rules) {\r\n    children = node.rules;\r\n    fn = stringifyRule;\r\n  }\r\n\r\n  children = stringifyChildren(children, fn);\r\n  children && (children = _n + children + (chomp ? '' : _n));\r\n\r\n  return '{' + children + indent() + '}';\r\n}\r\n\r\n/**\r\n * Stringify an array of child AST nodes by calling the given stringify function\r\n * once for each child, and concatenating the results.\r\n *\r\n * @param {Array} children `node.rules` or `node.declarations`\r\n * @param {Function} fn stringify function\r\n * @returns {String}\r\n */\r\nfunction stringifyChildren(children, fn) {\r\n  if (!children) { return ''; }\r\n\r\n  indent(1);\r\n  var results = reduce(children, fn);\r\n  indent(-1);\r\n\r\n  if (!results.length) { return ''; }\r\n\r\n  return results.join(_n);\r\n}\r\n\r\n/**\r\n * Stringify a declaration AST node.\r\n *\r\n * @param {Object} node declaration AST node\r\n * @returns {String}\r\n */\r\nfunction stringifyDeclaration(node) {\r\n  if (node.type === 'property') {\r\n    return stringifyProperty(node);\r\n  }\r\n\r\n  DEBUG && debug('stringifyDeclaration: unexpected node:', JSON.stringify(node));\r\n}\r\n\r\n/**\r\n * Stringify an AST node.\r\n *\r\n * @param {Object} node AST node\r\n * @returns {String}\r\n */\r\nfunction stringifyNode(node) {\r\n  switch (node.type) {\r\n  // Cases are listed in roughly descending order of probability.\r\n  case 'rule': return stringifyRule(node);\r\n\r\n  case 'media'    :\r\n  case 'keyframes': return stringifyAtGroup(node);\r\n\r\n  case 'comment': return stringifyComment(node);\r\n\r\n  case 'import'   :\r\n  case 'charset'  :\r\n  case 'namespace': return stringifyAtRule(node);\r\n\r\n  case 'font-face':\r\n  case 'supports' :\r\n  case 'viewport' :\r\n  case 'document' :\r\n  case 'page'     : return stringifyAtGroup(node);\r\n  }\r\n\r\n  DEBUG && debug('stringifyNode: unexpected node: ' + JSON.stringify(node));\r\n}\r\n\r\n/**\r\n * Stringify an AST property node.\r\n *\r\n * @param {Object} node AST property node\r\n * @returns {String}\r\n */\r\nfunction stringifyProperty(node) {\r\n  var name = node.name ? node.name + ':' + _s : '';\r\n\r\n  return indent() + name + node.value + ';';\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
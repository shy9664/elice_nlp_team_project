{"ast":null,"code":"import { isSelectionAtBlockStart, isSelectionAtBlockEnd, isExpanded, getBlockAbove, getPluginType, ELEMENT_DEFAULT, queryNode, insertNodes, createPluginFactory } from '@udecode/plate-core';\nimport { Editor, Path, Transforms } from 'slate';\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar lib = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  /**\r\n   * Constants.\r\n   */\n\n  var IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n  var MODIFIERS = {\n    alt: 'altKey',\n    control: 'ctrlKey',\n    meta: 'metaKey',\n    shift: 'shiftKey'\n  };\n  var ALIASES = {\n    add: '+',\n    break: 'pause',\n    cmd: 'meta',\n    command: 'meta',\n    ctl: 'control',\n    ctrl: 'control',\n    del: 'delete',\n    down: 'arrowdown',\n    esc: 'escape',\n    ins: 'insert',\n    left: 'arrowleft',\n    mod: IS_MAC ? 'meta' : 'control',\n    opt: 'alt',\n    option: 'alt',\n    return: 'enter',\n    right: 'arrowright',\n    space: ' ',\n    spacebar: ' ',\n    up: 'arrowup',\n    win: 'meta',\n    windows: 'meta'\n  };\n  var CODES = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    ' ': 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    ';': 186,\n    '=': 187,\n    ',': 188,\n    '-': 189,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '[': 219,\n    '\\\\': 220,\n    ']': 221,\n    '\\'': 222\n  };\n\n  for (var f = 1; f < 20; f++) {\n    CODES['f' + f] = 111 + f;\n  }\n  /**\r\n   * Is hotkey?\r\n   */\n\n\n  function isHotkey(hotkey, options, event) {\n    if (options && !('byKey' in options)) {\n      event = options;\n      options = null;\n    }\n\n    if (!Array.isArray(hotkey)) {\n      hotkey = [hotkey];\n    }\n\n    var array = hotkey.map(function (string) {\n      return parseHotkey(string, options);\n    });\n\n    var check = function check(e) {\n      return array.some(function (object) {\n        return compareHotkey(object, e);\n      });\n    };\n\n    var ret = event == null ? check : check(event);\n    return ret;\n  }\n\n  function isCodeHotkey(hotkey, event) {\n    return isHotkey(hotkey, event);\n  }\n\n  function isKeyHotkey(hotkey, event) {\n    return isHotkey(hotkey, {\n      byKey: true\n    }, event);\n  }\n  /**\r\n   * Parse.\r\n   */\n\n\n  function parseHotkey(hotkey, options) {\n    var byKey = options && options.byKey;\n    var ret = {}; // Special case to handle the `+` key since we use it as a separator.\n\n    hotkey = hotkey.replace('++', '+add');\n    var values = hotkey.split('+');\n    var length = values.length; // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n    for (var k in MODIFIERS) {\n      ret[MODIFIERS[k]] = false;\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n        var optional = value.endsWith('?') && value.length > 1;\n\n        if (optional) {\n          value = value.slice(0, -1);\n        }\n\n        var name = toKeyName(value);\n        var modifier = MODIFIERS[name];\n\n        if (length === 1 || !modifier) {\n          if (byKey) {\n            ret.key = name;\n          } else {\n            ret.which = toKeyCode(value);\n          }\n        }\n\n        if (modifier) {\n          ret[modifier] = optional ? null : true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return ret;\n  }\n  /**\r\n   * Compare.\r\n   */\n\n\n  function compareHotkey(object, event) {\n    for (var key in object) {\n      var expected = object[key];\n      var actual = void 0;\n\n      if (expected == null) {\n        continue;\n      }\n\n      if (key === 'key' && event.key != null) {\n        actual = event.key.toLowerCase();\n      } else if (key === 'which') {\n        actual = expected === 91 && event.which === 93 ? 91 : event.which;\n      } else {\n        actual = event[key];\n      }\n\n      if (actual == null && expected === false) {\n        continue;\n      }\n\n      if (actual !== expected) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Utils.\r\n   */\n\n\n  function toKeyCode(name) {\n    name = toKeyName(name);\n    var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n    return code;\n  }\n\n  function toKeyName(name) {\n    name = name.toLowerCase();\n    name = ALIASES[name] || name;\n    return name;\n  }\n  /**\r\n   * Export.\r\n   */\n\n\n  exports.default = isHotkey;\n  exports.isHotkey = isHotkey;\n  exports.isCodeHotkey = isCodeHotkey;\n  exports.isKeyHotkey = isKeyHotkey;\n  exports.parseHotkey = parseHotkey;\n  exports.compareHotkey = compareHotkey;\n  exports.toKeyCode = toKeyCode;\n  exports.toKeyName = toKeyName;\n});\nvar isHotkey = unwrapExports(lib);\nlib.isHotkey;\nlib.isCodeHotkey;\nlib.isKeyHotkey;\nlib.parseHotkey;\nlib.compareHotkey;\nlib.toKeyCode;\nlib.toKeyName;\n/**\r\n * Check if the selection is at the edge of its parent block.\r\n * If it is and if the selection is expanded, delete its content.\r\n */\n\nconst exitBreakAtEdges = (editor, {\n  start,\n  end\n}) => {\n  let queryEdge = false;\n  let isEdge = false;\n  let isStart = false;\n\n  if (start || end) {\n    queryEdge = true;\n\n    if (start && isSelectionAtBlockStart(editor)) {\n      isEdge = true;\n      isStart = true;\n    }\n\n    if (end && isSelectionAtBlockEnd(editor)) {\n      isEdge = true;\n    }\n\n    if (isEdge && isExpanded(editor.selection)) {\n      editor.deleteFragment();\n    }\n  }\n\n  return {\n    queryEdge,\n    isEdge,\n    isStart\n  };\n};\n\nconst onKeyDownExitBreak = (editor, {\n  options: {\n    rules = []\n  }\n}) => event => {\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n  rules.forEach(({\n    hotkey,\n    query = {},\n    level = 0,\n    before,\n    defaultType = getPluginType(editor, ELEMENT_DEFAULT)\n  }) => {\n    if (isHotkey(hotkey, event) && queryNode(entry, query)) {\n      if (!editor.selection) return;\n      const {\n        queryEdge,\n        isEdge,\n        isStart\n      } = exitBreakAtEdges(editor, query);\n      if (isStart) before = true;\n      if (queryEdge && !isEdge) return;\n      event.preventDefault();\n      const selectionPath = Editor.path(editor, editor.selection);\n      let insertPath;\n\n      if (before) {\n        insertPath = selectionPath.slice(0, level + 1);\n      } else {\n        insertPath = Path.next(selectionPath.slice(0, level + 1));\n      }\n\n      insertNodes(editor, {\n        type: defaultType,\n        children: [{\n          text: ''\n        }]\n      }, {\n        at: insertPath,\n        select: !isStart\n      });\n    }\n  });\n};\n\nconst KEY_EXIT_BREAK = 'exitBreak';\n/**\r\n * Insert soft break following configurable rules.\r\n * Each rule specifies a hotkey and query options.\r\n */\n\nconst createExitBreakPlugin = createPluginFactory({\n  key: KEY_EXIT_BREAK,\n  handlers: {\n    onKeyDown: onKeyDownExitBreak\n  },\n  options: {\n    rules: [{\n      hotkey: 'mod+enter'\n    }, {\n      hotkey: 'mod+shift+enter',\n      before: true\n    }]\n  }\n});\n\nconst onKeyDownSingleLine = () => event => {\n  if (event.key === 'Enter') {\n    event.preventDefault();\n  }\n};\n\nconst withSingleLine = editor => {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.insertBreak = () => null;\n\n  editor.normalizeNode = entry => {\n    if (editor.children.length > 1) {\n      Transforms.removeNodes(editor, {\n        at: [],\n        mode: 'highest',\n        match: (node, path) => path[0] > 0\n      });\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nconst KEY_SINGLE_LINE = 'singleLine';\n/**\r\n * Forces editor to only have one line.\r\n */\n\nconst createSingleLinePlugin = createPluginFactory({\n  key: KEY_SINGLE_LINE,\n  handlers: {\n    onKeyDown: onKeyDownSingleLine\n  },\n  withOverrides: withSingleLine\n});\n\nconst onKeyDownSoftBreak = (editor, {\n  options: {\n    rules = []\n  }\n}) => event => {\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n  rules.forEach(({\n    hotkey,\n    query\n  }) => {\n    if (isHotkey(hotkey, event) && queryNode(entry, query)) {\n      event.preventDefault();\n      editor.insertText('\\n');\n    }\n  });\n};\n\nconst KEY_SOFT_BREAK = 'softBreak';\n/**\r\n * Insert soft break following configurable rules.\r\n * Each rule specifies a hotkey and query options.\r\n */\n\nconst createSoftBreakPlugin = createPluginFactory({\n  key: KEY_SOFT_BREAK,\n  handlers: {\n    onKeyDown: onKeyDownSoftBreak\n  },\n  options: {\n    rules: [{\n      hotkey: 'shift+enter'\n    }]\n  }\n});\nexport { KEY_EXIT_BREAK, KEY_SINGLE_LINE, KEY_SOFT_BREAK, createExitBreakPlugin, createSingleLinePlugin, createSoftBreakPlugin, exitBreakAtEdges, onKeyDownExitBreak, onKeyDownSingleLine, onKeyDownSoftBreak, withSingleLine };","map":{"version":3,"sources":["../../../../node_modules/is-hotkey/lib/index.js","../src/exit-break/onKeyDownExitBreak.ts","../src/exit-break/createExitBreakPlugin.ts","../src/single-line/onKeyDownSingleLine.ts","../src/single-line/withSingleLine.ts","../src/single-line/createSingleLinePlugin.ts","../src/soft-break/onKeyDownSoftBreak.ts","../src/soft-break/createSoftBreakPlugin.ts"],"names":["exitBreakAtEdges","end","queryEdge","isEdge","isStart","start","isSelectionAtBlockStart","isSelectionAtBlockEnd","isExpanded","editor","onKeyDownExitBreak","options","rules","event","entry","getBlockAbove","query","level","defaultType","getPluginType","isHotkey","queryNode","before","selectionPath","Editor","insertPath","Path","insertNodes","type","children","text","at","select","KEY_EXIT_BREAK","createExitBreakPlugin","createPluginFactory","key","handlers","onKeyDown","hotkey","onKeyDownSingleLine","withSingleLine","normalizeNode","Transforms","mode","match","path","KEY_SINGLE_LINE","createSingleLinePlugin","withOverrides","onKeyDownSoftBreak","KEY_SOFT_BREAK","createSoftBreakPlugin"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import {\n  ELEMENT_DEFAULT,\n  getBlockAbove,\n  getPluginType,\n  insertNodes,\n  isExpanded,\n  isSelectionAtBlockEnd,\n  isSelectionAtBlockStart,\n  KeyboardHandler,\n  queryNode,\n  TEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { Editor, Path } from 'slate';\nimport { ExitBreakPlugin } from './types';\n\n/**\n * Check if the selection is at the edge of its parent block.\n * If it is and if the selection is expanded, delete its content.\n */\nexport const exitBreakAtEdges = (\n  editor: TEditor,\n  {\n    start,\n    end,\n  }: {\n    start?: boolean;\n    end?: boolean;\n  }\n) => {\n  let queryEdge = false;\n  let isEdge = false;\n  let isStart = false;\n  if (start || end) {\n    queryEdge = true;\n\n    if (start && isSelectionAtBlockStart(editor)) {\n      isEdge = true;\n      isStart = true;\n    }\n\n    if (end && isSelectionAtBlockEnd(editor)) {\n      isEdge = true;\n    }\n\n    if (isEdge && isExpanded(editor.selection)) {\n      editor.deleteFragment();\n    }\n  }\n\n  return {\n    queryEdge,\n    isEdge,\n    isStart,\n  };\n};\n\nexport const onKeyDownExitBreak: KeyboardHandler<{}, ExitBreakPlugin> = (\n  editor,\n  { options: { rules = [] } }\n) => (event) => {\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n\n  rules.forEach(\n    ({\n      hotkey,\n      query = {},\n      level = 0,\n      before,\n      defaultType = getPluginType(editor, ELEMENT_DEFAULT),\n    }) => {\n      if (isHotkey(hotkey, event as any) && queryNode(entry, query)) {\n        if (!editor.selection) return;\n\n        const { queryEdge, isEdge, isStart } = exitBreakAtEdges(editor, query);\n        if (isStart) before = true;\n\n        if (queryEdge && !isEdge) return;\n\n        event.preventDefault();\n\n        const selectionPath = Editor.path(editor, editor.selection);\n\n        let insertPath;\n        if (before) {\n          insertPath = selectionPath.slice(0, level + 1);\n        } else {\n          insertPath = Path.next(selectionPath.slice(0, level + 1));\n        }\n\n        insertNodes<TElement>(\n          editor,\n          { type: defaultType, children: [{ text: '' }] },\n          {\n            at: insertPath,\n            select: !isStart,\n          }\n        );\n      }\n    }\n  );\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { onKeyDownExitBreak } from './onKeyDownExitBreak';\nimport { ExitBreakPlugin } from './types';\n\nexport const KEY_EXIT_BREAK = 'exitBreak';\n\n/**\n * Insert soft break following configurable rules.\n * Each rule specifies a hotkey and query options.\n */\nexport const createExitBreakPlugin = createPluginFactory<ExitBreakPlugin>({\n  key: KEY_EXIT_BREAK,\n  handlers: {\n    onKeyDown: onKeyDownExitBreak,\n  },\n  options: {\n    rules: [\n      { hotkey: 'mod+enter' },\n      { hotkey: 'mod+shift+enter', before: true },\n    ],\n  },\n});\n","import { KeyboardHandler } from '@udecode/plate-core';\n\nexport const onKeyDownSingleLine: KeyboardHandler = () => (event) => {\n  if (event.key === 'Enter') {\n    event.preventDefault();\n  }\n};\n","import { WithOverride } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\n\nexport const withSingleLine: WithOverride = (editor) => {\n  const { normalizeNode } = editor;\n\n  editor.insertBreak = () => null;\n\n  editor.normalizeNode = (entry) => {\n    if (editor.children.length > 1) {\n      Transforms.removeNodes(editor, {\n        at: [],\n        mode: 'highest',\n        match: (node, path) => path[0] > 0,\n      });\n    }\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { onKeyDownSingleLine } from './onKeyDownSingleLine';\nimport { withSingleLine } from './withSingleLine';\n\nexport const KEY_SINGLE_LINE = 'singleLine';\n\n/**\n * Forces editor to only have one line.\n */\nexport const createSingleLinePlugin = createPluginFactory({\n  key: KEY_SINGLE_LINE,\n  handlers: {\n    onKeyDown: onKeyDownSingleLine,\n  },\n  withOverrides: withSingleLine,\n});\n","import { getBlockAbove, KeyboardHandler, queryNode } from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { SoftBreakPlugin } from './types';\n\nexport const onKeyDownSoftBreak: KeyboardHandler<{}, SoftBreakPlugin> = (\n  editor,\n  { options: { rules = [] } }\n) => (event) => {\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n\n  rules.forEach(({ hotkey, query }) => {\n    if (isHotkey(hotkey, event as any) && queryNode(entry, query)) {\n      event.preventDefault();\n\n      editor.insertText('\\n');\n    }\n  });\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { onKeyDownSoftBreak } from './onKeyDownSoftBreak';\nimport { SoftBreakPlugin } from './types';\n\nexport const KEY_SOFT_BREAK = 'softBreak';\n\n/**\n * Insert soft break following configurable rules.\n * Each rule specifies a hotkey and query options.\n */\nexport const createSoftBreakPlugin = createPluginFactory<SoftBreakPlugin>({\n  key: KEY_SOFT_BREAK,\n  handlers: {\n    onKeyDown: onKeyDownSoftBreak,\n  },\n  options: {\n    rules: [{ hotkey: 'shift+enter' }],\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
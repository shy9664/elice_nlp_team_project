{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compile = exports.parse = void 0;\n\nvar parse_1 = require(\"./parse\");\n\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return parse_1.parse;\n  }\n});\n\nvar compile_1 = require(\"./compile\");\n\nObject.defineProperty(exports, \"compile\", {\n  enumerable: true,\n  get: function () {\n    return compile_1.compile;\n  }\n});\n/**\r\n * Parses and compiles a formula to a highly optimized function.\r\n * Combination of `parse` and `compile`.\r\n *\r\n * If the formula doesn't match any elements,\r\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\r\n * Otherwise, a function accepting an _index_ is returned, which returns\r\n * whether or not the passed _index_ matches the formula.\r\n *\r\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\r\n *\r\n * @param formula The formula to compile.\r\n * @example\r\n * const check = nthCheck(\"2n+3\");\r\n *\r\n * check(0); // `false`\r\n * check(1); // `false`\r\n * check(2); // `true`\r\n * check(3); // `false`\r\n * check(4); // `true`\r\n * check(5); // `false`\r\n * check(6); // `true`\r\n */\n\nfunction nthCheck(formula) {\n  return (0, compile_1.compile)((0, parse_1.parse)(formula));\n}\n\nexports.default = nthCheck;","map":{"version":3,"sources":["C:/Users/ghdus/OneDrive/바탕 화면/team-project/nlp-project-team2/frontend/node_modules/cheerio-select/node_modules/nth-check/lib/index.js"],"names":["Object","defineProperty","exports","value","compile","parse","parse_1","require","enumerable","get","compile_1","nthCheck","formula","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAAvC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;AAAEM,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOH,OAAO,CAACD,KAAf;AAAuB;AAA9D,CAAxC;;AACA,IAAIK,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;AAAEM,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOC,SAAS,CAACN,OAAjB;AAA2B;AAAlE,CAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,SAAO,CAAC,GAAGF,SAAS,CAACN,OAAd,EAAuB,CAAC,GAAGE,OAAO,CAACD,KAAZ,EAAmBO,OAAnB,CAAvB,CAAP;AACH;;AACDV,OAAO,CAACW,OAAR,GAAkBF,QAAlB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.compile = exports.parse = void 0;\r\nvar parse_1 = require(\"./parse\");\r\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_1.parse; } });\r\nvar compile_1 = require(\"./compile\");\r\nObject.defineProperty(exports, \"compile\", { enumerable: true, get: function () { return compile_1.compile; } });\r\n/**\r\n * Parses and compiles a formula to a highly optimized function.\r\n * Combination of `parse` and `compile`.\r\n *\r\n * If the formula doesn't match any elements,\r\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\r\n * Otherwise, a function accepting an _index_ is returned, which returns\r\n * whether or not the passed _index_ matches the formula.\r\n *\r\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\r\n *\r\n * @param formula The formula to compile.\r\n * @example\r\n * const check = nthCheck(\"2n+3\");\r\n *\r\n * check(0); // `false`\r\n * check(1); // `false`\r\n * check(2); // `true`\r\n * check(3); // `false`\r\n * check(4); // `true`\r\n * check(5); // `false`\r\n * check(6); // `true`\r\n */\r\nfunction nthCheck(formula) {\r\n    return (0, compile_1.compile)((0, parse_1.parse)(formula));\r\n}\r\nexports.default = nthCheck;\r\n"]},"metadata":{},"sourceType":"script"}
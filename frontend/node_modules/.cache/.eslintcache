[{"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\index.js":"1","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\theme.js":"2","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\App.jsx":"3","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryWrite.jsx":"4","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SignUp.jsx":"5","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\FOF.jsx":"6","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryDetails.jsx":"7","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SignIn.jsx":"8","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\Main.jsx":"9","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\Me.jsx":"10","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SympDiaryList.jsx":"11","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\OpenBoard.jsx":"12","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryList.jsx":"13","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\recoils\\diary.js":"14","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\recoils\\userInfo.js":"15","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\article.js":"16","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\signup.js":"17","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\signin.js":"18","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\board.js":"19","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryDateInput.jsx":"20","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\BasicEditor.jsx":"21","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\ReadonlyEditor.jsx":"22","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryWriteButtons.jsx":"23","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Logo.jsx":"24","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryListDropdown.jsx":"25","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryAfterButtons.jsx":"26","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\layouts\\BasicLayout.jsx":"27","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\getUrl.js":"28","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfoButtons.jsx":"29","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MainDiaries.jsx":"30","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfo.jsx":"31","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Calendar.jsx":"32","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MainChart.jsx":"33","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\AppHeader.jsx":"34","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Sidebar.jsx":"35","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\BasicEditorToolbar.jsx":"36","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\user.js":"37","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfoImageButtons.jsx":"38","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MeButtons.jsx":"39"},{"size":671,"mtime":1639201912574,"results":"40","hashOfConfig":"41"},{"size":550,"mtime":1639211618591,"results":"42","hashOfConfig":"41"},{"size":1352,"mtime":1639201912539,"results":"43","hashOfConfig":"41"},{"size":1846,"mtime":1639201912585,"results":"44","hashOfConfig":"41"},{"size":7201,"mtime":1639201912592,"results":"45","hashOfConfig":"41"},{"size":1473,"mtime":1639201912589,"results":"46","hashOfConfig":"41"},{"size":4241,"mtime":1639201912583,"results":"47","hashOfConfig":"41"},{"size":6183,"mtime":1639201912591,"results":"48","hashOfConfig":"41"},{"size":2005,"mtime":1639201912589,"results":"49","hashOfConfig":"41"},{"size":1051,"mtime":1639201912590,"results":"50","hashOfConfig":"41"},{"size":5077,"mtime":1639201912592,"results":"51","hashOfConfig":"41"},{"size":7092,"mtime":1639201912591,"results":"52","hashOfConfig":"41"},{"size":5511,"mtime":1639201912584,"results":"53","hashOfConfig":"41"},{"size":381,"mtime":1639201912593,"results":"54","hashOfConfig":"41"},{"size":284,"mtime":1639201912593,"results":"55","hashOfConfig":"41"},{"size":3010,"mtime":1639201912540,"results":"56","hashOfConfig":"41"},{"size":1221,"mtime":1639201912548,"results":"57","hashOfConfig":"41"},{"size":740,"mtime":1639201912542,"results":"58","hashOfConfig":"41"},{"size":766,"mtime":1639201912540,"results":"59","hashOfConfig":"41"},{"size":1470,"mtime":1639201912562,"results":"60","hashOfConfig":"41"},{"size":1796,"mtime":1639201912560,"results":"61","hashOfConfig":"41"},{"size":1078,"mtime":1639201912571,"results":"62","hashOfConfig":"41"},{"size":4276,"mtime":1639201912564,"results":"63","hashOfConfig":"41"},{"size":441,"mtime":1639201912564,"results":"64","hashOfConfig":"41"},{"size":2201,"mtime":1639211211313,"results":"65","hashOfConfig":"41"},{"size":8562,"mtime":1639201912561,"results":"66","hashOfConfig":"41"},{"size":1309,"mtime":1639201912583,"results":"67","hashOfConfig":"41"},{"size":382,"mtime":1639201912542,"results":"68","hashOfConfig":"41"},{"size":1546,"mtime":1639201912568,"results":"69","hashOfConfig":"41"},{"size":2585,"mtime":1639201912566,"results":"70","hashOfConfig":"41"},{"size":3026,"mtime":1639201912566,"results":"71","hashOfConfig":"41"},{"size":959,"mtime":1639213068925,"results":"72","hashOfConfig":"41"},{"size":1677,"mtime":1639212480086,"results":"73","hashOfConfig":"41"},{"size":1769,"mtime":1639201912559,"results":"74","hashOfConfig":"41"},{"size":4199,"mtime":1639210795454,"results":"75","hashOfConfig":"41"},{"size":1885,"mtime":1639201912560,"results":"76","hashOfConfig":"41"},{"size":1810,"mtime":1639201912548,"results":"77","hashOfConfig":"41"},{"size":1511,"mtime":1639201912571,"results":"78","hashOfConfig":"41"},{"size":1306,"mtime":1639201912566,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"tfehhp",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"82"},"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\index.js",[],["170","171"],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\theme.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\App.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryWrite.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SignUp.jsx",["172","173"],"import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport KeyIcon from \"@mui/icons-material/Key\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Logo from \"../components/Logo\";\r\nimport signup from \"../apis/signup\";\r\nimport signin from \"../apis/signin\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\n\r\nexport default function SignUp() {\r\n    // 네비게이트 훅\r\n    const navi = useNavigate();\r\n    // 리코일 전역 스테이트들\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const jsonData = {\r\n            email: data.get(\"email\"),\r\n            password: data.get(\"password\"),\r\n            password_check: data.get(\"passwordCheck\"),\r\n            nickname: data.get(\"nickname\"),\r\n        };\r\n        try {\r\n            // 회원가입 시도\r\n            const response = await signup(jsonData);\r\n            console.log(response.status); // 회원가입 성공 여부\r\n\r\n            // 회원가입 성공 시\r\n            if (response.status === 200) {\r\n                // 로그인 요청보내기\r\n                const userInfo = await signin(jsonData);\r\n\r\n                // 요청에 대한 응답\r\n                console.log(userInfo);\r\n\r\n                //데이터 객체 자체가 오지 않았을 경우\r\n                if (!userInfo) {\r\n                    alert(\"잘못된 응답!\");\r\n                    return;\r\n                }\r\n                const p = userInfo.photo;\r\n                const n = userInfo.nickname;\r\n\r\n                // status 코드가 200으로 일괄 세팅되기 때문에 응답으로 오는 데이터를 판단\r\n                if (p && n) {\r\n                    // 포토 부분과 닉네임 넣어주기\r\n                    const p = userInfo.photo;\r\n                    const n = userInfo.nickname;\r\n\r\n                    // recoil 전체 state 업데이트\r\n                    setPhoto(p);\r\n                    setNickname(n);\r\n\r\n                    //그냥 navigate\r\n                    navi(\"/\");\r\n                } else {\r\n                    alert(userInfo.data.result);\r\n                }\r\n            } else {\r\n                alert(\"성공적인 회원가입이 안되었습니다!\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                width: \"100vw\",\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n            }}\r\n            component=\"main\"\r\n        >\r\n            <Box\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    width: \"100vw\",\r\n                    height: \"100vh\",\r\n                    backgroundImage:\r\n                        \"url(https://images.unsplash.com/photo-1460467820054-c87ab43e9b59?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2867&q=80)\",\r\n                    backgroundSize: \"cover\",\r\n                    opacity: 0.6,\r\n                }}\r\n            ></Box>\r\n            <Paper\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    p: 4,\r\n                    maxWidth: 400,\r\n                    zIndex: 2,\r\n                }}\r\n                elevation={3}\r\n            >\r\n                <Logo />\r\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n                    <KeyIcon />\r\n                </Avatar>\r\n                <Box\r\n                    component=\"form\"\r\n                    noValidate\r\n                    onSubmit={handleSubmit}\r\n                    sx={{ mt: 3 }}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"nickname\"\r\n                                name=\"nickname\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"nickname\"\r\n                                label=\"닉네임\"\r\n                                autoFocus\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"이메일\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"비밀번호\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"new-password\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                name=\"passwordCheck\"\r\n                                label=\"비밀번호 재확인\"\r\n                                type=\"password\"\r\n                                id=\"password-check\"\r\n                                autoComplete=\"new-password-check\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to=\"/signin\">\r\n                                <Typography variant=\"body2\">\r\n                                    이미 회원이신가요?\r\n                                </Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\FOF.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryDetails.jsx",["174","175","176","177"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n    dateAtom,\r\n    isAnony as isatom,\r\n    emotion as emoatom,\r\n    isSharable,\r\n} from \"../recoils/diary\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\n\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\n\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\n\r\nimport ReadonlyEditor from \"../components/ReadonlyEditor\";\r\nimport DiaryAfterButtons from \"../components/DiaryAfterButtons\";\r\nimport DiaryListDropdown from \"../components/DiaryListDropdown\";\r\nimport { readArticle, updateEmotion } from \"../apis/article\";\r\n\r\nconst DiaryDetails = () => {\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const [withAnony, setWithAnony] = useRecoilState(isatom);\r\n    const [emotion, setEmotion] = useRecoilState(emoatom);\r\n    const [sharability, setSharability] = useRecoilState(isSharable);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const yearStr = date.getFullYear();\r\n    const monthNum = date.getMonth() + 1;\r\n    const dateNum = date.getDate();\r\n    const monthStr = monthNum < 10 ? `0${monthNum}` : monthNum;\r\n    const dateStr = dateNum < 10 ? `0${dateNum}` : dateNum;\r\n    const numDate = `${yearStr}-${monthStr}-${dateStr}`;\r\n    const otherNumDate = `${yearStr}${monthStr}${dateStr}`;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const article = await readArticle(otherNumDate);\r\n            setSharability(article.is_sharable);\r\n            setContent(article.text);\r\n        };\r\n        try {\r\n            fetchData();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\r\n                \"Warning: 공유가능여부가 무시되었습니다! 무조건 공유가 가능하게 됩니다.\"\r\n            );\r\n            setSharability(true);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const article = await updateEmotion(otherNumDate, emotion);\r\n        };\r\n        try {\r\n            fetchData();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\r\n                \"Warning: 이모지 업데이트가 안됩니다! AI가 분석한 당신의 감정을 회피하지 마십시오.\"\r\n            );\r\n        }\r\n    }, [emotion]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <DiaryListDropdown\r\n                    emotionFilter={emotion}\r\n                    setEmotionFilter={setEmotion}\r\n                    isNoAll\r\n                />\r\n                <IconButton\r\n                    onClick={(e) => {\r\n                        if (!sharability) {\r\n                            alert(\r\n                                \"비방/욕설이 포함되어 있어 공유할 수 없습니다!\"\r\n                            );\r\n                        } else {\r\n                            setWithAnony(!withAnony);\r\n                        }\r\n                    }}\r\n                >\r\n                    {withAnony ? <LockIcon /> : <LockOpenIcon />}\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: 530,\r\n                        overflow: \"scroll\",\r\n                        position: \"relative\",\r\n                        p: 4,\r\n                    }}\r\n                    elevation={5}\r\n                >\r\n                    <Typography variant=\"h4\">{`${yearStr}년 ${monthNum}월 ${dateNum}일`}</Typography>\r\n                    <ReadonlyEditor content={content} id={numDate} />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid\r\n                item\r\n                xs={12}\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                }}\r\n            >\r\n                <DiaryAfterButtons />\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default DiaryDetails;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SignIn.jsx",["178","179"],"import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Logo from \"../components/Logo\";\r\nimport signin from \"../apis/signin\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\n\r\nconst SignIn = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        // submit default event 로 인한 화면 refresh 막음\r\n        event.preventDefault();\r\n\r\n        // formdata 에서 데이터 추출\r\n        const data = new FormData(event.currentTarget);\r\n        const jsonData = {\r\n            email: data.get(\"email\"),\r\n            password: data.get(\"password\"),\r\n        };\r\n\r\n        // json data 요청 전에 확인\r\n        console.log(jsonData);\r\n\r\n        try {\r\n            // 로그인 요청보내기\r\n            const userInfo = await signin(jsonData);\r\n\r\n            // 요청에 대한 응답\r\n            console.log(userInfo);\r\n\r\n            //데이터 객체 자체가 오지 않았을 경우\r\n            if (!userInfo) {\r\n                alert(\"잘못된 응답!\");\r\n                return;\r\n            }\r\n            const p = userInfo.photo;\r\n            const n = userInfo.nickname;\r\n\r\n            // status 코드가 200으로 일괄 세팅되기 때문에 응답으로 오는 데이터를 판단\r\n            if (p && n) {\r\n                // 포토 부분과 닉네임 넣어주기\r\n                const p = userInfo.photo;\r\n                const n = userInfo.nickname;\r\n\r\n                // recoil 전체 state 업데이트\r\n                setPhoto(p);\r\n                setNickname(n);\r\n\r\n                //0.5 초 후에 navigate\r\n                const id = setTimeout(() => {\r\n                    navigate(\"/\");\r\n                }, 500);\r\n                return () => {\r\n                    // clean up code\r\n                    clearTimeout(id);\r\n                };\r\n            } else {\r\n                alert(userInfo.result);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                width: \"100vw\",\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    width: \"100vw\",\r\n                    height: \"100vh\",\r\n                    backgroundImage:\r\n                        \"url(https://images.unsplash.com/photo-1633474601643-a321174fd8fd)\",\r\n                    backgroundSize: \"cover\",\r\n                    opacity: 0.6,\r\n                }}\r\n            ></Box>\r\n            <Paper\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    p: 4,\r\n                    maxWidth: 400,\r\n                    zIndex: 2,\r\n                }}\r\n                elevation={3}\r\n            >\r\n                <Logo />\r\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Box\r\n                    component=\"form\"\r\n                    onSubmit={handleSubmit}\r\n                    noValidate\r\n                    sx={{ mt: 1 }}\r\n                >\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"이메일\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"비밀번호\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        로그인\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link to=\"/\">\r\n                                <Typography variant=\"body2\">\r\n                                    비밀번호를 잊으셨나요?\r\n                                </Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link to=\"/signup\">\r\n                                <Typography variant=\"body2\">\r\n                                    회원가입하기\r\n                                </Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Paper>\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{ position: \"absolute\", right: 0, top: 0, m: 2 }}\r\n                onClick={(e) => {\r\n                    navigate(\"/signup\");\r\n                }}\r\n            >\r\n                Sign Up\r\n            </Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\Main.jsx",["180","181","182","183","184","185"],"import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\n\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport Calendar from \"../components/Calendar\";\r\nimport MainChart from \"../components/MainChart\";\r\nimport MainDiaries from \"../components/MainDiaries\";\r\n\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\n\r\nconst Main = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12} md={6} lg={5}>\r\n                <Paper sx={{ width: \"100%\", height: \"100%\" }} elevation={3}>\r\n                    <Calendar />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6} lg={7}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        flexDirection: \"column\",\r\n                    }}\r\n                    elevation={3}\r\n                >\r\n                    <MainChart />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        overflow: \"scroll\",\r\n                        p: 3,\r\n                        maxHeight: 200,\r\n                        backgroundColor: \"#eeeeee\",\r\n                    }}\r\n                    elevation={3}\r\n                >\r\n                    <MainDiaries />\r\n                </Paper>\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\Me.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\SympDiaryList.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\OpenBoard.jsx",["186"],"import React, { useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\nimport { readBoard } from \"../apis/board\";\r\nimport DiaryListDropdown, {\r\n    UnicodeEmoMap,\r\n} from \"../components/DiaryListDropdown\";\r\n\r\nconst mockups = [\r\n    {\r\n        date: \"2021-11-15\",\r\n        text: \"안녕\",\r\n        emotion: \"\\u{1F601}\",\r\n        article_id: true,\r\n        symped: true,\r\n        num: 42,\r\n    },\r\n    {\r\n        date: \"2021-11-16\",\r\n        text: \"하세요\",\r\n        emotion: \"\\u{1F603}\",\r\n        article_id: true,\r\n        symped: true,\r\n        num: 79,\r\n    },\r\n    {\r\n        date: \"2021-11-17\",\r\n        text: \"으윽!\",\r\n        emotion: \"\\u{1F602}\",\r\n        article_id: false,\r\n        num: 10,\r\n    },\r\n    {\r\n        date: \"2021-11-18\",\r\n        text: \"잘자라!\",\r\n        emotion: \"\\u{1F604}\",\r\n        article_id: false,\r\n        symped: true,\r\n        num: 88,\r\n    },\r\n    {\r\n        date: \"2021-11-19\",\r\n        text: \"쿠쿠!\",\r\n        emotion: \"\\u{1F605}\",\r\n        article_id: false,\r\n        num: 12,\r\n    },\r\n];\r\n\r\nconst NumHeart = ({ symped, num }) => {\r\n    return (\r\n        <IconButton>\r\n            <Badge color=\"secondary\" badgeContent={num}>\r\n                {symped ? (\r\n                    <FavoriteBorderIcon\r\n                        sx={{ fontSize: 90 }}\r\n                        color=\"secondary\"\r\n                    />\r\n                ) : (\r\n                    <FavoriteBorderIcon sx={{ fontSize: 90 }} />\r\n                )}\r\n            </Badge>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nconst OpenBoard = () => {\r\n    const [diaries, setDiaries] = useState([]);\r\n    const [immuDiaries, setImmuDiaries] = useState([...mockups].reverse());\r\n    const [fromOld, setFromOld] = useState(false);\r\n    const [sympOrder, setSympOrder] = useState(false);\r\n    const [emotionFilter, setEmotionFilter] = useState(\"all\");\r\n    useEffect(() => {\r\n        console.log(\"글 받아오기\");\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await readBoard();\r\n                console.log(data);\r\n                // setDiaries(data);\r\n                // setDiaries(data); 오류가 나서 임시로 막아뒀습니다 서버 연결 후 풀어봐야할듯..?\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (sympOrder) {\r\n            // if (fromOld) {\r\n            //     setDiaries(mockups.filter((diary) => diary));\r\n            // } else {\r\n            //     setDiaries(mockups.filter((diary) => diary).reverse());\r\n            // }\r\n        } else {\r\n            if (fromOld) {\r\n                setDiaries(immuDiaries);\r\n            } else {\r\n                setDiaries([...immuDiaries].reverse());\r\n            }\r\n        }\r\n    }, [sympOrder, fromOld, immuDiaries]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <Box>\r\n                    <InputLabel id=\"emotion-select-label\">감정</InputLabel>\r\n                    <DiaryListDropdown\r\n                        emotionFilter={emotionFilter}\r\n                        setEmotionFilter={setEmotionFilter}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={fromOld}\r\n                                onChange={() => {\r\n                                    setFromOld(!fromOld);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"오래된것부터보기\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={sympOrder}\r\n                                onChange={() => {\r\n                                    setSympOrder(!sympOrder);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"공감 많은순\"\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ maxHeight: 630, overflow: \"scroll\" }}>\r\n                {diaries.map((diary) => {\r\n                    if (\r\n                        emotionFilter !== \"all\" &&\r\n                        UnicodeEmoMap[emotionFilter] !== diary.emotion\r\n                    ) {\r\n                        // eslint-disable-next-line array-callback-return\r\n                        return;\r\n                    }\r\n                    return (\r\n                        <Paper\r\n                            key={diary.date}\r\n                            sx={{\r\n                                m: 2,\r\n                                minHeight: 100,\r\n                                p: 2,\r\n                                position: \"relative\",\r\n                                backgroundColor: \"secondary.dark\",\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                            }}\r\n                        >\r\n                            <NumHeart\r\n                                symped={diary.symped}\r\n                                num={diary.num ?? 0}\r\n                            />\r\n                            <Typography variant=\"body1\">\r\n                                {diary.text}\r\n                            </Typography>\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    right: 0,\r\n                                    top: 0,\r\n                                    p: 3,\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <Typography variant=\"h6\">\r\n                                    {diary.date}\r\n                                </Typography>\r\n\r\n                                <Typography\r\n                                    sx={{ textAlign: \"right\" }}\r\n                                    variant=\"h6\"\r\n                                >\r\n                                    {diary.emotion}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Paper>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default OpenBoard;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\pages\\DiaryList.jsx",["187"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\nimport ReadonlyEditor from \"../components/ReadonlyEditor\";\r\nimport DiaryListDropdown, {\r\n    UnicodeEmoMap,\r\n} from \"../components/DiaryListDropdown\";\r\nimport { readArticles } from \"../apis/article\";\r\nimport { dateAtom } from \"../recoils/diary\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst DiaryItem = ({ diary }) => {\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const navi = useNavigate();\r\n    const handleClick = () => {\r\n        setDate(new Date(diary.date));\r\n        navi(\"/diary/done\");\r\n    };\r\n\r\n    return (\r\n        <Paper\r\n            key={diary.date}\r\n            sx={{\r\n                m: 2,\r\n                minHeight: 100,\r\n                height: 140,\r\n                overflow: \"hidden\",\r\n                p: 2,\r\n                position: \"relative\",\r\n                \":hover\": {\r\n                    boxShadow: 6,\r\n                    cursor: \"pointer\",\r\n                },\r\n            }}\r\n            onClick={() => {\r\n                handleClick();\r\n            }}\r\n        >\r\n            <Typography variant=\"h6\">\r\n                {diary.date} {UnicodeEmoMap[diary.emotion]}\r\n            </Typography>\r\n            <ReadonlyEditor content={diary.text} id={diary.date} />\r\n            <Box\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    right: 0,\r\n                    top: 0,\r\n                    p: 3,\r\n                }}\r\n            >\r\n                {diary.is_shared ? <LockOpenIcon /> : <LockIcon />}\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst DiaryList = () => {\r\n    const [diaries, setDiaries] = useState([]);\r\n    const [immudiaries, setImmudiaries] = useState([]);\r\n    const [fromOld, setFromOld] = useState(false);\r\n    const [isPublic, setIsPublic] = useState(false);\r\n    const [emotionFilter, setEmotionFilter] = useState(\"all\");\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                console.log(\"글 받아오기\");\r\n                const articles = await readArticles();\r\n\r\n                if (!articles) {\r\n                    alert(\"잘못된 응답!\");\r\n                    return;\r\n                }\r\n                setImmudiaries(articles);\r\n                setDiaries(articles);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isPublic) {\r\n            if (fromOld) {\r\n                setDiaries(\r\n                    immudiaries.filter((diary) => diary.is_shared).reverse()\r\n                );\r\n            } else {\r\n                setDiaries(immudiaries.filter((diary) => diary.is_shared));\r\n            }\r\n        } else {\r\n            if (fromOld) {\r\n                setDiaries([...immudiaries].reverse());\r\n            } else {\r\n                setDiaries(immudiaries);\r\n            }\r\n        }\r\n    }, [isPublic, fromOld, immudiaries]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <Box>\r\n                    <DiaryListDropdown\r\n                        emotionFilter={emotionFilter}\r\n                        setEmotionFilter={setEmotionFilter}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={fromOld}\r\n                                onChange={() => {\r\n                                    setFromOld(!fromOld);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"오래된것부터보기\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={isPublic}\r\n                                onChange={() => {\r\n                                    setIsPublic(!isPublic);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"공개된 글\"\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n            {/* 이게 실제 아이템들 */}\r\n            <Grid item xs={12} sx={{ maxHeight: 630, overflow: \"scroll\" }}>\r\n                {diaries.map((diary) => {\r\n                    if (\r\n                        emotionFilter !== \"all\" &&\r\n                        UnicodeEmoMap[emotionFilter] !== diary.emotion\r\n                    ) {\r\n                        console.log(diary);\r\n                        console.log(UnicodeEmoMap);\r\n                        console.log(UnicodeEmoMap[emotionFilter]);\r\n                        console.log(diary.emotion);\r\n                        return <div key={diary.date}></div>;\r\n                    }\r\n                    return <DiaryItem key={diary.date} diary={diary} />;\r\n                })}\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default DiaryList;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\recoils\\diary.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\recoils\\userInfo.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\article.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\signup.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\signin.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\board.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryDateInput.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\BasicEditor.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\ReadonlyEditor.jsx",["188","189"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Plate,\r\n    createParagraphPlugin,\r\n    createBlockquotePlugin,\r\n    createHeadingPlugin,\r\n    createPlugins,\r\n    createPlateUI,\r\n} from \"@udecode/plate\";\r\n\r\nconst editableProps = {\r\n    placeholder: \"Type…\",\r\n    style: {\r\n        padding: 15,\r\n        backgroundColor: \"white\",\r\n        marginTop: 15,\r\n    },\r\n    readOnly: true,\r\n};\r\n\r\nconst ReadonlyEditor = ({ content, id }) => {\r\n    const plugins = createPlugins(\r\n        [\r\n            // elements\r\n            createParagraphPlugin(), // paragraph element\r\n            createBlockquotePlugin(), // blockquote element\r\n            createHeadingPlugin(), // heading elements\r\n        ],\r\n        {\r\n            components: createPlateUI(),\r\n        }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Plate\r\n                id={id ?? \"1\"}\r\n                editableProps={editableProps}\r\n                value={JSON.parse(content)}\r\n                plugins={plugins}\r\n            ></Plate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReadonlyEditor;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryWriteButtons.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Logo.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryListDropdown.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\DiaryAfterButtons.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\layouts\\BasicLayout.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\getUrl.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfoButtons.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MainDiaries.jsx",["190","191"],"import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { dateAtom } from \"../recoils/diary\";\r\nimport ReadonlyEditor from \"./ReadonlyEditor\";\r\n\r\nconst MainDiaries = () => {\r\n    const navi = useNavigate();\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const [fullDate, setFullDate] = useState(\"\");\r\n    const [fullDateString, setFullDateString] = useState(\"\");\r\n    const [contentData, setContentData] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // date 가 바뀌면\r\n        const yearStr = date.getFullYear();\r\n        const monthNum = date.getMonth() + 1;\r\n        const dateNum = date.getDate();\r\n        const monthStr = monthNum < 10 ? `0${monthNum}` : monthNum;\r\n        const dateStr = dateNum < 10 ? `0${dateNum}` : dateNum;\r\n        const numDate = `${yearStr}-${monthStr}-${dateStr}`;\r\n        const strDate = `${yearStr}년 ${monthNum}월 ${dateNum}일`;\r\n        setFullDateString(strDate); // 2020년 ~ 월 ~ 일\r\n        setFullDate(numDate); // 2020-11-11\r\n    }, [date]);\r\n\r\n    useEffect(() => {\r\n        \r\n        // keep localStorage\r\n        const next = localStorage.getItem(fullDate);\r\n        next && next !== contentData\r\n            ? setContentData(\"loading\")\r\n            : setContentData(\"\");\r\n        const id = setTimeout(() => {\r\n            setContentData(next);\r\n        }, 10);\r\n        return () => {\r\n            clearTimeout(id);\r\n        };\r\n    }, [fullDate]);\r\n\r\n    // useEffect(() => {}, [contentData]);\r\n\r\n    const goWriteDiary = () => {\r\n        navi(\"/diary/write\");\r\n    };\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\">{fullDateString}</Typography>\r\n            {contentData === \"loading\" ? (\r\n                <Box sx={{ height: 200 }}></Box>\r\n            ) : contentData ? (\r\n                <>\r\n                    <ReadonlyEditor content={contentData} id={fullDate} />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Typography sx={{ mt: 3, mb: 3, fontSize: 17 }}>\r\n                        일기가 없어요ㅠㅠ\r\n                    </Typography>\r\n                    <Button onClick={() => goWriteDiary()} variant=\"contained\">\r\n                        <Typography>{\">>\"} 일기 쓰러 가기</Typography>\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainDiaries;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfo.jsx",["192","193","194"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {\r\n    photo as ptatom,\r\n    nickname as nkatom,\r\n    password as pwatom,\r\n    passwordRetry as pwReatom,\r\n} from \"../recoils/userInfo\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { readUser } from \"../apis/user\";\r\nimport MyInfoImageButtons from \"./MyInfoImageButtons\";\r\n\r\nconst MyInfo = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [pw, setPw] = useRecoilState(pwatom);\r\n    const [pwRt, setPwRt] = useRecoilState(pwReatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const [email, setEmail] = useState(\"immutable@email.com\");\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const userinfo = await readUser();\r\n                if (userinfo.nickname) {\r\n                    setNickname(userinfo.nickname);\r\n                }\r\n                // setPhoto(userinfo.photo); 포토는 안받아도 똑같을 것\r\n                if (userinfo.email) {\r\n                    setEmail(userinfo.email);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                mb: 4,\r\n            }}\r\n        >\r\n            <Avatar\r\n                variant=\"rounded\"\r\n                alt=\"avatar profile\"\r\n                src={photo}\r\n                sx={{\r\n                    width: \"10vw\",\r\n                    height: \"10vw\",\r\n                    bgcolor: \"#b2cefe\",\r\n                    mb: 2,\r\n                }}\r\n            />\r\n            <MyInfoImageButtons />\r\n            <TextField\r\n                sx={{ m: 2 }}\r\n                label=\"닉네임\"\r\n                value={nickname}\r\n                onChange={(e) => setNickname(e.target.value)}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                sx={{ m: 2 }}\r\n                label=\"이메일\"\r\n                disabled\r\n                value={email}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                type=\"password\"\r\n                sx={{ m: 2 }}\r\n                label=\"비밀번호\"\r\n                variant=\"filled\"\r\n                value={pw}\r\n                onChange={() => setPw()}\r\n            />\r\n            <TextField\r\n                type=\"password\"\r\n                sx={{ m: 2 }}\r\n                label=\"비밀번호 확인\"\r\n                variant=\"filled\"\r\n                value={pwRt}\r\n                onChange={() => setPwRt()}\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyInfo;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Calendar.jsx",["195"],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MainChart.jsx",["196","197","198"],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\AppHeader.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\Sidebar.jsx",["199"],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\BasicEditorToolbar.jsx",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\apis\\user.js",[],"C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MyInfoImageButtons.jsx",["200","201","202","203"],"import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom } from \"../recoils/userInfo\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { deleteUserImage, updateUserImage } from \"../apis/user\";\r\n\r\nconst MyInfoImageButtons = () => {\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const updateImage = async () => {\r\n        try {\r\n            const res = await updateUserImage();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\"이미지 수정 안됨!\");\r\n        }\r\n    };\r\n\r\n    const deleteImage = async () => {\r\n        try {\r\n            const res = await deleteUserImage();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\"이미지 삭제 안됨!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: \"flex\", m: 2 }}>\r\n            <Button\r\n                sx={{ mr: 1 }}\r\n                onClick={() => updateImage()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>이미지 업데이트</Typography>\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => deleteImage()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>이미지 삭제</Typography>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyInfoImageButtons;\r\n","C:\\Users\\User\\Desktop\\moodmood\\nlp-project-team2\\frontend\\src\\components\\MeButtons.jsx",["204","205","206","207"],"import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst MyInfoButtons = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const navi = useNavigate();\r\n    const logout = () => {\r\n        // 로그아웃 없는데요?ㅠㅠ\r\n        console.log(\"로그아웃되었습니다.\");\r\n        navi(\"/signin\");\r\n    };\r\n\r\n    const toMyInfo = () => {\r\n        console.log(\"내정보로\");\r\n        navi(\"/me\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                sx={{ mr: 1 }}\r\n                onClick={() => toMyInfo()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>내 정보</Typography>\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => logout()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>로그아웃</Typography>\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyInfoButtons;\r\n",{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":23,"column":12,"nodeType":"214","messageId":"215","endLine":23,"endColumn":20},{"ruleId":"212","severity":1,"message":"216","line":24,"column":12,"nodeType":"214","messageId":"215","endLine":24,"endColumn":17},{"ruleId":"212","severity":1,"message":"217","line":27,"column":18,"nodeType":"214","messageId":"215","endLine":27,"endColumn":25},{"ruleId":"218","severity":1,"message":"219","line":56,"column":8,"nodeType":"220","endLine":56,"endColumn":10,"suggestions":"221"},{"ruleId":"212","severity":1,"message":"222","line":60,"column":19,"nodeType":"214","messageId":"215","endLine":60,"endColumn":26},{"ruleId":"218","severity":1,"message":"223","line":70,"column":8,"nodeType":"220","endLine":70,"endColumn":17,"suggestions":"224"},{"ruleId":"212","severity":1,"message":"213","line":20,"column":12,"nodeType":"214","messageId":"215","endLine":20,"endColumn":20},{"ruleId":"212","severity":1,"message":"216","line":21,"column":12,"nodeType":"214","messageId":"215","endLine":21,"endColumn":17},{"ruleId":"212","severity":1,"message":"225","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"213","line":16,"column":12,"nodeType":"214","messageId":"215","endLine":16,"endColumn":20},{"ruleId":"212","severity":1,"message":"226","line":16,"column":22,"nodeType":"214","messageId":"215","endLine":16,"endColumn":33},{"ruleId":"212","severity":1,"message":"216","line":17,"column":12,"nodeType":"214","messageId":"215","endLine":17,"endColumn":17},{"ruleId":"212","severity":1,"message":"227","line":17,"column":19,"nodeType":"214","messageId":"215","endLine":17,"endColumn":27},{"ruleId":"212","severity":1,"message":"228","line":18,"column":11,"nodeType":"214","messageId":"215","endLine":18,"endColumn":19},{"ruleId":"212","severity":1,"message":"229","line":78,"column":25,"nodeType":"214","messageId":"215","endLine":78,"endColumn":39},{"ruleId":"212","severity":1,"message":"230","line":21,"column":12,"nodeType":"214","messageId":"215","endLine":21,"endColumn":16},{"ruleId":"212","severity":1,"message":"225","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"231","line":1,"column":28,"nodeType":"214","messageId":"215","endLine":1,"endColumn":36},{"ruleId":"212","severity":1,"message":"217","line":12,"column":18,"nodeType":"214","messageId":"215","endLine":12,"endColumn":25},{"ruleId":"218","severity":1,"message":"232","line":43,"column":8,"nodeType":"220","endLine":43,"endColumn":18,"suggestions":"233"},{"ruleId":"212","severity":1,"message":"234","line":4,"column":8,"nodeType":"214","messageId":"215","endLine":4,"endColumn":14},{"ruleId":"212","severity":1,"message":"227","line":20,"column":19,"nodeType":"214","messageId":"215","endLine":20,"endColumn":27},{"ruleId":"218","severity":1,"message":"235","line":39,"column":8,"nodeType":"220","endLine":39,"endColumn":10,"suggestions":"236"},{"ruleId":"212","severity":1,"message":"237","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":17},{"ruleId":"212","severity":1,"message":"238","line":2,"column":25,"nodeType":"214","messageId":"215","endLine":2,"endColumn":29},{"ruleId":"212","severity":1,"message":"239","line":2,"column":69,"nodeType":"214","messageId":"215","endLine":2,"endColumn":75},{"ruleId":"212","severity":1,"message":"240","line":2,"column":77,"nodeType":"214","messageId":"215","endLine":2,"endColumn":96},{"ruleId":"218","severity":1,"message":"241","line":67,"column":8,"nodeType":"220","endLine":67,"endColumn":10,"suggestions":"242"},{"ruleId":"212","severity":1,"message":"216","line":10,"column":12,"nodeType":"214","messageId":"215","endLine":10,"endColumn":17},{"ruleId":"212","severity":1,"message":"227","line":10,"column":19,"nodeType":"214","messageId":"215","endLine":10,"endColumn":27},{"ruleId":"212","severity":1,"message":"243","line":14,"column":19,"nodeType":"214","messageId":"215","endLine":14,"endColumn":22},{"ruleId":"212","severity":1,"message":"243","line":23,"column":19,"nodeType":"214","messageId":"215","endLine":23,"endColumn":22},{"ruleId":"212","severity":1,"message":"213","line":9,"column":12,"nodeType":"214","messageId":"215","endLine":9,"endColumn":20},{"ruleId":"212","severity":1,"message":"226","line":9,"column":22,"nodeType":"214","messageId":"215","endLine":9,"endColumn":33},{"ruleId":"212","severity":1,"message":"216","line":10,"column":12,"nodeType":"214","messageId":"215","endLine":10,"endColumn":17},{"ruleId":"212","severity":1,"message":"227","line":10,"column":19,"nodeType":"214","messageId":"215","endLine":10,"endColumn":27},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'nickname' is assigned a value but never used.","Identifier","unusedVar","'photo' is assigned a value but never used.","'setDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'otherNumDate' and 'setSharability'. Either include them or remove the dependency array.","ArrayExpression",["246"],"'article' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'otherNumDate'. Either include it or remove the dependency array.",["247"],"'useEffect' is defined but never used.","'setNickname' is assigned a value but never used.","'setPhoto' is assigned a value but never used.","'navigate' is assigned a value but never used.","'setImmuDiaries' is assigned a value but never used.","'date' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'contentData'. Either include it or remove the dependency array.",["248"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'setNickname'. Either include it or remove the dependency array.",["249"],"'isWeekend' is defined but never used.","'Cell' is defined but never used.","'Legend' is defined but never used.","'ResponsiveContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'navi', 'setNickname', and 'setPhoto'. Either include them or remove the dependency array.",["250"],"'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},"Update the dependencies array to be: [otherNumDate, setSharability]",{"range":"261","text":"262"},"Update the dependencies array to be: [emotion, otherNumDate]",{"range":"263","text":"264"},"Update the dependencies array to be: [contentData, fullDate]",{"range":"265","text":"266"},"Update the dependencies array to be: [setNickname]",{"range":"267","text":"268"},"Update the dependencies array to be: [navi, setNickname, setPhoto]",{"range":"269","text":"270"},[1996,1998],"[otherNumDate, setSharability]",[2371,2380],"[emotion, otherNumDate]",[1614,1624],"[contentData, fullDate]",[1357,1359],"[setNickname]",[1931,1933],"[navi, setNickname, setPhoto]"]
[{"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\index.js":"1","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\theme.js":"2","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\App.jsx":"3","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\Me.jsx":"4","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SignIn.jsx":"5","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryDetails.jsx":"6","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\Main.jsx":"7","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryWrite.jsx":"8","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\FOF.jsx":"9","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryList.jsx":"10","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\OpenBoard.jsx":"11","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SympDiaryList.jsx":"12","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SignUp.jsx":"13","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\signin.js":"14","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\article.js":"15","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\signup.js":"16","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\recoils\\userInfo.js":"17","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\recoils\\diary.js":"18","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfoButtons.jsx":"19","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Calendar.jsx":"20","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\ReadonlyEditor.jsx":"21","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryAfterButtons.jsx":"22","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfo.jsx":"23","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MainDiaries.jsx":"24","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Logo.jsx":"25","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\BasicEditor.jsx":"26","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryListDropdown.jsx":"27","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MainChart.jsx":"28","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryDateInput.jsx":"29","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryWriteButtons.jsx":"30","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\layouts\\BasicLayout.jsx":"31","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\getUrl.js":"32","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\board.js":"33","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\user.js":"34","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\AppHeader.jsx":"35","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Sidebar.jsx":"36","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfoImageButtons.jsx":"37","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\BasicEditorToolbar.jsx":"38","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MeButtons.jsx":"39"},{"size":671,"mtime":1639052761260,"results":"40","hashOfConfig":"41"},{"size":550,"mtime":1639218366472,"results":"42","hashOfConfig":"41"},{"size":1352,"mtime":1639052761237,"results":"43","hashOfConfig":"41"},{"size":1051,"mtime":1639052761269,"results":"44","hashOfConfig":"41"},{"size":6183,"mtime":1639197321554,"results":"45","hashOfConfig":"41"},{"size":4489,"mtime":1639218366468,"results":"46","hashOfConfig":"41"},{"size":2005,"mtime":1639197321552,"results":"47","hashOfConfig":"41"},{"size":1846,"mtime":1639128411978,"results":"48","hashOfConfig":"41"},{"size":1473,"mtime":1639052761268,"results":"49","hashOfConfig":"41"},{"size":5511,"mtime":1639197321551,"results":"50","hashOfConfig":"41"},{"size":7089,"mtime":1639218366469,"results":"51","hashOfConfig":"41"},{"size":5077,"mtime":1639128411984,"results":"52","hashOfConfig":"41"},{"size":5879,"mtime":1639218366471,"results":"53","hashOfConfig":"41"},{"size":740,"mtime":1639128411956,"results":"54","hashOfConfig":"41"},{"size":3010,"mtime":1639197321530,"results":"55","hashOfConfig":"41"},{"size":1221,"mtime":1639197321534,"results":"56","hashOfConfig":"41"},{"size":284,"mtime":1639128411986,"results":"57","hashOfConfig":"41"},{"size":381,"mtime":1639128411985,"results":"58","hashOfConfig":"41"},{"size":1546,"mtime":1639197321544,"results":"59","hashOfConfig":"41"},{"size":959,"mtime":1639128411962,"results":"60","hashOfConfig":"41"},{"size":1078,"mtime":1639197321547,"results":"61","hashOfConfig":"41"},{"size":8562,"mtime":1639197321536,"results":"62","hashOfConfig":"41"},{"size":3026,"mtime":1639197321543,"results":"63","hashOfConfig":"41"},{"size":2585,"mtime":1639197321540,"results":"64","hashOfConfig":"41"},{"size":441,"mtime":1639197321539,"results":"65","hashOfConfig":"41"},{"size":1796,"mtime":1639128411960,"results":"66","hashOfConfig":"41"},{"size":1439,"mtime":1639218366463,"results":"67","hashOfConfig":"41"},{"size":1677,"mtime":1639218366465,"results":"68","hashOfConfig":"41"},{"size":1470,"mtime":1639052761249,"results":"69","hashOfConfig":"41"},{"size":3269,"mtime":1639218366464,"results":"70","hashOfConfig":"41"},{"size":1309,"mtime":1639052761261,"results":"71","hashOfConfig":"41"},{"size":382,"mtime":1639052761240,"results":"72","hashOfConfig":"41"},{"size":766,"mtime":1639128411955,"results":"73","hashOfConfig":"41"},{"size":1810,"mtime":1639197321535,"results":"74","hashOfConfig":"41"},{"size":1769,"mtime":1639052761244,"results":"75","hashOfConfig":"41"},{"size":4199,"mtime":1639218366467,"results":"76","hashOfConfig":"41"},{"size":1511,"mtime":1639197321546,"results":"77","hashOfConfig":"41"},{"size":1885,"mtime":1639052761246,"results":"78","hashOfConfig":"41"},{"size":1306,"mtime":1639197321542,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vahw3q",{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\index.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\theme.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\App.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\Me.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SignIn.jsx",["172","173"],"import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Logo from \"../components/Logo\";\r\nimport signin from \"../apis/signin\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\n\r\nconst SignIn = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        // submit default event 로 인한 화면 refresh 막음\r\n        event.preventDefault();\r\n\r\n        // formdata 에서 데이터 추출\r\n        const data = new FormData(event.currentTarget);\r\n        const jsonData = {\r\n            email: data.get(\"email\"),\r\n            password: data.get(\"password\"),\r\n        };\r\n\r\n        // json data 요청 전에 확인\r\n        console.log(jsonData);\r\n\r\n        try {\r\n            // 로그인 요청보내기\r\n            const userInfo = await signin(jsonData);\r\n\r\n            // 요청에 대한 응답\r\n            console.log(userInfo);\r\n\r\n            //데이터 객체 자체가 오지 않았을 경우\r\n            if (!userInfo) {\r\n                alert(\"잘못된 응답!\");\r\n                return;\r\n            }\r\n            const p = userInfo.photo;\r\n            const n = userInfo.nickname;\r\n\r\n            // status 코드가 200으로 일괄 세팅되기 때문에 응답으로 오는 데이터를 판단\r\n            if (p && n) {\r\n                // 포토 부분과 닉네임 넣어주기\r\n                const p = userInfo.photo;\r\n                const n = userInfo.nickname;\r\n\r\n                // recoil 전체 state 업데이트\r\n                setPhoto(p);\r\n                setNickname(n);\r\n\r\n                //0.5 초 후에 navigate\r\n                const id = setTimeout(() => {\r\n                    navigate(\"/\");\r\n                }, 500);\r\n                return () => {\r\n                    // clean up code\r\n                    clearTimeout(id);\r\n                };\r\n            } else {\r\n                alert(userInfo.result);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                width: \"100vw\",\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    width: \"100vw\",\r\n                    height: \"100vh\",\r\n                    backgroundImage:\r\n                        \"url(https://images.unsplash.com/photo-1633474601643-a321174fd8fd)\",\r\n                    backgroundSize: \"cover\",\r\n                    opacity: 0.6,\r\n                }}\r\n            ></Box>\r\n            <Paper\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    p: 4,\r\n                    maxWidth: 400,\r\n                    zIndex: 2,\r\n                }}\r\n                elevation={3}\r\n            >\r\n                <Logo />\r\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Box\r\n                    component=\"form\"\r\n                    onSubmit={handleSubmit}\r\n                    noValidate\r\n                    sx={{ mt: 1 }}\r\n                >\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"이메일\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"비밀번호\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        sx={{ mt: 3, mb: 2 }}\r\n                    >\r\n                        로그인\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link to=\"/\">\r\n                                <Typography variant=\"body2\">\r\n                                    비밀번호를 잊으셨나요?\r\n                                </Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link to=\"/signup\">\r\n                                <Typography variant=\"body2\">\r\n                                    회원가입하기\r\n                                </Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Paper>\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{ position: \"absolute\", right: 0, top: 0, m: 2 }}\r\n                onClick={(e) => {\r\n                    navigate(\"/signup\");\r\n                }}\r\n            >\r\n                Sign Up\r\n            </Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryDetails.jsx",["174","175","176","177","178"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n    dateAtom,\r\n    isAnony as isatom,\r\n    emotion as emoatom,\r\n    isSharable,\r\n    isAnony,\r\n} from \"../recoils/diary\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\n\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\n\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\n\r\nimport ReadonlyEditor from \"../components/ReadonlyEditor\";\r\nimport DiaryAfterButtons from \"../components/DiaryAfterButtons\";\r\nimport DiaryListDropdown from \"../components/DiaryListDropdown\";\r\nimport { readArticle, updateEmotion } from \"../apis/article\";\r\n\r\nconst DiaryDetails = () => {\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const [withAnony, setWithAnony] = useRecoilState(isatom);\r\n    const [emotion, setEmotion] = useRecoilState(emoatom);\r\n    const [sharability, setSharability] = useRecoilState(isSharable);\r\n    const [isPrivate, setIsPrivate] = useRecoilState(isAnony);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const yearStr = date.getFullYear();\r\n    const monthNum = date.getMonth() + 1;\r\n    const dateNum = date.getDate();\r\n    const monthStr = monthNum < 10 ? `0${monthNum}` : monthNum;\r\n    const dateStr = dateNum < 10 ? `0${dateNum}` : dateNum;\r\n    const numDate = `${yearStr}-${monthStr}-${dateStr}`;\r\n    const otherNumDate = `${yearStr}${monthStr}${dateStr}`;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const article = await readArticle(otherNumDate);\r\n\r\n            // 지금 이 글에 대하여...\r\n            setSharability(article.is_sharable); // 공유가능함?\r\n            setEmotion(article.emotion); // 감정은?\r\n            setIsPrivate(!article.is_shared); // 공유여부는?\r\n            setContent(article.text); // 내용은?\r\n        };\r\n\r\n        try {\r\n            fetchData();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\"Error: 글 정보를 제대로 받아오지 못하였습니다!\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const article = await updateEmotion(otherNumDate, emotion);\r\n        };\r\n        try {\r\n            fetchData();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\r\n                \"Warning: 이모지 업데이트가 안됩니다! AI가 분석한 당신의 감정을 회피하지 마십시오.\"\r\n            );\r\n        }\r\n    }, [emotion]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <DiaryListDropdown\r\n                    emotionFilter={emotion}\r\n                    setEmotionFilter={setEmotion}\r\n                    isNoAll\r\n                />\r\n                <IconButton\r\n                    onClick={(e) => {\r\n                        if (!sharability) {\r\n                            alert(\r\n                                \"비방/욕설이 포함되어 있어 공유할 수 없습니다!\"\r\n                            );\r\n                        } else {\r\n                            setWithAnony(!withAnony);\r\n                        }\r\n                    }}\r\n                >\r\n                    {withAnony ? <LockIcon /> : <LockOpenIcon />}\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: 530,\r\n                        overflow: \"scroll\",\r\n                        position: \"relative\",\r\n                        p: 4,\r\n                    }}\r\n                    elevation={5}\r\n                >\r\n                    <Typography variant=\"h4\">{`${yearStr}년 ${monthNum}월 ${dateNum}일`}</Typography>\r\n                    {content && (\r\n                        <ReadonlyEditor content={content} id={numDate} />\r\n                    )}\r\n                </Paper>\r\n            </Grid>\r\n            <Grid\r\n                item\r\n                xs={12}\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                }}\r\n            >\r\n                <DiaryAfterButtons />\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default DiaryDetails;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\Main.jsx",["179","180","181","182","183","184"],"import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\n\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport Calendar from \"../components/Calendar\";\r\nimport MainChart from \"../components/MainChart\";\r\nimport MainDiaries from \"../components/MainDiaries\";\r\n\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\n\r\nconst Main = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12} md={6} lg={5}>\r\n                <Paper sx={{ width: \"100%\", height: \"100%\" }} elevation={3}>\r\n                    <Calendar />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6} lg={7}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        flexDirection: \"column\",\r\n                    }}\r\n                    elevation={3}\r\n                >\r\n                    <MainChart />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper\r\n                    sx={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        overflow: \"scroll\",\r\n                        p: 3,\r\n                        maxHeight: 200,\r\n                        backgroundColor: \"#eeeeee\",\r\n                    }}\r\n                    elevation={3}\r\n                >\r\n                    <MainDiaries />\r\n                </Paper>\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryWrite.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\FOF.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\DiaryList.jsx",["185"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\nimport ReadonlyEditor from \"../components/ReadonlyEditor\";\r\nimport DiaryListDropdown, {\r\n    UnicodeEmoMap,\r\n} from \"../components/DiaryListDropdown\";\r\nimport { readArticles } from \"../apis/article\";\r\nimport { dateAtom } from \"../recoils/diary\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst DiaryItem = ({ diary }) => {\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const navi = useNavigate();\r\n    const handleClick = () => {\r\n        setDate(new Date(diary.date));\r\n        navi(\"/diary/done\");\r\n    };\r\n\r\n    return (\r\n        <Paper\r\n            key={diary.date}\r\n            sx={{\r\n                m: 2,\r\n                minHeight: 100,\r\n                height: 140,\r\n                overflow: \"hidden\",\r\n                p: 2,\r\n                position: \"relative\",\r\n                \":hover\": {\r\n                    boxShadow: 6,\r\n                    cursor: \"pointer\",\r\n                },\r\n            }}\r\n            onClick={() => {\r\n                handleClick();\r\n            }}\r\n        >\r\n            <Typography variant=\"h6\">\r\n                {diary.date} {UnicodeEmoMap[diary.emotion]}\r\n            </Typography>\r\n            <ReadonlyEditor content={diary.text} id={diary.date} />\r\n            <Box\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    right: 0,\r\n                    top: 0,\r\n                    p: 3,\r\n                }}\r\n            >\r\n                {diary.is_shared ? <LockOpenIcon /> : <LockIcon />}\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst DiaryList = () => {\r\n    const [diaries, setDiaries] = useState([]);\r\n    const [immudiaries, setImmudiaries] = useState([]);\r\n    const [fromOld, setFromOld] = useState(false);\r\n    const [isPublic, setIsPublic] = useState(false);\r\n    const [emotionFilter, setEmotionFilter] = useState(\"all\");\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                console.log(\"글 받아오기\");\r\n                const articles = await readArticles();\r\n\r\n                if (!articles) {\r\n                    alert(\"잘못된 응답!\");\r\n                    return;\r\n                }\r\n                setImmudiaries(articles);\r\n                setDiaries(articles);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isPublic) {\r\n            if (fromOld) {\r\n                setDiaries(\r\n                    immudiaries.filter((diary) => diary.is_shared).reverse()\r\n                );\r\n            } else {\r\n                setDiaries(immudiaries.filter((diary) => diary.is_shared));\r\n            }\r\n        } else {\r\n            if (fromOld) {\r\n                setDiaries([...immudiaries].reverse());\r\n            } else {\r\n                setDiaries(immudiaries);\r\n            }\r\n        }\r\n    }, [isPublic, fromOld, immudiaries]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <Box>\r\n                    <DiaryListDropdown\r\n                        emotionFilter={emotionFilter}\r\n                        setEmotionFilter={setEmotionFilter}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={fromOld}\r\n                                onChange={() => {\r\n                                    setFromOld(!fromOld);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"오래된것부터보기\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={isPublic}\r\n                                onChange={() => {\r\n                                    setIsPublic(!isPublic);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"공개된 글\"\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n            {/* 이게 실제 아이템들 */}\r\n            <Grid item xs={12} sx={{ maxHeight: 630, overflow: \"scroll\" }}>\r\n                {diaries.map((diary) => {\r\n                    if (\r\n                        emotionFilter !== \"all\" &&\r\n                        UnicodeEmoMap[emotionFilter] !== diary.emotion\r\n                    ) {\r\n                        console.log(diary);\r\n                        console.log(UnicodeEmoMap);\r\n                        console.log(UnicodeEmoMap[emotionFilter]);\r\n                        console.log(diary.emotion);\r\n                        return <div key={diary.date}></div>;\r\n                    }\r\n                    return <DiaryItem key={diary.date} diary={diary} />;\r\n                })}\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default DiaryList;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\OpenBoard.jsx",["186"],"import React, { useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport BasicLayout from \"../layouts/BasicLayout\";\r\nimport { readBoard } from \"../apis/board\";\r\nimport DiaryListDropdown, {\r\n    UnicodeEmoMap,\r\n} from \"../components/DiaryListDropdown\";\r\n\r\nconst mockups = [\r\n    {\r\n        date: \"2021-11-15\",\r\n        text: \"안녕\",\r\n        emotion: \"\\u{1F601}\",\r\n        article_id: true,\r\n        symped: true,\r\n        num: 42,\r\n    },\r\n    {\r\n        date: \"2021-11-16\",\r\n        text: \"하세요\",\r\n        emotion: \"\\u{1F603}\",\r\n        article_id: true,\r\n        symped: true,\r\n        num: 79,\r\n    },\r\n    {\r\n        date: \"2021-11-17\",\r\n        text: \"으윽!\",\r\n        emotion: \"\\u{1F602}\",\r\n        article_id: false,\r\n        num: 10,\r\n    },\r\n    {\r\n        date: \"2021-11-18\",\r\n        text: \"잘자라!\",\r\n        emotion: \"\\u{1F604}\",\r\n        article_id: false,\r\n        symped: true,\r\n        num: 88,\r\n    },\r\n    {\r\n        date: \"2021-11-19\",\r\n        text: \"쿠쿠!\",\r\n        emotion: \"\\u{1F605}\",\r\n        article_id: false,\r\n        num: 12,\r\n    },\r\n];\r\n\r\nconst NumHeart = ({ symped, num }) => {\r\n    return (\r\n        <IconButton>\r\n            <Badge color=\"secondary\" badgeContent={num}>\r\n                {symped ? (\r\n                    <FavoriteBorderIcon\r\n                        sx={{ fontSize: 90 }}\r\n                        color=\"secondary\"\r\n                    />\r\n                ) : (\r\n                    <FavoriteBorderIcon sx={{ fontSize: 90 }} />\r\n                )}\r\n            </Badge>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nconst OpenBoard = () => {\r\n    const [diaries, setDiaries] = useState([]);\r\n    const [immuDiaries, setImmuDiaries] = useState([...mockups].reverse());\r\n    const [fromOld, setFromOld] = useState(false);\r\n    const [sympOrder, setSympOrder] = useState(false);\r\n    const [emotionFilter, setEmotionFilter] = useState(\"all\");\r\n    useEffect(() => {\r\n        console.log(\"글 받아오기\");\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await readBoard();\r\n                console.log(data);\r\n                setDiaries(data);\r\n                // setDiaries(data); 오류가 나서 임시로 막아뒀습니다 서버 연결 후 풀어봐야할듯..?\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (sympOrder) {\r\n            // if (fromOld) {\r\n            //     setDiaries(mockups.filter((diary) => diary));\r\n            // } else {\r\n            //     setDiaries(mockups.filter((diary) => diary).reverse());\r\n            // }\r\n        } else {\r\n            if (fromOld) {\r\n                setDiaries(immuDiaries);\r\n            } else {\r\n                setDiaries([...immuDiaries].reverse());\r\n            }\r\n        }\r\n    }, [sympOrder, fromOld, immuDiaries]);\r\n\r\n    return (\r\n        <BasicLayout>\r\n            <Grid item xs={12}>\r\n                <Box>\r\n                    <InputLabel id=\"emotion-select-label\">감정</InputLabel>\r\n                    <DiaryListDropdown\r\n                        emotionFilter={emotionFilter}\r\n                        setEmotionFilter={setEmotionFilter}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={fromOld}\r\n                                onChange={() => {\r\n                                    setFromOld(!fromOld);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"오래된것부터보기\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                value={sympOrder}\r\n                                onChange={() => {\r\n                                    setSympOrder(!sympOrder);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"공감 많은순\"\r\n                    />\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ maxHeight: 630, overflow: \"scroll\" }}>\r\n                {diaries.map((diary) => {\r\n                    if (\r\n                        emotionFilter !== \"all\" &&\r\n                        UnicodeEmoMap[emotionFilter] !== diary.emotion\r\n                    ) {\r\n                        // eslint-disable-next-line array-callback-return\r\n                        return;\r\n                    }\r\n                    return (\r\n                        <Paper\r\n                            key={diary.date}\r\n                            sx={{\r\n                                m: 2,\r\n                                minHeight: 100,\r\n                                p: 2,\r\n                                position: \"relative\",\r\n                                backgroundColor: \"secondary.dark\",\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                            }}\r\n                        >\r\n                            <NumHeart\r\n                                symped={diary.symped}\r\n                                num={diary.num ?? 0}\r\n                            />\r\n                            <Typography variant=\"body1\">\r\n                                {diary.text}\r\n                            </Typography>\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    right: 0,\r\n                                    top: 0,\r\n                                    p: 3,\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <Typography variant=\"h6\">\r\n                                    {diary.date}\r\n                                </Typography>\r\n\r\n                                <Typography\r\n                                    sx={{ textAlign: \"right\" }}\r\n                                    variant=\"h6\"\r\n                                >\r\n                                    {diary.emotion}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Paper>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </BasicLayout>\r\n    );\r\n};\r\n\r\nexport default OpenBoard;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SympDiaryList.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\pages\\SignUp.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\signin.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\article.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\signup.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\recoils\\userInfo.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\recoils\\diary.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfoButtons.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Calendar.jsx",["187"],"import React from \"react\";\r\nimport isWeekend from \"date-fns/isWeekend\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport StaticDatePicker from \"@mui/lab/StaticDatePicker\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { dateAtom } from \"../recoils/diary\";\r\n\r\nexport const Calendar = () => {\r\n    const [value, setValue] = useRecoilState(dateAtom);\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <StaticDatePicker\r\n                orientation=\"portrait\"\r\n                openTo=\"day\"\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                    setValue(newValue);\r\n                }}\r\n                renderInput={(params) => <TextField {...params} />}\r\n            />\r\n        </LocalizationProvider>\r\n    );\r\n};\r\n\r\nexport default Calendar;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\ReadonlyEditor.jsx",["188","189"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Plate,\r\n    createParagraphPlugin,\r\n    createBlockquotePlugin,\r\n    createHeadingPlugin,\r\n    createPlugins,\r\n    createPlateUI,\r\n} from \"@udecode/plate\";\r\n\r\nconst editableProps = {\r\n    placeholder: \"Type…\",\r\n    style: {\r\n        padding: 15,\r\n        backgroundColor: \"white\",\r\n        marginTop: 15,\r\n    },\r\n    readOnly: true,\r\n};\r\n\r\nconst ReadonlyEditor = ({ content, id }) => {\r\n    const plugins = createPlugins(\r\n        [\r\n            // elements\r\n            createParagraphPlugin(), // paragraph element\r\n            createBlockquotePlugin(), // blockquote element\r\n            createHeadingPlugin(), // heading elements\r\n        ],\r\n        {\r\n            components: createPlateUI(),\r\n        }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Plate\r\n                id={id ?? \"1\"}\r\n                editableProps={editableProps}\r\n                value={JSON.parse(content)}\r\n                plugins={plugins}\r\n            ></Plate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReadonlyEditor;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryAfterButtons.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfo.jsx",["190","191","192"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {\r\n    photo as ptatom,\r\n    nickname as nkatom,\r\n    password as pwatom,\r\n    passwordRetry as pwReatom,\r\n} from \"../recoils/userInfo\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { readUser } from \"../apis/user\";\r\nimport MyInfoImageButtons from \"./MyInfoImageButtons\";\r\n\r\nconst MyInfo = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [pw, setPw] = useRecoilState(pwatom);\r\n    const [pwRt, setPwRt] = useRecoilState(pwReatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const [email, setEmail] = useState(\"immutable@email.com\");\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const userinfo = await readUser();\r\n                if (userinfo.nickname) {\r\n                    setNickname(userinfo.nickname);\r\n                }\r\n                // setPhoto(userinfo.photo); 포토는 안받아도 똑같을 것\r\n                if (userinfo.email) {\r\n                    setEmail(userinfo.email);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                mb: 4,\r\n            }}\r\n        >\r\n            <Avatar\r\n                variant=\"rounded\"\r\n                alt=\"avatar profile\"\r\n                src={photo}\r\n                sx={{\r\n                    width: \"10vw\",\r\n                    height: \"10vw\",\r\n                    bgcolor: \"#b2cefe\",\r\n                    mb: 2,\r\n                }}\r\n            />\r\n            <MyInfoImageButtons />\r\n            <TextField\r\n                sx={{ m: 2 }}\r\n                label=\"닉네임\"\r\n                value={nickname}\r\n                onChange={(e) => setNickname(e.target.value)}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                sx={{ m: 2 }}\r\n                label=\"이메일\"\r\n                disabled\r\n                value={email}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                type=\"password\"\r\n                sx={{ m: 2 }}\r\n                label=\"비밀번호\"\r\n                variant=\"filled\"\r\n                value={pw}\r\n                onChange={() => setPw()}\r\n            />\r\n            <TextField\r\n                type=\"password\"\r\n                sx={{ m: 2 }}\r\n                label=\"비밀번호 확인\"\r\n                variant=\"filled\"\r\n                value={pwRt}\r\n                onChange={() => setPwRt()}\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyInfo;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MainDiaries.jsx",["193","194"],"import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { dateAtom } from \"../recoils/diary\";\r\nimport ReadonlyEditor from \"./ReadonlyEditor\";\r\n\r\nconst MainDiaries = () => {\r\n    const navi = useNavigate();\r\n    const [date, setDate] = useRecoilState(dateAtom);\r\n    const [fullDate, setFullDate] = useState(\"\");\r\n    const [fullDateString, setFullDateString] = useState(\"\");\r\n    const [contentData, setContentData] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // date 가 바뀌면\r\n        const yearStr = date.getFullYear();\r\n        const monthNum = date.getMonth() + 1;\r\n        const dateNum = date.getDate();\r\n        const monthStr = monthNum < 10 ? `0${monthNum}` : monthNum;\r\n        const dateStr = dateNum < 10 ? `0${dateNum}` : dateNum;\r\n        const numDate = `${yearStr}-${monthStr}-${dateStr}`;\r\n        const strDate = `${yearStr}년 ${monthNum}월 ${dateNum}일`;\r\n        setFullDateString(strDate); // 2020년 ~ 월 ~ 일\r\n        setFullDate(numDate); // 2020-11-11\r\n    }, [date]);\r\n\r\n    useEffect(() => {\r\n        \r\n        // keep localStorage\r\n        const next = localStorage.getItem(fullDate);\r\n        next && next !== contentData\r\n            ? setContentData(\"loading\")\r\n            : setContentData(\"\");\r\n        const id = setTimeout(() => {\r\n            setContentData(next);\r\n        }, 10);\r\n        return () => {\r\n            clearTimeout(id);\r\n        };\r\n    }, [fullDate]);\r\n\r\n    // useEffect(() => {}, [contentData]);\r\n\r\n    const goWriteDiary = () => {\r\n        navi(\"/diary/write\");\r\n    };\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\">{fullDateString}</Typography>\r\n            {contentData === \"loading\" ? (\r\n                <Box sx={{ height: 200 }}></Box>\r\n            ) : contentData ? (\r\n                <>\r\n                    <ReadonlyEditor content={contentData} id={fullDate} />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Typography sx={{ mt: 3, mb: 3, fontSize: 17 }}>\r\n                        일기가 없어요ㅠㅠ\r\n                    </Typography>\r\n                    <Button onClick={() => goWriteDiary()} variant=\"contained\">\r\n                        <Typography>{\">>\"} 일기 쓰러 가기</Typography>\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainDiaries;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Logo.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\BasicEditor.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryListDropdown.jsx",["195"],"import React from \"react\";\r\n\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\n/**\r\n * \"all\":\r\n    emotion = [\r\n        \"fear\",\r\n        \"surprise\",\r\n        \"anger\",\r\n        \"sadness\",\r\n        \"neutrality\",\r\n        \"happiness\",\r\n        \"disgust\",\r\n    ]\r\n    */\r\nexport const UnicodeEmoMap = {\r\n    neutrality: \"\\u{1F601}\",\r\n    fear: \"\\u{1F628}\",\r\n    happiness: \"\\u{1F603}\",\r\n    surprise: \"\\u{1F62E}\",\r\n    anger: \"\\u{1F620}\",\r\n    sadness: \"\\u{1F61E}\",\r\n    disgust: \"\\u{1F922}\",\r\n};\r\n\r\nconst DiaryListDropdown = ({ emotionFilter, setEmotionFilter, isNoAll }) => {\r\n    return (\r\n        <>\r\n            <InputLabel id=\"emotion-select-label\">감정</InputLabel>\r\n            <Select\r\n                labelId=\"emotion-select-label\"\r\n                id=\"emotion-select\"\r\n                value={emotionFilter}\r\n                onChange={(e) => setEmotionFilter(e.target.value)}\r\n                sx={{ minWidth: 200, mr: 2 }}\r\n            >\r\n                {!isNoAll && <MenuItem value={\"all\"}>All</MenuItem>}\r\n                {Object.keys(UnicodeEmoMap).map((emoKey) => {\r\n                    <MenuItem key={emoKey} value={emoKey}>\r\n                        {`${UnicodeEmoMap[emoKey]} ${emoKey}`}\r\n                    </MenuItem>;\r\n                })}\r\n            </Select>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DiaryListDropdown;","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MainChart.jsx",["196","197","198"],"import React, { PureComponent } from 'react';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n// import { IconName } from \"react/icons/FaReg\"\r\n\r\n// import CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n// const MainChart = () => {\r\n//     return (\r\n//         <>\r\n//             ...main chart loading...\r\n//             <CircularProgress />\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MainChart;\r\n\r\n\r\nconst data = [\r\n    {\r\n    name: '\\u{1F628}', uv: 'FaRegTired', pv: 2400, count: 3,\r\n    },\r\n    {\r\n    name: '\\u{1F62E}', uv: 'FaRegSurprise', pv: 1398, count: 4,\r\n    },\r\n    {\r\n    name: '\\u{1F620}', uv: 'FaRegAngry', pv: 9800, count: 6,\r\n    },\r\n    {\r\n    name: '\\u{1F61E}', uv: 'FaRegSadTear', pv: 3908, count: 2,\r\n    },\r\n    {\r\n    name: \"\\u{1F601}\", uv: 'FaRegMehBlank', pv: 4800, count: 1,\r\n    },\r\n    {\r\n    name: '\\u{1F603}', uv: 'FaRegLaughBeam', pv: 3800, count: 8,\r\n    },\r\n    {\r\n    name: '\\u{1F922}', uv: 'FaRegFrown', pv: 4300, count: 3,\r\n    },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n\r\n    render() {\r\n    return (\r\n        <BarChart\r\n            width={480}\r\n            height={350}\r\n            data={data}\r\n            barSize={35}\r\n            margin={{\r\n            top: 5,\r\n            right: 30,\r\n            // left: 10,\r\n            bottom: 5,\r\n            }}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis dataKey=\"count\" interval={0} />\r\n            <Tooltip />\r\n            <Bar dataKey=\"count\" fill=\"#b56dca\" />\r\n        </BarChart>\r\n    );\r\n    }\r\n}\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryDateInput.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\DiaryWriteButtons.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\layouts\\BasicLayout.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\getUrl.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\board.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\apis\\user.js",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\AppHeader.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\Sidebar.jsx",["199"],"import React, { useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport { Typography } from \"@mui/material\";\r\nimport MyInfoButtons from \"./MeButtons\";\r\nimport { readUser } from \"../apis/user\";\r\n\r\nconst pagesInfo = [\r\n    {\r\n        text: \"일기 쓰기\",\r\n        url: \"/diary/write\",\r\n        color: \"#70555B\",\r\n        backColor: \"#F0B7C2\",\r\n    },\r\n    {\r\n        text: \"목록\",\r\n        url: \"/diary\",\r\n    },\r\n    {\r\n        text: \"공감한 게시글\",\r\n        url: \"/diary/symp\",\r\n    },\r\n    {\r\n        text: \"열린게시판\",\r\n        url: \"/diary/opened\",\r\n    },\r\n];\r\n\r\nconst Sidebar = () => {\r\n    const navi = useNavigate();\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const naviHandlerFunc = (path) => {\r\n        return () => {\r\n            navi(path);\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const userInfo = await readUser();\r\n                const n = userInfo.nickname;\r\n                const p = userInfo.photo;\r\n                if (n && p) {\r\n                    setNickname(n);\r\n                    setPhoto(\r\n                        `${process.env.PUBLIC_URL}/images/default-profile.png\"`\r\n                    );\r\n                } else {\r\n                    alert(\"잘못된 접근!\");\r\n                    navi(\"/signin\");\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    height: 300,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                    mt: 2,\r\n                }}\r\n            >\r\n                <Avatar\r\n                    variant=\"rounded\"\r\n                    alt=\"avatar profile\"\r\n                    src={photo}\r\n                    sx={{\r\n                        width: \"60%\",\r\n                        maxWidth: 200,\r\n                        height: \"auto\",\r\n                        bgcolor: \"#b2cefe\",\r\n                    }}\r\n                />\r\n                <Typography sx={{ mt: 3, textAlign: \"center\" }} variant=\"h4\">\r\n                    {nickname || \"...\"}\r\n                </Typography>\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-evenly\",\r\n                    alignItems: \"center\",\r\n                    mb: 4,\r\n                }}\r\n            >\r\n                <MyInfoButtons />\r\n            </Box>\r\n\r\n            <List>\r\n                {pagesInfo.map((pInfo) => {\r\n                    return (\r\n                        <ListItem key={pInfo.text} disablePadding>\r\n                            <ListItemButton\r\n                                onClick={naviHandlerFunc(pInfo.url)}\r\n                                sx={\r\n                                    pInfo.color\r\n                                        ? {\r\n                                                color: pInfo.color,\r\n                                                backgroundColor: pInfo.backColor,\r\n                                            }\r\n                                        : undefined\r\n                                }\r\n                            >\r\n                                <ListItemText primary={pInfo.text} />\r\n                            </ListItemButton>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MyInfoImageButtons.jsx",["200","201","202","203"],"import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom } from \"../recoils/userInfo\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { deleteUserImage, updateUserImage } from \"../apis/user\";\r\n\r\nconst MyInfoImageButtons = () => {\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n\r\n    const updateImage = async () => {\r\n        try {\r\n            const res = await updateUserImage();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\"이미지 수정 안됨!\");\r\n        }\r\n    };\r\n\r\n    const deleteImage = async () => {\r\n        try {\r\n            const res = await deleteUserImage();\r\n        } catch (e) {\r\n            console.log(e);\r\n            alert(\"이미지 삭제 안됨!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: \"flex\", m: 2 }}>\r\n            <Button\r\n                sx={{ mr: 1 }}\r\n                onClick={() => updateImage()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>이미지 업데이트</Typography>\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => deleteImage()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>이미지 삭제</Typography>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyInfoImageButtons;\r\n","C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\BasicEditorToolbar.jsx",[],"C:\\Users\\ghdus\\OneDrive\\바탕 화면\\team-project\\nlp-project-team2\\frontend\\src\\components\\MeButtons.jsx",["204","205","206","207"],"import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { photo as ptatom, nickname as nkatom } from \"../recoils/userInfo\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst MyInfoButtons = () => {\r\n    const [nickname, setNickname] = useRecoilState(nkatom);\r\n    const [photo, setPhoto] = useRecoilState(ptatom);\r\n    const navi = useNavigate();\r\n    const logout = () => {\r\n        // 로그아웃 없는데요?ㅠㅠ\r\n        console.log(\"로그아웃되었습니다.\");\r\n        navi(\"/signin\");\r\n    };\r\n\r\n    const toMyInfo = () => {\r\n        console.log(\"내정보로\");\r\n        navi(\"/me\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                sx={{ mr: 1 }}\r\n                onClick={() => toMyInfo()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>내 정보</Typography>\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => logout()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n            >\r\n                <Typography>로그아웃</Typography>\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyInfoButtons;\r\n",{"ruleId":"208","severity":1,"message":"209","line":20,"column":12,"nodeType":"210","messageId":"211","endLine":20,"endColumn":20},{"ruleId":"208","severity":1,"message":"212","line":21,"column":12,"nodeType":"210","messageId":"211","endLine":21,"endColumn":17},{"ruleId":"208","severity":1,"message":"213","line":28,"column":18,"nodeType":"210","messageId":"211","endLine":28,"endColumn":25},{"ruleId":"208","severity":1,"message":"214","line":32,"column":12,"nodeType":"210","messageId":"211","endLine":32,"endColumn":21},{"ruleId":"215","severity":1,"message":"216","line":60,"column":8,"nodeType":"217","endLine":60,"endColumn":10,"suggestions":"218"},{"ruleId":"208","severity":1,"message":"219","line":64,"column":19,"nodeType":"210","messageId":"211","endLine":64,"endColumn":26},{"ruleId":"215","severity":1,"message":"220","line":74,"column":8,"nodeType":"217","endLine":74,"endColumn":17,"suggestions":"221"},{"ruleId":"208","severity":1,"message":"222","line":1,"column":17,"nodeType":"210","messageId":"211","endLine":1,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":16,"column":12,"nodeType":"210","messageId":"211","endLine":16,"endColumn":20},{"ruleId":"208","severity":1,"message":"223","line":16,"column":22,"nodeType":"210","messageId":"211","endLine":16,"endColumn":33},{"ruleId":"208","severity":1,"message":"212","line":17,"column":12,"nodeType":"210","messageId":"211","endLine":17,"endColumn":17},{"ruleId":"208","severity":1,"message":"224","line":17,"column":19,"nodeType":"210","messageId":"211","endLine":17,"endColumn":27},{"ruleId":"208","severity":1,"message":"225","line":18,"column":11,"nodeType":"210","messageId":"211","endLine":18,"endColumn":19},{"ruleId":"208","severity":1,"message":"226","line":21,"column":12,"nodeType":"210","messageId":"211","endLine":21,"endColumn":16},{"ruleId":"208","severity":1,"message":"227","line":78,"column":25,"nodeType":"210","messageId":"211","endLine":78,"endColumn":39},{"ruleId":"208","severity":1,"message":"228","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":17},{"ruleId":"208","severity":1,"message":"222","line":1,"column":17,"nodeType":"210","messageId":"211","endLine":1,"endColumn":26},{"ruleId":"208","severity":1,"message":"229","line":1,"column":28,"nodeType":"210","messageId":"211","endLine":1,"endColumn":36},{"ruleId":"208","severity":1,"message":"230","line":4,"column":8,"nodeType":"210","messageId":"211","endLine":4,"endColumn":14},{"ruleId":"208","severity":1,"message":"224","line":20,"column":19,"nodeType":"210","messageId":"211","endLine":20,"endColumn":27},{"ruleId":"215","severity":1,"message":"231","line":39,"column":8,"nodeType":"217","endLine":39,"endColumn":10,"suggestions":"232"},{"ruleId":"208","severity":1,"message":"213","line":12,"column":18,"nodeType":"210","messageId":"211","endLine":12,"endColumn":25},{"ruleId":"215","severity":1,"message":"233","line":43,"column":8,"nodeType":"217","endLine":43,"endColumn":18,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":41,"column":58,"nodeType":"237","messageId":"238","endLine":41,"endColumn":60},{"ruleId":"208","severity":1,"message":"239","line":2,"column":25,"nodeType":"210","messageId":"211","endLine":2,"endColumn":29},{"ruleId":"208","severity":1,"message":"240","line":2,"column":69,"nodeType":"210","messageId":"211","endLine":2,"endColumn":75},{"ruleId":"208","severity":1,"message":"241","line":2,"column":77,"nodeType":"210","messageId":"211","endLine":2,"endColumn":96},{"ruleId":"215","severity":1,"message":"242","line":67,"column":8,"nodeType":"217","endLine":67,"endColumn":10,"suggestions":"243"},{"ruleId":"208","severity":1,"message":"212","line":10,"column":12,"nodeType":"210","messageId":"211","endLine":10,"endColumn":17},{"ruleId":"208","severity":1,"message":"224","line":10,"column":19,"nodeType":"210","messageId":"211","endLine":10,"endColumn":27},{"ruleId":"208","severity":1,"message":"244","line":14,"column":19,"nodeType":"210","messageId":"211","endLine":14,"endColumn":22},{"ruleId":"208","severity":1,"message":"244","line":23,"column":19,"nodeType":"210","messageId":"211","endLine":23,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":9,"column":12,"nodeType":"210","messageId":"211","endLine":9,"endColumn":20},{"ruleId":"208","severity":1,"message":"223","line":9,"column":22,"nodeType":"210","messageId":"211","endLine":9,"endColumn":33},{"ruleId":"208","severity":1,"message":"212","line":10,"column":12,"nodeType":"210","messageId":"211","endLine":10,"endColumn":17},{"ruleId":"208","severity":1,"message":"224","line":10,"column":19,"nodeType":"210","messageId":"211","endLine":10,"endColumn":27},"no-unused-vars","'nickname' is assigned a value but never used.","Identifier","unusedVar","'photo' is assigned a value but never used.","'setDate' is assigned a value but never used.","'isPrivate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'otherNumDate', 'setEmotion', 'setIsPrivate', and 'setSharability'. Either include them or remove the dependency array.","ArrayExpression",["245"],"'article' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'otherNumDate'. Either include it or remove the dependency array.",["246"],"'useEffect' is defined but never used.","'setNickname' is assigned a value but never used.","'setPhoto' is assigned a value but never used.","'navigate' is assigned a value but never used.","'date' is assigned a value but never used.","'setImmuDiaries' is assigned a value but never used.","'isWeekend' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'setNickname'. Either include it or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'contentData'. Either include it or remove the dependency array.",["248"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Cell' is defined but never used.","'Legend' is defined but never used.","'ResponsiveContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'navi', 'setNickname', and 'setPhoto'. Either include them or remove the dependency array.",["249"],"'res' is assigned a value but never used.",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [otherNumDate, setEmotion, setIsPrivate, setSharability]",{"range":"260","text":"261"},"Update the dependencies array to be: [emotion, otherNumDate]",{"range":"262","text":"263"},"Update the dependencies array to be: [setNickname]",{"range":"264","text":"265"},"Update the dependencies array to be: [contentData, fullDate]",{"range":"266","text":"267"},"Update the dependencies array to be: [navi, setNickname, setPhoto]",{"range":"268","text":"269"},[2153,2155],"[otherNumDate, setEmotion, setIsPrivate, setSharability]",[2528,2537],"[emotion, otherNumDate]",[1357,1359],"[setNickname]",[1614,1624],"[contentData, fullDate]",[1931,1933],"[navi, setNickname, setPhoto]"]
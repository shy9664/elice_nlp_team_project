{"version":3,"file":"index.es.js","sources":["../src/transforms/setIndent.ts","../src/transforms/indent.ts","../src/transforms/outdent.ts","../src/onKeyDownIndent.ts","../src/withIndent.ts","../src/createIndentPlugin.ts"],"sourcesContent":["import {\n  AnyObject,\n  EditorNodesOptions,\n  getNodes,\n  getPluginInjectProps,\n  PlateEditor,\n  setNodes,\n  UnhangRangeOptions,\n} from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { KEY_INDENT } from '../createIndentPlugin';\n\nexport interface SetIndentOptions {\n  /**\n   * 1 to indent\n   * -1 to outdent\n   * @default 1\n   */\n  offset?: number;\n\n  /**\n   * getNodes options\n   */\n  getNodesOptions?: EditorNodesOptions & UnhangRangeOptions;\n\n  /**\n   * Set other props than the indent one.\n   * These will be unset if indent = 0.\n   */\n  setNodesProps?: ({ indent }: { indent: number }) => AnyObject;\n\n  /**\n   * Nodes props to unset when indent = 0.\n   */\n  unsetNodesProps?: string[];\n}\n\n/**\n * Add offset to the indentation of the selected blocks.\n */\nexport const setIndent = (\n  editor: PlateEditor,\n  {\n    offset = 1,\n    getNodesOptions,\n    setNodesProps,\n    unsetNodesProps = [],\n  }: SetIndentOptions\n) => {\n  const { nodeKey } = getPluginInjectProps(editor, KEY_INDENT);\n\n  const nodes = Array.from(\n    getNodes(editor, {\n      block: true,\n      ...getNodesOptions,\n    })\n  );\n\n  nodes.forEach(([node, path]) => {\n    const blockIndent = node[nodeKey!] ?? 0;\n    const newIndent = blockIndent + offset;\n\n    const props = setNodesProps?.({ indent: newIndent }) ?? {};\n\n    if (newIndent <= 0) {\n      Transforms.unsetNodes(editor, [nodeKey!, ...unsetNodesProps], {\n        at: path,\n      });\n    } else {\n      setNodes(editor, { [nodeKey!]: newIndent, ...props }, { at: path });\n    }\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indent = (editor: PlateEditor, options?: SetIndentOptions) => {\n  setIndent(editor, { offset: 1, ...options });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdent = (editor: PlateEditor, options?: SetIndentOptions) => {\n  setIndent(editor, { offset: -1, ...options });\n};\n","import { KeyboardHandler } from '@udecode/plate-core';\nimport { indent, outdent } from './transforms/index';\n\nexport const onKeyDownIndent: KeyboardHandler = (editor) => (e) => {\n  if (e.key === 'Tab' && !e.altKey && !e.ctrlKey && !e.metaKey) {\n    e.preventDefault();\n    e.shiftKey ? outdent(editor) : indent(editor);\n  }\n};\n","import { setNodes, TElement, WithOverride } from '@udecode/plate-core';\nimport { Transforms } from 'slate';\nimport { IndentPlugin } from './types';\n\n/**\n * - `node.indent` can not exceed `indentMax`\n * - `node.indent` is unset if `node.type` is not in `types`\n */\nexport const withIndent: WithOverride<{}, IndentPlugin> = (\n  editor,\n  { inject: { props: { validTypes } = {} }, options: { indentMax } }\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    const element = node as TElement;\n    const { type } = element;\n\n    if (type) {\n      if (validTypes!.includes(type)) {\n        if (indentMax && element.indent && element.indent > indentMax) {\n          setNodes(editor, { indent: indentMax }, { at: path });\n          return;\n        }\n      } else if (element.indent) {\n        Transforms.unsetNodes(editor, 'indent', { at: path });\n        return;\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\nimport { onKeyDownIndent } from './onKeyDownIndent';\nimport { IndentPlugin } from './types';\nimport { withIndent } from './withIndent';\n\nexport const KEY_INDENT = 'indent';\n\nexport const createIndentPlugin = createPluginFactory<IndentPlugin>({\n  key: KEY_INDENT,\n  withOverrides: withIndent,\n  handlers: {\n    onKeyDown: onKeyDownIndent,\n  },\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_INDENT,\n        styleKey: 'marginLeft',\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n        transformNodeValue: ({ nodeValue }) => {\n          return nodeValue * offset! + unit!;\n        },\n      },\n    },\n  }),\n});\n"],"names":["setIndent","editor","offset","getNodesOptions","setNodesProps","unsetNodesProps","nodeKey","getPluginInjectProps","KEY_INDENT","nodes","Array","from","getNodes","block","forEach","node","path","blockIndent","newIndent","props","indent","Transforms","unsetNodes","at","setNodes","options","outdent","onKeyDownIndent","e","key","altKey","ctrlKey","metaKey","preventDefault","shiftKey","withIndent","inject","validTypes","indentMax","normalizeNode","element","type","includes","createIndentPlugin","createPluginFactory","withOverrides","handlers","onKeyDown","unit","then","styleKey","getPluginType","ELEMENT_DEFAULT","transformNodeValue","nodeValue"],"mappings":"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"}
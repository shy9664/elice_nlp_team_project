import { PlateEditor } from '../types/PlateEditor';
import { PlatePlugin } from '../types/plugins/PlatePlugin';
import { TEditor } from '../types/slate/TEditor';
export interface WithPlateOptions<T = {}> {
    /**
     * A unique id used to store the editor state by id.
     * Required if rendering multiple `Plate`. Optional otherwise.
     * Default is `'main'`.
     */
    id?: string | null;
    /**
     * Plate plugins.
     */
    plugins?: PlatePlugin<T>[];
    /**
     * If `true`, disable all the core plugins.
     * If an object, disable the core plugin properties that are `true` in the object.
     */
    disableCorePlugins?: {
        deserializeAst?: boolean;
        deserializeHtml?: boolean;
        eventEditor?: boolean;
        inlineVoid?: boolean;
        insertData?: boolean;
        history?: boolean;
        react?: boolean;
    } | boolean;
}
/**
 * Apply `withInlineVoid` and all plate plugins `withOverrides`.
 * Overrides:
 * - `id`: id of the editor.
 * - `key`: random key for the <Slate> component so each time the editor is created, the component resets.
 * - `options`: Plate options
 */
export declare const withPlate: <T = {}>(e: TEditor, { id, plugins, disableCorePlugins }?: WithPlateOptions<T>) => PlateEditor<T>;
//# sourceMappingURL=withPlate.d.ts.map
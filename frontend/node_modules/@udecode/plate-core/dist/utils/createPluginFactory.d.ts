import { OverrideByKey } from '../types/OverrideByKey';
import { PlatePlugin } from '../types/plugins/PlatePlugin';
import { NoInfer } from '../types/utility/NoInfer';
/**
 * Create plugin factory with a default plugin.
 * - first param is the default plugin.
 * - the only required property of the default plugin is `key`.
 * - returns a plugin factory:
 *   - first param `override` can be used to (deeply) override the default plugin.
 *   - second param `overrideByKey` can be used to (deeply) override by key a nested plugin (in plugin.plugins).
 */
export declare const createPluginFactory: <P = {}>(defaultPlugin: PlatePlugin<{}, NoInfer<P>>) => <T = {}>(override?: Partial<PlatePlugin<T, NoInfer<P>>> | undefined, overrideByKey?: OverrideByKey<T>) => PlatePlugin<T, NoInfer<P>>;
//# sourceMappingURL=createPluginFactory.d.ts.map
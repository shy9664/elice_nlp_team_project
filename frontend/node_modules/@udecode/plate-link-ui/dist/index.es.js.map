{"version":3,"file":"index.es.js","sources":["../src/LinkElement/LinkElement.styles.ts","../src/LinkElement/LinkElement.tsx","../src/LinkToolbarButton/LinkToolbarButton.tsx"],"sourcesContent":["import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\n\nexport const getLinkElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'LinkElement', ...props },\n    {\n      root: css`\n        color: #0078d4;\n        text-decoration: initial;\n\n        :hover,\n        :visited:hover {\n          color: #004578;\n          text-decoration: underline;\n        }\n\n        :visited {\n          color: #0078d4;\n        }\n      `,\n    }\n  );\n","import React from 'react';\nimport { LinkNodeData } from '@udecode/plate-link';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getLinkElementStyles } from './LinkElement.styles';\n\nexport const LinkElement = (props: StyledElementProps<LinkNodeData>) => {\n  const { attributes, children, nodeProps, element } = props;\n\n  const rootProps = getRootProps(props);\n  const { root } = getLinkElementStyles(props);\n\n  return (\n    <a\n      {...attributes}\n      href={element.url}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </a>\n  );\n};\n","import React from 'react';\nimport {\n  getPluginType,\n  someNode,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { ELEMENT_LINK, getAndUpsertLink } from '@udecode/plate-link';\nimport { ToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport interface LinkToolbarButtonProps extends ToolbarButtonProps {\n  /**\n   * Default onMouseDown is getting the link url by calling this promise before inserting the image.\n   */\n  getLinkUrl?: (prevUrl: string | null) => Promise<string | null>;\n}\n\nexport const LinkToolbarButton = ({\n  getLinkUrl,\n  ...props\n}: LinkToolbarButtonProps) => {\n  const editor = usePlateEditorState()!;\n\n  const type = getPluginType(editor, ELEMENT_LINK);\n  const isLink = !!editor?.selection && someNode(editor, { match: { type } });\n\n  return (\n    <ToolbarButton\n      active={isLink}\n      onMouseDown={async (event) => {\n        if (!editor) return;\n\n        event.preventDefault();\n        getAndUpsertLink(editor, getLinkUrl);\n      }}\n      {...props}\n    />\n  );\n};\n"],"names":["getLinkElementStyles","props","createStyles","prefixClassNames","root","css","LinkElement","attributes","children","nodeProps","element","rootProps","getRootProps","url","className","LinkToolbarButton","getLinkUrl","editor","usePlateEditorState","type","getPluginType","ELEMENT_LINK","isLink","selection","someNode","match","event","preventDefault","getAndUpsertLink"],"mappings":";;;;;;;MAMaA,oBAAoB,GAAIC,KAAD,IAClCC,YAAY,CACV;AAAEC,EAAAA,gBAAgB,EAAE,aAApB;AAAmC,KAAGF;AAAtC,CADU,EAEV;AACEG,EAAAA,IAAI,EAAEC,GAAF;AADN,CAFU;;;;;;;;;;;;;;;;;;;;MCCDC,WAAW,GAAIL,KAAD,IAA6C;AACtE,QAAM;AAAEM,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAA+CT,KAArD;AAEA,QAAMU,SAAS,GAAGC,YAAY,CAACX,KAAD,CAA9B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWJ,oBAAoB,CAACC,KAAD,CAArC;AAEA,sBACE,2CACMM,UADN;AAEE,IAAA,IAAI,EAAEG,OAAO,CAACG,GAFhB;AAIE,IAAA,SAAS,EAAET,IAAI,CAACU;AAJlB,KAKMH,SALN,EAMMF,SANN;AAAA,WAGOL,IAAI,CAACC;AAHZ,MAQGG,QARH,CADF;AAYD;;;;;;;MCVYO,iBAAiB,GAAG,CAAC;AAChCC,EAAAA,UADgC;AAEhC,KAAGf;AAF6B,CAAD,KAGH;AAC5B,QAAMgB,MAAM,GAAGC,mBAAmB,EAAlC;AAEA,QAAMC,IAAI,GAAGC,aAAa,CAACH,MAAD,EAASI,YAAT,CAA1B;AACA,QAAMC,MAAM,GAAG,CAAC,EAACL,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEM,SAAT,CAAD,IAAuBC,QAAQ,CAACP,MAAD,EAAS;AAAEQ,IAAAA,KAAK,EAAE;AAAEN,MAAAA;AAAF;AAAT,GAAT,CAA9C;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAEG,MADV;AAEE,IAAA,WAAW,EAAE,MAAOI,KAAP,IAAiB;AAC5B,UAAI,CAACT,MAAL,EAAa;AAEbS,MAAAA,KAAK,CAACC,cAAN;AACAC,MAAAA,gBAAgB,CAACX,MAAD,EAASD,UAAT,CAAhB;AACD;AAPH,KAQMf,KARN,EADF;AAYD;;;;"}
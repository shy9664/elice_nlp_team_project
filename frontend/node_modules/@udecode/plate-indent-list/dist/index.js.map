{"version":3,"file":"index.js","sources":["../../../../node_modules/clsx/dist/clsx.m.js","../src/types.ts","../src/injectIndentListComponent.tsx","../src/queries/getNextIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/transforms/normalizeListStart.ts","../src/withIndentList.ts","../src/createIndentListPlugin.ts","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/toggleIndentList.ts"],"sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export enum ListStyleType {\n  // The marker is traditional Armenian numbering\n  Armenian = 'armenian',\n\n  // The marker is a circle\n  Circle = 'circle',\n\n  // The marker is plain ideographic numbers\n  CjkIdeographic = 'cjk-ideographic',\n\n  // The marker is a number. This is default for <ol>\n  Decimal = 'decimal',\n\n  // The marker is a number with leading zeros (01, 02, 03, etc.)\n  DecimalLeadingZero = 'decimal-leading-zero',\n\n  // The marker is a filled circle. This is default for <ul>\n  Disc = 'disc',\n\n  // The marker is traditional Georgian numbering\n  Georgian = 'georgian',\n\n  // The marker is traditional Hebrew numbering\n  Hebrew = 'hebrew',\n\n  // The marker is traditional Hiragana numbering\n  Hiragana = 'hiragana',\n\n  // The marker is traditional Hiragana iroha numbering\n  HiraganaIroha = 'hiragana-iroha',\n\n  // The marker is traditional Katakana numbering\n  Katakana = 'katakana',\n\n  // The marker is traditional Katakana iroha numbering\n  KatakanaIroha = 'katakana-iroha',\n\n  // The marker is lower-alpha (a, b, c, d, e, etc.)\n  LowerAlpha = 'lower-alpha',\n\n  // The marker is lower-greek\n  LowerGreek = 'lower-greek',\n\n  // The marker is lower-latin (a, b, c, d, e, etc.)\n  LowerLatin = 'lower-latin',\n\n  // The marker is lower-roman (i, ii, iii, iv, v, etc.)\n  LowerRoman = 'lower-roman',\n\n  // No marker is shown\n  None = 'none',\n\n  // The marker is a square\n  Square = 'square',\n\n  // The marker is upper-alpha (A, B, C, D, E, etc.)\n  UpperAlpha = 'upper-alpha',\n\n  // The marker is upper-latin (A, B, C, D, E, etc.)\n  UpperLatin = 'upper-latin',\n\n  // The marker is upper-roman (I, II, III, IV, V, etc.)\n  UpperRoman = 'upper-roman',\n\n  // Sets this property to its default value. Read about initial\n  Initial = 'initial',\n\n  // Inherits this property from its parent element. Read about inherit\n  Inherit = 'inherit',\n}\n","import React, { CSSProperties } from 'react';\nimport { InjectComponent } from '@udecode/plate-core';\nimport clsx from 'clsx';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\nimport { ListStyleType } from './types';\n\nexport const injectIndentListComponent: InjectComponent = (props) => {\n  const { element } = props;\n\n  if (element[KEY_LIST_STYLE_TYPE]) {\n    let className = clsx(\n      `slate-${KEY_LIST_STYLE_TYPE}-${element[KEY_LIST_STYLE_TYPE]}`\n    );\n    const style: CSSProperties = {\n      padding: 0,\n      margin: 0,\n      listStyleType: element[KEY_LIST_STYLE_TYPE],\n    };\n\n    if (\n      [ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(\n        element[KEY_LIST_STYLE_TYPE]\n      )\n    ) {\n      className = clsx(className, 'slate-list-bullet');\n\n      return ({ children }) => (\n        <ul style={style} className={className}>\n          <li>{children}</li>\n        </ul>\n      );\n    }\n\n    className = clsx(className, 'slate-list-number');\n\n    return ({ children }) => (\n      <ol style={style} className={className} start={element[KEY_LIST_START]}>\n        <li>{children}</li>\n      </ol>\n    );\n  }\n};\n","import { getNode, PlateEditor } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { NodeEntry, Path } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport const getNextIndentList = (\n  editor: PlateEditor,\n  [node, path]: NodeEntry,\n  {\n    sameStyleType = true,\n  }: { sameIndent?: boolean; sameStyleType?: boolean } = {}\n): NodeEntry | undefined => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  let nextPath = Path.next(path);\n\n  while (true) {\n    const nextNode = getNode(editor, nextPath);\n\n    if (!nextNode || !nextNode[KEY_INDENT] || nextNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (nextNode[KEY_INDENT] === indent) {\n      if (sameStyleType && nextNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [nextNode, nextPath];\n    }\n\n    nextPath = Path.next(nextPath);\n  }\n};\n","import { getNode, getPreviousPath, PlateEditor } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { NodeEntry } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport const getPreviousIndentList = (\n  editor: PlateEditor,\n  [node, path]: NodeEntry,\n  {\n    sameStyleType = true,\n  }: { sameIndent?: boolean; sameStyleType?: boolean } = {}\n): NodeEntry | undefined => {\n  const indent = node[KEY_INDENT];\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  let prevPath = getPreviousPath(path);\n\n  while (true) {\n    if (!prevPath) return;\n\n    const prevNode = getNode(editor, prevPath);\n\n    if (!prevNode || !prevNode[KEY_INDENT] || prevNode[KEY_INDENT] < indent) {\n      return;\n    }\n\n    if (prevNode[KEY_INDENT] === indent) {\n      if (sameStyleType && prevNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {\n        return;\n      }\n\n      return [prevNode, prevPath];\n    }\n\n    prevPath = getPreviousPath(prevPath);\n  }\n};\n","import { PlateEditor, setNodes } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\n\nexport const normalizeListStart = (\n  editor: PlateEditor,\n  nodeEntry: NodeEntry\n) => {\n  const [node, path] = nodeEntry;\n  const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n  if (listStyleType) {\n    const prevNodeEntry = getPreviousIndentList(editor, nodeEntry);\n    if (!prevNodeEntry && node[KEY_LIST_START] > 1) {\n      setNodes(editor, { [KEY_LIST_START]: 1 }, { at: path });\n    }\n\n    const nextNodeEntry = getNextIndentList(editor, nodeEntry);\n    if (!nextNodeEntry) return;\n\n    const [nextNode, nextPath] = nextNodeEntry;\n\n    const listStart = node[KEY_LIST_START] ?? 1;\n    const nextListStart = nextNode[KEY_LIST_START] ?? 1;\n\n    if (nextListStart !== listStart + 1) {\n      setNodes(editor, { [KEY_LIST_START]: listStart + 1 }, { at: nextPath });\n      normalizeListStart(editor, [nextNode, nextPath]);\n    }\n  }\n};\n","import { getNode, unsetNodes, WithOverride } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { Node } from 'slate';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport { normalizeListStart } from './transforms/normalizeListStart';\nimport { KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\n\nexport const withIndentList: WithOverride = (editor) => {\n  const { apply, normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (node[KEY_LIST_STYLE_TYPE] && !node[KEY_INDENT]) {\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n    }\n\n    normalizeListStart(editor, [node, path]);\n\n    return normalizeNode([node, path]);\n  };\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: Node | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode(editor, path);\n    }\n\n    // FIXME: delete first list\n    // let nextNodeEntryBefore: any;\n    // if (\n    //   operation.type === 'merge_node' &&\n    //   operation.properties[KEY_LIST_STYLE_TYPE]\n    // ) {\n    //   const node = getNode(editor, path);\n    //\n    //   nextNodeEntryBefore = getNextIndentList(editor, [node as any, path]);\n    // }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if (properties[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n        if (!prevNodeEntry) {\n          normalizeListStart(editor, [node as any, path]);\n          return;\n        }\n\n        normalizeListStart(editor, prevNodeEntry);\n        // FIXME: delete first list\n        // if (nextNodeEntryBefore) {\n        //   normalizeListStart(editor,nextNodeEntryBefore);\n        // }\n      }\n    }\n\n    if (operation.type === 'set_node' && nodeBefore) {\n      const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];\n      const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE];\n\n      // Remove list style type\n      if (prevListStyleType && !listStyleType) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        const nextNodeEntry = getNextIndentList(editor, [node, path]);\n        if (!nextNodeEntry) return;\n\n        normalizeListStart(editor, nextNodeEntry);\n      }\n\n      // Update list style type\n      if (\n        (prevListStyleType || listStyleType) &&\n        prevListStyleType !== listStyleType\n      ) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- toggle ol\n         * - <1>-1-2 <- normalize\n         * - 1-2-3\n         */\n        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 1-<2>-3 <- toggle ul\n         * - 1-o-<3> <- normalize\n         * - 1-o-1\n         */\n        const nextNodeEntry = getNextIndentList(editor, [nodeBefore, path]);\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n\n      const prevIndent = operation.properties[KEY_INDENT];\n      const indent = operation.newProperties[KEY_INDENT];\n\n      // Update indent\n      if (prevIndent !== indent) {\n        const node = getNode(editor, path);\n        if (!node) return;\n\n        /**\n         * Case:\n         * - 1-<o>-1 <- indent\n         * - <1>-1o-1 <- normalize node before\n         * - 1-1o-2\n         */\n        let prevNodeEntry = getPreviousIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false,\n        });\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 11-<1>-11 <- indent\n         * - <11>-11-12 <- normalize prev node after\n         * - 11-12-13\n         */\n        prevNodeEntry = getPreviousIndentList(editor, [node, path], {\n          sameStyleType: false,\n        });\n        if (prevNodeEntry) {\n          normalizeListStart(editor, prevNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 11-<12>-13 <- outdent\n         * - 11-2-<13> <- normalize next node before\n         * - 11-2-11\n         */\n        let nextNodeEntry = getNextIndentList(editor, [nodeBefore, path], {\n          sameStyleType: false,\n        });\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n\n        /**\n         * Case:\n         * - 1-<1o>-2 <- outdent\n         * - 1-o-<2> <- normalize next node after\n         * - 1-o-1\n         */\n        nextNodeEntry = getNextIndentList(editor, [node, path], {\n          sameStyleType: false,\n        });\n        if (nextNodeEntry) {\n          normalizeListStart(editor, nextNodeEntry);\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\nexport const KEY_LIST_START = 'listStart';\n\nexport const createIndentListPlugin = createPluginFactory({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  withOverrides: withIndentList,\n});\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions extends SetIndentOptions {\n  listStyleType?: ListStyleType | string;\n}\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indentList = (\n  editor: PlateEditor,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { setIndent } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { IndentListOptions } from './indentList';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdentList = (\n  editor: PlateEditor,\n  options: IndentListOptions = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options,\n  });\n};\n","import {\n  findNode,\n  PlateEditor,\n  setNodes,\n  unsetNodes,\n} from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { indentList, IndentListOptions } from './indentList';\nimport { outdentList } from './outdentList';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const toggleIndentList = (\n  editor: PlateEditor,\n  options?: IndentListOptions\n) => {\n  const nodeEntry = findNode(editor, {\n    match: (n) => !!n[KEY_LIST_STYLE_TYPE],\n  });\n\n  if (!nodeEntry) {\n    indentList(editor, options);\n    return;\n  }\n\n  const [node, path] = nodeEntry;\n\n  if (node[KEY_LIST_STYLE_TYPE] && options?.listStyleType) {\n    if (node[KEY_LIST_STYLE_TYPE] === options?.listStyleType) {\n      outdentList(editor, options);\n      unsetNodes(editor, KEY_LIST_STYLE_TYPE);\n      return;\n    }\n\n    setNodes(\n      editor,\n      { [KEY_LIST_STYLE_TYPE]: options?.listStyleType },\n      { at: path }\n    );\n  }\n};\n"],"names":["ListStyleType","injectIndentListComponent","props","element","KEY_LIST_STYLE_TYPE","className","clsx","style","padding","margin","listStyleType","Disc","Circle","Square","includes","children","React","KEY_LIST_START","getNextIndentList","editor","node","path","sameStyleType","indent","KEY_INDENT","nextPath","Path","next","nextNode","getNode","getPreviousIndentList","prevPath","getPreviousPath","prevNode","normalizeListStart","nodeEntry","prevNodeEntry","setNodes","at","nextNodeEntry","listStart","nextListStart","withIndentList","apply","normalizeNode","unsetNodes","operation","nodeBefore","type","properties","prevListStyleType","newProperties","prevIndent","createIndentListPlugin","createPluginFactory","key","inject","belowComponent","withOverrides","indentList","options","setIndent","offset","setNodesProps","outdentList","unsetNodesProps","toggleIndentList","findNode","match","n"],"mappings":"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"}
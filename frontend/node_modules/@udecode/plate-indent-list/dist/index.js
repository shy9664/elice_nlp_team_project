'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCore = require('@udecode/plate-core');
var React = require('react');
var plateIndent = require('@udecode/plate-indent');
var slate = require('slate');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

function clsx () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x;
			}
		}
	}
	return str;
}

exports.ListStyleType = void 0;

(function (ListStyleType) {
  ListStyleType["Armenian"] = "armenian";
  ListStyleType["Circle"] = "circle";
  ListStyleType["CjkIdeographic"] = "cjk-ideographic";
  ListStyleType["Decimal"] = "decimal";
  ListStyleType["DecimalLeadingZero"] = "decimal-leading-zero";
  ListStyleType["Disc"] = "disc";
  ListStyleType["Georgian"] = "georgian";
  ListStyleType["Hebrew"] = "hebrew";
  ListStyleType["Hiragana"] = "hiragana";
  ListStyleType["HiraganaIroha"] = "hiragana-iroha";
  ListStyleType["Katakana"] = "katakana";
  ListStyleType["KatakanaIroha"] = "katakana-iroha";
  ListStyleType["LowerAlpha"] = "lower-alpha";
  ListStyleType["LowerGreek"] = "lower-greek";
  ListStyleType["LowerLatin"] = "lower-latin";
  ListStyleType["LowerRoman"] = "lower-roman";
  ListStyleType["None"] = "none";
  ListStyleType["Square"] = "square";
  ListStyleType["UpperAlpha"] = "upper-alpha";
  ListStyleType["UpperLatin"] = "upper-latin";
  ListStyleType["UpperRoman"] = "upper-roman";
  ListStyleType["Initial"] = "initial";
  ListStyleType["Inherit"] = "inherit";
})(exports.ListStyleType || (exports.ListStyleType = {}));

const injectIndentListComponent = props => {
  const {
    element
  } = props;

  if (element[KEY_LIST_STYLE_TYPE]) {
    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${element[KEY_LIST_STYLE_TYPE]}`);
    const style = {
      padding: 0,
      margin: 0,
      listStyleType: element[KEY_LIST_STYLE_TYPE]
    };

    if ([exports.ListStyleType.Disc, exports.ListStyleType.Circle, exports.ListStyleType.Square].includes(element[KEY_LIST_STYLE_TYPE])) {
      className = clsx(className, 'slate-list-bullet');
      return ({
        children
      }) => /*#__PURE__*/React__default['default'].createElement("ul", {
        style: style,
        className: className
      }, /*#__PURE__*/React__default['default'].createElement("li", null, children));
    }

    className = clsx(className, 'slate-list-number');
    return ({
      children
    }) => /*#__PURE__*/React__default['default'].createElement("ol", {
      style: style,
      className: className,
      start: element[KEY_LIST_START]
    }, /*#__PURE__*/React__default['default'].createElement("li", null, children));
  }
};

const getNextIndentList = (editor, [node, path], {
  sameStyleType = true
} = {}) => {
  const indent = node[plateIndent.KEY_INDENT];
  const listStyleType = node[KEY_LIST_STYLE_TYPE];
  let nextPath = slate.Path.next(path);

  while (true) {
    const nextNode = plateCore.getNode(editor, nextPath);

    if (!nextNode || !nextNode[plateIndent.KEY_INDENT] || nextNode[plateIndent.KEY_INDENT] < indent) {
      return;
    }

    if (nextNode[plateIndent.KEY_INDENT] === indent) {
      if (sameStyleType && nextNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {
        return;
      }

      return [nextNode, nextPath];
    }

    nextPath = slate.Path.next(nextPath);
  }
};

const getPreviousIndentList = (editor, [node, path], {
  sameStyleType = true
} = {}) => {
  const indent = node[plateIndent.KEY_INDENT];
  const listStyleType = node[KEY_LIST_STYLE_TYPE];
  let prevPath = plateCore.getPreviousPath(path);

  while (true) {
    if (!prevPath) return;
    const prevNode = plateCore.getNode(editor, prevPath);

    if (!prevNode || !prevNode[plateIndent.KEY_INDENT] || prevNode[plateIndent.KEY_INDENT] < indent) {
      return;
    }

    if (prevNode[plateIndent.KEY_INDENT] === indent) {
      if (sameStyleType && prevNode[KEY_LIST_STYLE_TYPE] !== listStyleType) {
        return;
      }

      return [prevNode, prevPath];
    }

    prevPath = plateCore.getPreviousPath(prevPath);
  }
};

const normalizeListStart = (editor, nodeEntry) => {
  const [node, path] = nodeEntry;
  const listStyleType = node[KEY_LIST_STYLE_TYPE];

  if (listStyleType) {
    var _node$KEY_LIST_START, _nextNode$KEY_LIST_ST;

    const prevNodeEntry = getPreviousIndentList(editor, nodeEntry);

    if (!prevNodeEntry && node[KEY_LIST_START] > 1) {
      plateCore.setNodes(editor, {
        [KEY_LIST_START]: 1
      }, {
        at: path
      });
    }

    const nextNodeEntry = getNextIndentList(editor, nodeEntry);
    if (!nextNodeEntry) return;
    const [nextNode, nextPath] = nextNodeEntry;
    const listStart = (_node$KEY_LIST_START = node[KEY_LIST_START]) !== null && _node$KEY_LIST_START !== void 0 ? _node$KEY_LIST_START : 1;
    const nextListStart = (_nextNode$KEY_LIST_ST = nextNode[KEY_LIST_START]) !== null && _nextNode$KEY_LIST_ST !== void 0 ? _nextNode$KEY_LIST_ST : 1;

    if (nextListStart !== listStart + 1) {
      plateCore.setNodes(editor, {
        [KEY_LIST_START]: listStart + 1
      }, {
        at: nextPath
      });
      normalizeListStart(editor, [nextNode, nextPath]);
    }
  }
};

const withIndentList = editor => {
  const {
    apply,
    normalizeNode
  } = editor;

  editor.normalizeNode = ([node, path]) => {
    if (node[KEY_LIST_STYLE_TYPE] && !node[plateIndent.KEY_INDENT]) {
      plateCore.unsetNodes(editor, KEY_LIST_STYLE_TYPE, {
        at: path
      });
    }

    normalizeListStart(editor, [node, path]);
    return normalizeNode([node, path]);
  };

  editor.apply = operation => {
    const {
      path
    } = operation;
    let nodeBefore = null;

    if (operation.type === 'set_node') {
      nodeBefore = plateCore.getNode(editor, path);
    } // FIXME: delete first list
    // let nextNodeEntryBefore: any;
    // if (
    //   operation.type === 'merge_node' &&
    //   operation.properties[KEY_LIST_STYLE_TYPE]
    // ) {
    //   const node = getNode(editor, path);
    //
    //   nextNodeEntryBefore = getNextIndentList(editor, [node as any, path]);
    // }


    apply(operation);

    if (operation.type === 'merge_node') {
      const {
        properties
      } = operation;

      if (properties[KEY_LIST_STYLE_TYPE]) {
        const node = plateCore.getNode(editor, path);
        if (!node) return;
        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);

        if (!prevNodeEntry) {
          normalizeListStart(editor, [node, path]);
          return;
        }

        normalizeListStart(editor, prevNodeEntry); // FIXME: delete first list
        // if (nextNodeEntryBefore) {
        //   normalizeListStart(editor,nextNodeEntryBefore);
        // }
      }
    }

    if (operation.type === 'set_node' && nodeBefore) {
      const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];
      const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE]; // Remove list style type

      if (prevListStyleType && !listStyleType) {
        const node = plateCore.getNode(editor, path);
        if (!node) return;
        const nextNodeEntry = getNextIndentList(editor, [node, path]);
        if (!nextNodeEntry) return;
        normalizeListStart(editor, nextNodeEntry);
      } // Update list style type


      if ((prevListStyleType || listStyleType) && prevListStyleType !== listStyleType) {
        const node = plateCore.getNode(editor, path);
        if (!node) return;
        /**
         * Case:
         * - 1-<o>-1 <- toggle ol
         * - <1>-1-2 <- normalize
         * - 1-2-3
         */

        const prevNodeEntry = getPreviousIndentList(editor, [node, path]);

        if (prevNodeEntry) {
          normalizeListStart(editor, prevNodeEntry);
        }
        /**
         * Case:
         * - 1-<2>-3 <- toggle ul
         * - 1-o-<3> <- normalize
         * - 1-o-1
         */


        const nextNodeEntry = getNextIndentList(editor, [nodeBefore, path]);

        if (nextNodeEntry) {
          normalizeListStart(editor, nextNodeEntry);
        }
      }

      const prevIndent = operation.properties[plateIndent.KEY_INDENT];
      const indent = operation.newProperties[plateIndent.KEY_INDENT]; // Update indent

      if (prevIndent !== indent) {
        const node = plateCore.getNode(editor, path);
        if (!node) return;
        /**
         * Case:
         * - 1-<o>-1 <- indent
         * - <1>-1o-1 <- normalize node before
         * - 1-1o-2
         */

        let prevNodeEntry = getPreviousIndentList(editor, [nodeBefore, path], {
          sameStyleType: false
        });

        if (prevNodeEntry) {
          normalizeListStart(editor, prevNodeEntry);
        }
        /**
         * Case:
         * - 11-<1>-11 <- indent
         * - <11>-11-12 <- normalize prev node after
         * - 11-12-13
         */


        prevNodeEntry = getPreviousIndentList(editor, [node, path], {
          sameStyleType: false
        });

        if (prevNodeEntry) {
          normalizeListStart(editor, prevNodeEntry);
        }
        /**
         * Case:
         * - 11-<12>-13 <- outdent
         * - 11-2-<13> <- normalize next node before
         * - 11-2-11
         */


        let nextNodeEntry = getNextIndentList(editor, [nodeBefore, path], {
          sameStyleType: false
        });

        if (nextNodeEntry) {
          normalizeListStart(editor, nextNodeEntry);
        }
        /**
         * Case:
         * - 1-<1o>-2 <- outdent
         * - 1-o-<2> <- normalize next node after
         * - 1-o-1
         */


        nextNodeEntry = getNextIndentList(editor, [node, path], {
          sameStyleType: false
        });

        if (nextNodeEntry) {
          normalizeListStart(editor, nextNodeEntry);
        }
      }
    }
  };

  return editor;
};

const KEY_LIST_STYLE_TYPE = 'listStyleType';
const KEY_LIST_START = 'listStart';
const createIndentListPlugin = plateCore.createPluginFactory({
  key: KEY_LIST_STYLE_TYPE,
  inject: {
    belowComponent: injectIndentListComponent
  },
  withOverrides: withIndentList
});

/**
 * Increase the indentation of the selected blocks.
 */
const indentList = (editor, {
  listStyleType = exports.ListStyleType.Disc,
  ...options
} = {}) => {
  plateIndent.setIndent(editor, {
    offset: 1,
    setNodesProps: () => ({
      [KEY_LIST_STYLE_TYPE]: listStyleType
    }),
    ...options
  });
};

/**
 * Decrease the indentation of the selected blocks.
 */
const outdentList = (editor, options = {}) => {
  plateIndent.setIndent(editor, {
    offset: -1,
    unsetNodesProps: [KEY_LIST_STYLE_TYPE],
    ...options
  });
};

/**
 * Increase the indentation of the selected blocks.
 */

const toggleIndentList = (editor, options) => {
  const nodeEntry = plateCore.findNode(editor, {
    match: n => !!n[KEY_LIST_STYLE_TYPE]
  });

  if (!nodeEntry) {
    indentList(editor, options);
    return;
  }

  const [node, path] = nodeEntry;

  if (node[KEY_LIST_STYLE_TYPE] && options !== null && options !== void 0 && options.listStyleType) {
    if (node[KEY_LIST_STYLE_TYPE] === (options === null || options === void 0 ? void 0 : options.listStyleType)) {
      outdentList(editor, options);
      plateCore.unsetNodes(editor, KEY_LIST_STYLE_TYPE);
      return;
    }

    plateCore.setNodes(editor, {
      [KEY_LIST_STYLE_TYPE]: options === null || options === void 0 ? void 0 : options.listStyleType
    }, {
      at: path
    });
  }
};

exports.KEY_LIST_START = KEY_LIST_START;
exports.KEY_LIST_STYLE_TYPE = KEY_LIST_STYLE_TYPE;
exports.createIndentListPlugin = createIndentListPlugin;
exports.getNextIndentList = getNextIndentList;
exports.getPreviousIndentList = getPreviousIndentList;
exports.indentList = indentList;
exports.injectIndentListComponent = injectIndentListComponent;
exports.normalizeListStart = normalizeListStart;
exports.outdentList = outdentList;
exports.toggleIndentList = toggleIndentList;
exports.withIndentList = withIndentList;
//# sourceMappingURL=index.js.map

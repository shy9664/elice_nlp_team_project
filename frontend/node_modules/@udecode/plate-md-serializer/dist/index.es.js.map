{"version":3,"file":"index.es.js","sources":["../../../marks/basic-marks/dist/index.es.js","../src/deserializer/utils/deserializeMd.ts","../src/deserializer/utils/filterBreakLines.ts","../src/deserializer/createDeserializeMdPlugin.ts"],"sourcesContent":["import { createPluginFactory, onKeyDownToggleMark, findHtmlParentElement } from '@udecode/plate-core';\n\nconst deserializeHtmlBold = [{\n  validNodeName: ['STRONG', 'B']\n}, {\n  validStyle: {\n    fontWeight: ['600', '700', 'bold']\n  }\n}];\n\nconst MARK_BOLD = 'bold';\n/**\n * Enables support for bold formatting\n */\n\nconst createBoldPlugin = createPluginFactory({\n  key: MARK_BOLD,\n  isLeaf: true,\n  deserializeHtml: deserializeHtmlBold,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+b'\n  }\n});\n\nconst MARK_CODE = 'code';\n/**\n * Enables support for code formatting\n */\n\nconst createCodePlugin = createPluginFactory({\n  key: MARK_CODE,\n  isLeaf: true,\n  deserializeHtml: [{\n    validNodeName: ['CODE'],\n    query: el => !findHtmlParentElement(el, 'PRE')\n  }, {\n    validStyle: {\n      wordWrap: 'break-word'\n    }\n  }, {\n    validStyle: {\n      fontFamily: 'Consolas'\n    }\n  }],\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+e'\n  }\n});\n\nconst deserializeHtmlItalic = [{\n  validNodeName: ['EM', 'I']\n}, {\n  validStyle: {\n    fontStyle: 'italic'\n  }\n}];\n\nconst MARK_ITALIC = 'italic';\n/**\n * Enables support for italic formatting.\n */\n\nconst createItalicPlugin = createPluginFactory({\n  key: MARK_ITALIC,\n  isLeaf: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+i'\n  },\n  deserializeHtml: deserializeHtmlItalic\n});\n\nconst MARK_STRIKETHROUGH = 'strikethrough';\n/**\n * Enables support for strikethrough formatting.\n */\n\nconst createStrikethroughPlugin = createPluginFactory({\n  key: MARK_STRIKETHROUGH,\n  isLeaf: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+shift+x'\n  },\n  deserializeHtml: [{\n    validNodeName: ['S', 'DEL', 'STRIKE']\n  }, {\n    validStyle: {\n      textDecoration: 'line-through'\n    }\n  }]\n});\n\nconst MARK_SUBSCRIPT$1 = 'subscript';\nconst MARK_SUPERSCRIPT$1 = 'superscript';\n/**\n * Enables support for subscript formatting.\n */\n\nconst createSubscriptPlugin = createPluginFactory({\n  key: MARK_SUBSCRIPT$1,\n  isLeaf: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+,',\n    clear: MARK_SUPERSCRIPT$1\n  },\n  deserializeHtml: [{\n    validNodeName: ['SUB']\n  }, {\n    validStyle: {\n      verticalAlign: 'sub'\n    }\n  }]\n});\n\nconst MARK_SUPERSCRIPT = 'superscript';\nconst MARK_SUBSCRIPT = 'subscript';\n/**\n * Enables support for superscript formatting.\n */\n\nconst createSuperscriptPlugin = createPluginFactory({\n  key: MARK_SUPERSCRIPT,\n  isLeaf: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+.',\n    clear: MARK_SUBSCRIPT\n  },\n  deserializeHtml: [{\n    validNodeName: ['SUP']\n  }, {\n    validStyle: {\n      verticalAlign: 'super'\n    }\n  }]\n});\n\nconst MARK_UNDERLINE = 'underline';\n/**\n * Enables support for underline formatting.\n */\n\nconst createUnderlinePlugin = createPluginFactory({\n  key: MARK_UNDERLINE,\n  isLeaf: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleMark\n  },\n  options: {\n    hotkey: 'mod+u'\n  },\n  deserializeHtml: [{\n    validNodeName: ['U']\n  }, {\n    validStyle: {\n      textDecoration: 'underline'\n    }\n  }]\n});\n\n/**\n * Enables support for basic marks:\n * - Bold\n * - Code\n * - Italic\n * - Strikethrough\n * - Subscript\n * - Superscript\n * - Underline\n */\n\nconst createBasicMarksPlugin = createPluginFactory({\n  key: 'basicMarks',\n  plugins: [createBoldPlugin(), createCodePlugin(), createItalicPlugin(), createStrikethroughPlugin(), createSubscriptPlugin(), createSuperscriptPlugin(), createUnderlinePlugin()]\n});\n\nexport { MARK_BOLD, MARK_CODE, MARK_ITALIC, MARK_STRIKETHROUGH, MARK_SUBSCRIPT$1 as MARK_SUBSCRIPT, MARK_SUPERSCRIPT, MARK_UNDERLINE, createBasicMarksPlugin, createBoldPlugin, createCodePlugin, createItalicPlugin, createStrikethroughPlugin, createSubscriptPlugin, createSuperscriptPlugin, createUnderlinePlugin, deserializeHtmlBold, deserializeHtmlItalic };\n//# sourceMappingURL=index.es.js.map\n","import {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n} from '@udecode/plate-basic-marks';\nimport { ELEMENT_BLOCKQUOTE } from '@udecode/plate-block-quote';\nimport { ELEMENT_CODE_BLOCK } from '@udecode/plate-code-block';\nimport { getPluginType, PlateEditor } from '@udecode/plate-core';\nimport {\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n} from '@udecode/plate-heading';\nimport { ELEMENT_LINK } from '@udecode/plate-link';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from '@udecode/plate-list';\nimport { ELEMENT_PARAGRAPH } from '@udecode/plate-paragraph';\nimport markdown from 'remark-parse';\nimport slate from 'remark-slate';\nimport unified from 'unified';\n\n/**\n * Deserialize content from Markdown format to Slate format.\n * `editor` needs\n */\nexport const deserializeMd = (editor: PlateEditor, data: string) => {\n  const tree: any = unified()\n    .use(markdown)\n    .use(slate, {\n      nodeTypes: {\n        paragraph: getPluginType(editor, ELEMENT_PARAGRAPH),\n        block_quote: getPluginType(editor, ELEMENT_BLOCKQUOTE),\n        link: getPluginType(editor, ELEMENT_LINK),\n        inline_code_mark: getPluginType(editor, MARK_CODE),\n        emphasis_mark: getPluginType(editor, MARK_ITALIC),\n        strong_mark: getPluginType(editor, MARK_BOLD),\n        delete_mark: getPluginType(editor, MARK_STRIKETHROUGH),\n        // FIXME: underline, subscript superscript not yet supported by remark-slate\n        // underline: getPluginType(editor, MARK_UNDERLINE),\n        // subscript: getPluginType(editor, MARK_SUBSCRIPT),\n        // superscript: getPluginType(editor, MARK_SUPERSCRIPT),\n        code_block: getPluginType(editor, ELEMENT_CODE_BLOCK),\n        ul_list: getPluginType(editor, ELEMENT_UL),\n        ol_list: getPluginType(editor, ELEMENT_OL),\n        listItem: getPluginType(editor, ELEMENT_LI),\n        heading: {\n          1: getPluginType(editor, ELEMENT_H1),\n          2: getPluginType(editor, ELEMENT_H2),\n          3: getPluginType(editor, ELEMENT_H3),\n          4: getPluginType(editor, ELEMENT_H4),\n          5: getPluginType(editor, ELEMENT_H5),\n          6: getPluginType(editor, ELEMENT_H6),\n        },\n      },\n      linkDestinationKey: 'url',\n    })\n    .processSync(data);\n\n  return tree.result;\n};\n","export function filterBreaklines(item: any): boolean {\n  return !item.text;\n}\n","import { createPluginFactory, isUrl } from '@udecode/plate-core';\nimport { deserializeMd } from './utils';\n\nexport const KEY_DESERIALIZE_MD = 'deserializeMd';\n\nexport const createDeserializeMdPlugin = createPluginFactory({\n  key: KEY_DESERIALIZE_MD,\n  then: (editor) => ({\n    editor: {\n      insertData: {\n        format: 'text/plain',\n        query: ({ data, dataTransfer }) => {\n          const htmlData = dataTransfer.getData('text/html');\n          if (htmlData) return false;\n\n          const { files } = dataTransfer;\n          if (!files?.length) {\n            // if content is simply a URL pass through to not break LinkPlugin\n            if (isUrl(data)) {\n              return false;\n            }\n          }\n          return true;\n        },\n        getFragment: ({ data }) => deserializeMd(editor, data),\n      },\n    },\n  }),\n});\n"],"names":["deserializeHtmlBold","validNodeName","validStyle","fontWeight","deserializeMd","editor","data","tree","unified","use","markdown","slate","nodeTypes","paragraph","getPluginType","ELEMENT_PARAGRAPH","block_quote","ELEMENT_BLOCKQUOTE","link","ELEMENT_LINK","inline_code_mark","MARK_CODE","emphasis_mark","MARK_ITALIC","strong_mark","MARK_BOLD","delete_mark","MARK_STRIKETHROUGH","code_block","ELEMENT_CODE_BLOCK","ul_list","ELEMENT_UL","ol_list","ELEMENT_OL","listItem","ELEMENT_LI","heading","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","linkDestinationKey","processSync","result","filterBreaklines","item","text","KEY_DESERIALIZE_MD","createDeserializeMdPlugin","createPluginFactory","key","then","insertData","format","query","dataTransfer","htmlData","getData","files","length","isUrl","getFragment"],"mappings":";;;;;;;;;;;MAEaA,mBAAsC,GAAG,CACpD;AAAEC,EAAAA,aAAa,EAAE,CAAA,QAAA,EAAA,GAAA;AAAjB,CADoD,EAEpD;AACEC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAE,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA;AADF;AADd,CAFoD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBtD;AACA;AACA;AACA;;MACaC,aAAa,GAAG,CAACC,MAAD,EAAsBC,IAAtB,KAAuC;AAClE,QAAMC,IAAS,GAAGC,OAAO,GACtBC,GADe,CACXC,QADW,EAEfD,GAFe,CAEXE,KAFW,EAEJ;AACVC,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAEC,aAAa,CAACT,MAAD,EAASU,iBAAT,CADf;AAETC,MAAAA,WAAW,EAAEF,aAAa,CAACT,MAAD,EAASY,kBAAT,CAFjB;AAGTC,MAAAA,IAAI,EAAEJ,aAAa,CAACT,MAAD,EAASc,YAAT,CAHV;AAITC,MAAAA,gBAAgB,EAAEN,aAAa,CAACT,MAAD,EAASgB,SAAT,CAJtB;AAKTC,MAAAA,aAAa,EAAER,aAAa,CAACT,MAAD,EAASkB,WAAT,CALnB;AAMTC,MAAAA,WAAW,EAAEV,aAAa,CAACT,MAAD,EAASoB,SAAT,CANjB;AAOTC,MAAAA,WAAW,EAAEZ,aAAa,CAACT,MAAD,EAASsB,kBAAT,CAPjB;AAQT;AACA;AACA;AACA;AACAC,MAAAA,UAAU,EAAEd,aAAa,CAACT,MAAD,EAASwB,kBAAT,CAZhB;AAaTC,MAAAA,OAAO,EAAEhB,aAAa,CAACT,MAAD,EAAS0B,UAAT,CAbb;AAcTC,MAAAA,OAAO,EAAElB,aAAa,CAACT,MAAD,EAAS4B,UAAT,CAdb;AAeTC,MAAAA,QAAQ,EAAEpB,aAAa,CAACT,MAAD,EAAS8B,UAAT,CAfd;AAgBTC,MAAAA,OAAO,EAAE;AACP,WAAGtB,aAAa,CAACT,MAAD,EAASgC,UAAT,CADT;AAEP,WAAGvB,aAAa,CAACT,MAAD,EAASiC,UAAT,CAFT;AAGP,WAAGxB,aAAa,CAACT,MAAD,EAASkC,UAAT,CAHT;AAIP,WAAGzB,aAAa,CAACT,MAAD,EAASmC,UAAT,CAJT;AAKP,WAAG1B,aAAa,CAACT,MAAD,EAASoC,UAAT,CALT;AAMP,WAAG3B,aAAa,CAACT,MAAD,EAASqC,UAAT;AANT;AAhBA,KADD;AA0BVC,IAAAA,kBAAkB,EAAE;AA1BV,GAFI,EA8BfC,WA9Be,CA8BHtC,IA9BG,CAAlB;AAgCA,SAAOC,IAAI,CAACsC,MAAZ;AACD;;AC9DM,SAASC,gBAAT,CAA0BC,IAA1B,EAA8C;AACnD,SAAO,CAACA,IAAI,CAACC,IAAb;AACD;;MCCYC,kBAAkB,GAAG;MAErBC,yBAAyB,GAAGC,mBAAmB,CAAC;AAC3DC,EAAAA,GAAG,EAAEH,kBADsD;AAE3DI,EAAAA,IAAI,EAAGhD,MAAD,KAAa;AACjBA,IAAAA,MAAM,EAAE;AACNiD,MAAAA,UAAU,EAAE;AACVC,QAAAA,MAAM,EAAE,YADE;AAEVC,QAAAA,KAAK,EAAE,CAAC;AAAElD,UAAAA,IAAF;AAAQmD,UAAAA;AAAR,SAAD,KAA4B;AACjC,gBAAMC,QAAQ,GAAGD,YAAY,CAACE,OAAb,CAAqB,WAArB,CAAjB;AACA,cAAID,QAAJ,EAAc,OAAO,KAAP;AAEd,gBAAM;AAAEE,YAAAA;AAAF,cAAYH,YAAlB;;AACA,cAAI,EAACG,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEC,MAAR,CAAJ,EAAoB;AAClB;AACA,gBAAIC,KAAK,CAACxD,IAAD,CAAT,EAAiB;AACf,qBAAO,KAAP;AACD;AACF;;AACD,iBAAO,IAAP;AACD,SAdS;AAeVyD,QAAAA,WAAW,EAAE,CAAC;AAAEzD,UAAAA;AAAF,SAAD,KAAcF,aAAa,CAACC,MAAD,EAASC,IAAT;AAf9B;AADN;AADS,GAAb;AAFqD,CAAD;;;;"}
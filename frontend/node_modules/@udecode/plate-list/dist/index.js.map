{"version":3,"file":"index.js","sources":["../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../../../../node_modules/is-hotkey/lib/index.js","../src/queries/isListNested.ts","../src/queries/getListTypes.ts","../src/queries/getHighestEmptyList.ts","../src/queries/getListItemEntry.ts","../src/queries/getListRoot.ts","../src/queries/hasListChild.ts","../src/queries/isAcrossListItems.ts","../src/transforms/moveListItemDown.ts","../src/transforms/moveListItemsToList.ts","../src/transforms/unwrapList.ts","../src/transforms/moveListItemUp.ts","../src/transforms/moveListItems.ts","../src/transforms/indentListItems.ts","../src/transforms/insertListItem.ts","../src/transforms/moveListItemSublistItemsToListItemSublist.ts","../src/transforms/moveListSiblingsAfterCursor.ts","../src/transforms/removeFirstListItem.ts","../src/transforms/removeListItem.ts","../src/transforms/toggleList.ts","../src/transforms/unindentListItems.ts","../src/onKeyDownList.ts","../src/deleteBackwardList.ts","../src/deleteForwardList.ts","../src/deleteFragmentList.ts","../src/insertBreakList.ts","../src/insertFragmentList.ts","../src/normalizers/normalizeListItem.ts","../src/normalizers/normalizeNestedList.ts","../src/normalizers/normalizeList.ts","../src/withList.ts","../src/createListPlugin.ts","../src/todo-list/createTodoListPlugin.ts"],"sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import {\n  getParent,\n  getPluginType,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is the list nested, i.e. its parent is a list item.\n */\nexport const isListNested = (editor: PlateEditor, listPath: Path) => {\n  const listParentNode = getParent<TElement>(editor, listPath)?.[0];\n\n  return listParentNode?.type === getPluginType(editor, ELEMENT_LI);\n};\n","import { getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\n\nexport const getListTypes = (editor: PlateEditor) => {\n  return [getPluginType(editor, ELEMENT_OL), getPluginType(editor, ELEMENT_UL)];\n};\n","import { getAbove, getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Find the highest end list that can be deleted.\n * Its path should be different to diffListPath.\n * If the highest end list 2+ items, return liPath.\n * Get the parent list until:\n * - the list has less than 2 items.\n * - its path is not equals to diffListPath.\n */\nexport const getHighestEmptyList = (\n  editor: PlateEditor,\n  {\n    diffListPath,\n    liPath,\n  }: {\n    liPath: Path;\n    diffListPath?: Path;\n  }\n): Path | undefined => {\n  const list = getAbove(editor, {\n    at: liPath,\n    match: { type: getListTypes(editor) },\n  });\n  if (!list) return;\n  const [listNode, listPath] = list;\n\n  if (!diffListPath || !Path.equals(listPath, diffListPath)) {\n    if (listNode.children.length < 2) {\n      const liParent = getAbove(editor, {\n        at: listPath,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n      });\n\n      if (liParent) {\n        return (\n          getHighestEmptyList(editor, { liPath: liParent[1], diffListPath }) ||\n          listPath\n        );\n      }\n    }\n    return liPath;\n  }\n};\n","import {\n  getAbove,\n  getNode,\n  getParent,\n  getPluginType,\n  isCollapsed,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Location, NodeEntry, Path, Range } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Returns the nearest li and ul / ol wrapping node entries for a given path (default = selection)\n */\nexport const getListItemEntry = (\n  editor: PlateEditor,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: NodeEntry<TElement>; listItem: NodeEntry<TElement> } | undefined => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n\n  let _at: Path;\n\n  if (Range.isRange(at) && !isCollapsed(at)) {\n    _at = at.focus.path;\n  } else if (Range.isRange(at)) {\n    _at = at.anchor.path;\n  } else {\n    _at = at as Path;\n  }\n\n  if (_at) {\n    const node = getNode(editor, _at) as TElement;\n    if (node) {\n      const listItem = getAbove(editor, {\n        at: _at,\n        match: { type: liType },\n      }) as NodeEntry<TElement>;\n\n      if (listItem) {\n        const list = getParent(editor, listItem[1]) as NodeEntry<TElement>;\n\n        return { list, listItem };\n      }\n    }\n  }\n};\n","import { getAbove, getPluginType, PlateEditor } from '@udecode/plate-core';\nimport { Ancestor, NodeEntry, Path, Point, Range } from 'slate';\nimport { ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\n\n/**\n * Searches upward for the root list element\n */\nexport const getListRoot = (\n  editor: PlateEditor,\n  at: Path | Range | Point | null = editor.selection\n): NodeEntry<Ancestor> | undefined => {\n  if (!at) return;\n\n  const parentList = getAbove(editor, {\n    at,\n    match: {\n      type: [\n        getPluginType(editor, ELEMENT_UL),\n        getPluginType(editor, ELEMENT_OL),\n      ],\n    },\n  });\n\n  if (parentList) {\n    const [, parentListPath] = parentList;\n\n    return getListRoot(editor, parentListPath) ?? parentList;\n  }\n};\n","import { match, PlateEditor } from '@udecode/plate-core';\nimport { Ancestor } from 'slate';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Is there a list child in the node.\n */\nexport const hasListChild = (editor: PlateEditor, node: Ancestor) =>\n  node.children.some((n) => match(n, { type: getListTypes(editor) }));\n","import {\n  getPluginType,\n  isCollapsed,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  someNode,\n} from '@udecode/plate-core';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is selection across blocks with list items\n */\nexport const isAcrossListItems = (editor: PlateEditor) => {\n  const { selection } = editor;\n\n  if (!selection || isCollapsed(selection)) {\n    return false;\n  }\n\n  const isAcrossBlocks = isRangeAcrossBlocks(editor);\n  if (!isAcrossBlocks) return false;\n\n  return someNode(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LI) },\n  });\n};\n","import { match, PlateEditor, TElement, wrapNodes } from '@udecode/plate-core';\nimport { Ancestor, Editor, Element, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries';\n\nexport interface MoveListItemDownOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\nexport const moveListItemDown = (\n  editor: PlateEditor,\n  { list, listItem }: MoveListItemDownOptions\n) => {\n  const [listNode] = list;\n  const [, listItemPath] = listItem;\n\n  let previousListItemPath: Path;\n\n  try {\n    previousListItemPath = Path.previous(listItemPath);\n  } catch (e) {\n    return;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [previousNode, previousPath] = previousSiblingItem;\n\n    const sublist = previousNode.children.find((n) =>\n      match(n, { type: getListTypes(editor) })\n    ) as Element | undefined;\n    const newPath = previousPath.concat(\n      sublist ? [1, sublist.children.length] : [1]\n    );\n\n    Editor.withoutNormalizing(editor, () => {\n      if (!sublist) {\n        // Create new sublist\n        wrapNodes(\n          editor,\n          { type: listNode.type, children: [] },\n          { at: listItemPath }\n        );\n      }\n\n      // Move the current item to the sublist\n      Transforms.moveNodes(editor, {\n        at: listItemPath,\n        to: newPath,\n      });\n    });\n  }\n};\n","import {\n  findDescendant,\n  getLastChildPath,\n  moveChildren,\n  MoveChildrenOptions,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MergeListItemIntoListOptions {\n  /**\n   * List items of the sublist of this node will be moved.\n   */\n  fromListItem?: NodeEntry<TElement>;\n\n  /**\n   * List items of the list will be moved.\n   */\n  fromList?: NodeEntry<TElement>;\n\n  /**\n   * List items will be moved in this list.\n   */\n  toList?: NodeEntry<TElement>;\n\n  fromStartIndex?: MoveChildrenOptions['fromStartIndex'];\n\n  /**\n   * List position where to move the list items.\n   */\n  toListIndex?: number | null;\n\n  to?: Path;\n\n  /**\n   * Delete `fromListItem` sublist if true.\n   * @default true\n   */\n  deleteFromList?: boolean;\n}\n\n/**\n * Move the list items of the sublist of `fromListItem` to `toList` (if `fromListItem` is defined).\n * Move the list items of `fromList` to `toList` (if `fromList` is defined).\n */\nexport const moveListItemsToList = (\n  editor: PlateEditor,\n  {\n    fromList,\n    fromListItem,\n    fromStartIndex,\n    to: _to,\n    toList,\n    toListIndex = null,\n    deleteFromList = true,\n  }: MergeListItemIntoListOptions\n) => {\n  let fromListPath: Path | undefined;\n  let moved;\n\n  Editor.withoutNormalizing(editor, () => {\n    if (fromListItem) {\n      const fromListItemSublist = findDescendant(editor, {\n        at: fromListItem[1],\n        match: {\n          type: getListTypes(editor),\n        },\n      });\n      if (!fromListItemSublist) return 0;\n\n      fromListPath = fromListItemSublist?.[1];\n    } else if (fromList) {\n      // eslint-disable-next-line prefer-destructuring\n      fromListPath = fromList[1];\n    } else {\n      return;\n    }\n\n    let to: Path | null = null;\n\n    if (_to) to = _to;\n    if (toList) {\n      if (toListIndex !== null) to = toList[1].concat([toListIndex]);\n      else {\n        const lastChildPath = getLastChildPath(toList);\n        to = Path.next(lastChildPath);\n      }\n    }\n    if (!to) return;\n\n    moved = moveChildren(editor, {\n      at: fromListPath,\n      to,\n      fromStartIndex,\n    });\n\n    // Remove the empty list\n    if (deleteFromList) {\n      Transforms.delete(editor, { at: fromListPath });\n    }\n  });\n\n  return moved;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getAbove,\n  getPluginType,\n  PlateEditor,\n  setNodes,\n  unwrapNodes,\n} from '@udecode/plate-core';\nimport { Editor, Path } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\nimport { getListTypes } from '../queries';\n\nexport const unwrapList = (editor: PlateEditor, { at }: { at?: Path } = {}) => {\n  Editor.withoutNormalizing(editor, () => {\n    do {\n      setNodes(editor, {\n        type: getPluginType(editor, ELEMENT_DEFAULT),\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n        split: true,\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: {\n          type: [\n            getPluginType(editor, ELEMENT_UL),\n            getPluginType(editor, ELEMENT_OL),\n          ],\n        },\n        split: true,\n      });\n    } while (getAbove(editor, { match: { type: getListTypes(editor), at } }));\n  });\n};\n","import {\n  getAbove,\n  getNode,\n  getPluginType,\n  insertNodes,\n  isLastChild,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { unwrapList } from './unwrapList';\n\nexport interface MoveListItemUpOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n}\n\n/**\n * Move a list item up.\n */\nexport const moveListItemUp = (\n  editor: PlateEditor,\n  { list, listItem }: MoveListItemUpOptions\n) => {\n  const move = () => {\n    const [listNode, listPath] = list;\n    const [liNode, liPath] = listItem;\n\n    const liParent = getAbove<TElement>(editor, {\n      at: listPath,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    if (!liParent) {\n      let toListPath;\n      try {\n        toListPath = Path.next(listPath);\n      } catch (err) {\n        return;\n      }\n\n      const condA = hasListChild(editor, liNode);\n      const condB = !isLastChild(list, liPath);\n\n      if (condA || condB) {\n        // Insert a new list next to `list`\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      if (condA) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move li sub-lis to the new list\n        moveListItemsToList(editor, {\n          fromListItem: listItem,\n          toList: [toListNode, toListPath],\n        });\n      }\n\n      // If there is siblings li, move them to the new list\n      if (condB) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move next lis to the new list\n        moveListItemsToList(editor, {\n          fromList: list,\n          fromStartIndex: liPath[liPath.length - 1] + 1,\n          toList: [toListNode, toListPath],\n          deleteFromList: false,\n        });\n      }\n\n      // Finally, unwrap the list\n      unwrapList(editor, { at: liPath.concat(0) });\n\n      return true;\n    }\n    const [, liParentPath] = liParent;\n\n    const toListPath = liPath.concat([1]);\n\n    // If li has next siblings, we need to move them.\n    if (!isLastChild(list, liPath)) {\n      // If li has no sublist, insert one.\n      if (!hasListChild(editor, liNode)) {\n        insertNodes<TElement>(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      const toListNode = getNode<TElement>(editor, toListPath);\n      if (!toListNode) return;\n\n      // Move next siblings to li sublist.\n      moveListItemsToList(editor, {\n        fromListItem: liParent,\n        toList: [toListNode, toListPath],\n        fromStartIndex: liPath[liPath.length - 1] + 1,\n        deleteFromList: false,\n      });\n    }\n\n    const movedUpLiPath = Path.next(liParentPath);\n\n    // Move li one level up: next to the li parent.\n    Transforms.moveNodes(editor, {\n      at: liPath,\n      to: movedUpLiPath,\n    });\n\n    return true;\n  };\n\n  let moved: boolean | undefined = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    moved = move();\n  });\n\n  return moved;\n};\n","import {\n  EditorNodesOptions,\n  getNodes,\n  getParent,\n  getPluginType,\n  PlateEditor,\n} from '@udecode/plate-core';\nimport { Editor, Path, PathRef } from 'slate';\nimport { ELEMENT_LIC } from '../createListPlugin';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemDown } from './moveListItemDown';\nimport { moveListItemUp } from './moveListItemUp';\n\nexport type MoveListItemsOptions = {\n  increase?: boolean;\n  at?: EditorNodesOptions['at'];\n};\n\nexport const moveListItems = (\n  editor: PlateEditor,\n  {\n    increase = true,\n    at = editor.selection ?? undefined,\n  }: MoveListItemsOptions = {}\n) => {\n  // Get the selected lic\n  const [...lics] = getNodes(editor, {\n    at,\n    match: {\n      type: getPluginType(editor, ELEMENT_LIC),\n    },\n  });\n\n  if (!lics.length) return;\n\n  const highestLicPaths: Path[] = [];\n  const highestLicPathRefs: PathRef[] = [];\n\n  // Filter out the nested lic, we just need to move the highest ones\n  lics.forEach((lic) => {\n    const licPath = lic[1];\n    const liPath = Path.parent(licPath);\n\n    const isAncestor = highestLicPaths.some((path) => {\n      const highestLiPath = Path.parent(path);\n\n      return Path.isAncestor(highestLiPath, liPath);\n    });\n    if (!isAncestor) {\n      highestLicPaths.push(licPath);\n      highestLicPathRefs.push(Editor.pathRef(editor, licPath));\n    }\n  });\n\n  const licPathRefsToMove = increase\n    ? highestLicPathRefs\n    : highestLicPathRefs.reverse();\n\n  Editor.withoutNormalizing(editor, () => {\n    licPathRefsToMove.forEach((licPathRef) => {\n      const licPath = licPathRef.unref();\n      if (!licPath) return;\n\n      const listItem = getParent(editor, licPath);\n      if (!listItem) return;\n      const listEntry = getParent(editor, listItem[1]);\n\n      if (increase) {\n        moveListItemDown(editor, {\n          list: listEntry as any,\n          listItem: listItem as any,\n        });\n      } else if (listEntry && isListNested(editor, listEntry[1])) {\n        moveListItemUp(editor, {\n          list: listEntry as any,\n          listItem: listItem as any,\n        });\n      }\n    });\n  });\n};\n","import { PlateEditor } from '@udecode/plate-core';\nimport { moveListItems } from './moveListItems';\n\nexport const indentListItems = (editor: PlateEditor) => {\n  moveListItems(editor, { increase: true });\n};\n","import {\n  getAbove,\n  getParent,\n  getPluginType,\n  insertNodes,\n  isBlockTextEmptyAfterSelection,\n  PlateEditor,\n  TElement,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Editor, Path, Range, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\n\n/**\n * Insert list item if selection in li>p.\n * TODO: test\n */\nexport const insertListItem = (editor: PlateEditor): boolean => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n\n  if (!editor.selection) {\n    return false;\n  }\n\n  const licEntry = getAbove(editor, { match: { type: licType } });\n  if (!licEntry) return false;\n  const [, paragraphPath] = licEntry;\n\n  const listItemEntry = getParent(editor, paragraphPath);\n  if (!listItemEntry) return false;\n  const [listItemNode, listItemPath] = listItemEntry;\n\n  if (listItemNode.type !== liType) return false;\n\n  let success = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    if (!Range.isCollapsed(editor.selection!)) {\n      Transforms.delete(editor);\n    }\n\n    const isStart = Editor.isStart(\n      editor,\n      editor.selection!.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n    const nextListItemPath = Path.next(listItemPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '' }] }],\n        },\n        { at: listItemPath }\n      );\n\n      success = true;\n\n      return;\n    }\n\n    /**\n     * If not end, split nodes, wrap a list item on the new paragraph and move it to the next list item\n     */\n    if (!isEnd) {\n      Editor.withoutNormalizing(editor, () => {\n        Transforms.splitNodes(editor);\n        wrapNodes(\n          editor,\n          {\n            type: liType,\n            children: [],\n          },\n          { at: nextParagraphPath }\n        );\n        Transforms.moveNodes(editor, {\n          at: nextParagraphPath,\n          to: nextListItemPath,\n        });\n        Transforms.select(editor, nextListItemPath);\n        Transforms.collapse(editor, {\n          edge: 'start',\n        });\n      });\n    } else {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = Editor.marks(editor) || {};\n      insertNodes<TElement>(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '', ...marks }] }],\n        },\n        { at: nextListItemPath }\n      );\n      Transforms.select(editor, nextListItemPath);\n    }\n\n    /**\n     * If there is a list in the list item, move it to the next list item\n     */\n    if (listItemNode.children.length > 1) {\n      Transforms.moveNodes(editor, {\n        at: nextParagraphPath,\n        to: nextListItemPath.concat(1),\n      });\n    }\n\n    success = true;\n  });\n\n  return success;\n};\n","import {\n  findDescendant,\n  getLastChildPath,\n  getParent,\n  insertNodes,\n  moveChildren,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemSublistItemsToListItemSublistOptions {\n  /**\n   * The list item to merge.\n   */\n  fromListItem: NodeEntry<TElement>;\n\n  /**\n   * The list item where to merge.\n   */\n  toListItem: NodeEntry<TElement>;\n\n  /**\n   * Move to the start of the list instead of the end.\n   */\n  start?: boolean;\n}\n\n/**\n * Move fromListItem sublist list items to the end of `toListItem` sublist.\n * If there is no `toListItem` sublist, insert one.\n */\nexport const moveListItemSublistItemsToListItemSublist = (\n  editor: PlateEditor,\n  {\n    fromListItem,\n    toListItem,\n    start,\n  }: MoveListItemSublistItemsToListItemSublistOptions\n) => {\n  const [, fromListItemPath] = fromListItem;\n  const [, toListItemPath] = toListItem;\n  let moved = 0;\n\n  Editor.withoutNormalizing(editor, () => {\n    const fromListItemSublist = findDescendant<TElement>(editor, {\n      at: fromListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n    if (!fromListItemSublist) return 0;\n\n    const [, fromListItemSublistPath] = fromListItemSublist;\n\n    const toListItemSublist = findDescendant<TElement>(editor, {\n      at: toListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n\n    let to: Path;\n\n    if (!toListItemSublist) {\n      const fromList = getParent(editor, fromListItemPath);\n      if (!fromList) return 0;\n      const [fromListNode] = fromList;\n\n      const fromListType = fromListNode.type;\n\n      const toListItemSublistPath = toListItemPath.concat([1]);\n\n      insertNodes<TElement>(\n        editor,\n        { type: fromListType, children: [] },\n        { at: toListItemSublistPath }\n      );\n\n      to = toListItemSublistPath.concat([0]);\n    } else if (start) {\n      const [, toListItemSublistPath] = toListItemSublist;\n      to = toListItemSublistPath.concat([0]);\n    } else {\n      to = Path.next(getLastChildPath(toListItemSublist));\n    }\n\n    moved = moveChildren(editor, {\n      at: fromListItemSublistPath,\n      to,\n    });\n\n    // Remove the empty list\n    Transforms.delete(editor, { at: fromListItemSublistPath });\n  });\n\n  return moved;\n};\n","import { match, moveChildren, PlateEditor } from '@udecode/plate-core';\nimport { Node, NodeEntry, Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport const moveListSiblingsAfterCursor = (\n  editor: PlateEditor,\n  {\n    at,\n    to,\n  }: {\n    at: Path;\n    to: Path;\n  }\n): number => {\n  const offset = at[at.length - 1];\n  at = Path.parent(at);\n  const listNode = Node.get(editor, at);\n  const listEntry: NodeEntry = [listNode, at];\n\n  if (\n    !match(listNode, { type: getListTypes(editor) }) ||\n    Path.isParent(at, to) // avoid moving nodes within its own list\n  ) {\n    return 0;\n  }\n\n  return moveChildren(editor, {\n    at: listEntry,\n    to,\n    fromStartIndex: offset + 1,\n  });\n};\n","import { isFirstChild, PlateEditor, TElement } from '@udecode/plate-core';\nimport { NodeEntry } from 'slate';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemUp } from './moveListItemUp';\n\n/**\n * If list is not nested and if li is not the first child, move li up.\n */\nexport const removeFirstListItem = (\n  editor: PlateEditor,\n  {\n    list,\n    listItem,\n  }: {\n    list: NodeEntry<TElement>;\n    listItem: NodeEntry<TElement>;\n  }\n) => {\n  const [, listPath] = list;\n  const [, listItemPath] = listItem;\n\n  if (!isListNested(editor, listPath) && !isFirstChild(listItemPath)) {\n    moveListItemUp(editor, { list, listItem });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  deleteFragment,\n  getPluginType,\n  getPreviousPath,\n  insertNodes,\n  isExpanded,\n  PlateEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { moveListItemSublistItemsToListItemSublist } from './moveListItemSublistItemsToListItemSublist';\n\nexport interface RemoveListItemOptions {\n  list: NodeEntry<TElement>;\n  listItem: NodeEntry<TElement>;\n  reverse?: boolean;\n}\n\n/**\n * Remove list item and move its sublist to list if any.\n */\nexport const removeListItem = (\n  editor: PlateEditor,\n  { list, listItem, reverse = true }: RemoveListItemOptions\n) => {\n  const [liNode, liPath] = listItem;\n\n  // Stop if the list item has no sublist\n  if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {\n    return false;\n  }\n\n  const previousLiPath = getPreviousPath(liPath);\n\n  let success = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    /**\n     * If there is a previous li, we need to move sub-lis to the previous li.\n     * As we need to delete first, we will:\n     * 1. insert a temporary li: tempLi\n     * 2. move sub-lis to tempLi\n     * 3. delete\n     * 4. move sub-lis from tempLi to the previous li.\n     * 5. remove tempLi\n     */\n    if (previousLiPath) {\n      const previousLi = Editor.node(\n        editor,\n        previousLiPath\n      ) as NodeEntry<TElement>;\n\n      // 1\n      let tempLiPath = Path.next(liPath);\n      insertNodes<TElement>(\n        editor,\n        {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [\n            {\n              type: getPluginType(editor, ELEMENT_LIC),\n              children: [{ text: '' }],\n            },\n          ],\n        },\n        { at: tempLiPath }\n      );\n\n      const tempLi = Editor.node(editor, tempLiPath) as NodeEntry<TElement>;\n      const tempLiPathRef = Editor.pathRef(editor, tempLi[1]);\n\n      // 2\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: listItem,\n        toListItem: tempLi,\n      });\n\n      // 3\n      deleteFragment(editor, {\n        reverse,\n      });\n\n      tempLiPath = tempLiPathRef.unref()!;\n\n      // 4\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: [tempLi[0], tempLiPath],\n        toListItem: previousLi,\n      });\n\n      // 5\n      Transforms.removeNodes(editor, { at: tempLiPath });\n\n      success = true;\n      return;\n    }\n\n    // If it's the first li, move the sublist to the parent list\n    moveListItemsToList(editor, {\n      fromListItem: listItem,\n      toList: list,\n      toListIndex: 1,\n    });\n  });\n\n  return success;\n};\n","import {\n  ELEMENT_DEFAULT,\n  findNode,\n  getNodes,\n  getPluginType,\n  isCollapsed,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  setNodes,\n  TElement,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Editor, Node, NodeEntry, Range } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListItemEntry, getListTypes } from '../queries';\nimport { unwrapList } from './unwrapList';\n\nexport const toggleList = (editor: PlateEditor, { type }: { type: string }) =>\n  Editor.withoutNormalizing(editor, () => {\n    if (!editor.selection) {\n      return;\n    }\n\n    if (isCollapsed(editor.selection) || !isRangeAcrossBlocks(editor)) {\n      // selection is collapsed\n      const res = getListItemEntry(editor);\n\n      if (res) {\n        const { list } = res;\n        if (list[0].type !== type) {\n          setNodes(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n) => getListTypes(editor).includes(n.type),\n              mode: 'lowest',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const list = { type, children: [] };\n        wrapNodes(editor, list);\n\n        const nodes = [\n          ...getNodes(editor, {\n            match: { type: getPluginType(editor, ELEMENT_DEFAULT) },\n          }),\n        ];\n        setNodes(editor, { type: getPluginType(editor, ELEMENT_LIC) });\n\n        const listItem = {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [],\n        };\n\n        for (const [, path] of nodes) {\n          wrapNodes(editor, listItem, {\n            at: path,\n          });\n        }\n      }\n    } else {\n      // selection is a range\n\n      const [startPoint, endPoint] = Range.edges(editor.selection!);\n      const commonEntry = Node.common(editor, startPoint.path, endPoint.path);\n\n      if (\n        getListTypes(editor).includes((commonEntry[0] as TElement).type) ||\n        (commonEntry[0] as TElement).type === getPluginType(editor, ELEMENT_LI)\n      ) {\n        if ((commonEntry[0] as TElement).type !== type) {\n          const startList = findNode(editor, {\n            at: Range.start(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const endList = findNode(editor, {\n            at: Range.end(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const rangeLength = Math.min(\n            startList![1].length,\n            endList![1].length\n          );\n          setNodes(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n, path) =>\n                getListTypes(editor).includes(n.type) &&\n                path.length >= rangeLength,\n              mode: 'all',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const rootPathLength = commonEntry[1].length;\n        const nodes = (Array.from(\n          getNodes(editor, {\n            mode: 'all',\n          })\n        ) as NodeEntry<TElement>[])\n          .filter(([, path]) => path.length === rootPathLength + 1)\n          .reverse();\n\n        nodes.forEach((n) => {\n          if (getListTypes(editor).includes(n[0].type)) {\n            setNodes(editor, { type }, { at: n[1] });\n          } else {\n            setNodes(\n              editor,\n              { type: getPluginType(editor, ELEMENT_LIC) },\n              { at: n[1] }\n            );\n\n            const listItem = {\n              type: getPluginType(editor, ELEMENT_LI),\n              children: [],\n            };\n            wrapNodes(editor, listItem, {\n              at: n[1],\n            });\n\n            const list = { type, children: [] };\n            wrapNodes(editor, list, { at: n[1] });\n          }\n        });\n      }\n    }\n  });\n","import { PlateEditor } from '@udecode/plate-core';\nimport { moveListItems, MoveListItemsOptions } from './moveListItems';\n\nexport type UnindentListItemsOptions = Omit<MoveListItemsOptions, 'increase'>;\n\nexport const unindentListItems = (\n  editor: PlateEditor,\n  options: UnindentListItemsOptions = {}\n): void => moveListItems(editor, { ...options, increase: false });\n","import { getAbove, HotkeyPlugin, KeyboardHandler } from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { castArray } from 'lodash';\nimport { moveListItems, toggleList } from './transforms';\n\nexport const onKeyDownList: KeyboardHandler<{}, HotkeyPlugin> = (\n  editor,\n  { type, options: { hotkey } }\n) => (e) => {\n  if (e.key === 'Tab' && editor.selection) {\n    const listSelected = getAbove(editor, {\n      at: editor.selection,\n      match: { type },\n    });\n\n    if (listSelected) {\n      e.preventDefault();\n      moveListItems(editor, { increase: !e.shiftKey });\n      return;\n    }\n  }\n\n  if (!hotkey) return;\n\n  const hotkeys = castArray(hotkey);\n\n  for (const _hotkey of hotkeys) {\n    if (isHotkey(_hotkey)(e as any)) {\n      toggleList(editor, { type: type! });\n    }\n  }\n};\n","import {\n  deleteFragment,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isFirstChild,\n  isSelectionAtBlockStart,\n  mockPlugin,\n  PlateEditor,\n} from '@udecode/plate-core';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { Editor } from 'slate';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { isListNested } from './queries/isListNested';\nimport { removeFirstListItem } from './transforms/removeFirstListItem';\nimport { removeListItem } from './transforms/removeListItem';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const deleteBackwardList = (\n  editor: PlateEditor,\n  unit: 'character' | 'word' | 'line' | 'block'\n) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n\n  if (res) {\n    const { list, listItem } = res;\n\n    if (\n      isSelectionAtBlockStart(editor, {\n        match: (node) => node.type === ELEMENT_LI,\n      })\n    ) {\n      Editor.withoutNormalizing(editor, () => {\n        moved = removeFirstListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        moved = removeListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        if (isFirstChild(listItem[1]) && !isListNested(editor, list[1])) {\n          onKeyDownResetNode(\n            editor,\n            mockPlugin<ResetNodePlugin>({\n              options: {\n                rules: [\n                  {\n                    types: [getPluginType(editor, ELEMENT_LI)],\n                    defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n                    hotkey: 'backspace',\n                    predicate: () => isSelectionAtBlockStart(editor),\n                    onReset: (e) => unwrapList(e),\n                  },\n                ],\n              },\n            })\n          )(SIMULATE_BACKSPACE);\n          moved = true;\n          return;\n        }\n\n        deleteFragment(editor, {\n          unit,\n          reverse: true,\n        });\n        moved = true;\n      });\n    }\n  }\n\n  return moved;\n};\n","import {\n  getBlockAbove,\n  getChildren,\n  getNode,\n  getPluginType,\n  getText,\n  isSelectionAtBlockEnd,\n  PlateEditor,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI } from './createListPlugin';\nimport { getListItemEntry, getListRoot, hasListChild } from './queries';\nimport {\n  moveListItemsToList,\n  moveListItemUp,\n  removeFirstListItem,\n  removeListItem,\n} from './transforms';\n\nconst pathToEntry = <T extends Node>(\n  editor: PlateEditor,\n  path: Path\n): NodeEntry<T> => Editor.node(editor, path) as NodeEntry<T>;\n\nconst selectionIsNotInAListHandler = (editor: PlateEditor): boolean => {\n  const pointAfterSelection = Editor.after(\n    editor,\n    editor.selection!.focus.path\n  );\n\n  if (pointAfterSelection) {\n    // there is a block after it\n    const nextSiblingListRes = getListItemEntry(editor, {\n      at: pointAfterSelection,\n    });\n\n    if (nextSiblingListRes) {\n      // the next block is a list\n      const { listItem } = nextSiblingListRes;\n      const parentBlockEntity = getBlockAbove(editor, {\n        at: editor.selection!.anchor,\n      });\n\n      if (!getText(editor, parentBlockEntity![1])) {\n        // the selected block is empty\n        Transforms.removeNodes(editor);\n\n        return true;\n      }\n\n      if (hasListChild(editor, listItem[0])) {\n        // the next block has children, so we have to move the first item up\n        const sublistRes = getListItemEntry(editor, {\n          at: [...listItem[1], 1, 0, 0],\n        });\n\n        moveListItemUp(editor, sublistRes!);\n      }\n    }\n  }\n\n  return false;\n};\n\nconst selectionIsInAListHandler = (\n  editor: PlateEditor,\n  res: { list: NodeEntry<TElement>; listItem: NodeEntry<TElement> }\n): boolean => {\n  const { listItem } = res;\n\n  // if it has no children\n  if (!hasListChild(editor, listItem[0])) {\n    const liType = getPluginType(editor, ELEMENT_LI);\n    const liWithSiblings = Array.from(\n      Editor.nodes(editor, {\n        at: listItem[1],\n        mode: 'lowest',\n        match: (node: TDescendant, path) => {\n          if (path.length === 0) {\n            return false;\n          }\n\n          const isNodeLi = node.type === liType;\n          const isSiblingOfNodeLi =\n            (getNode(editor, Path.next(path)) as TDescendant)?.type === liType;\n\n          return isNodeLi && isSiblingOfNodeLi;\n        },\n      }),\n      (entry) => entry[1]\n    )[0];\n\n    if (!liWithSiblings) {\n      // there are no more list item in the list\n      const pointAfterListItem = Editor.after(editor, listItem[1]);\n\n      if (pointAfterListItem) {\n        // there is a block after it\n        const nextSiblingListRes = getListItemEntry(editor, {\n          at: pointAfterListItem,\n        });\n\n        if (nextSiblingListRes) {\n          // it is a list so we merge the lists\n          const listRoot = getListRoot(\n            editor,\n            listItem[1]\n          ) as NodeEntry<TElement>;\n\n          moveListItemsToList(editor, {\n            fromList: nextSiblingListRes.list,\n            toList: listRoot,\n            deleteFromList: true,\n          });\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const siblingListItem: NodeEntry<TDescendant> = pathToEntry(\n      editor,\n      Path.next(liWithSiblings)\n    );\n\n    const siblingList: NodeEntry<TDescendant> = Editor.parent(\n      editor,\n      siblingListItem[1]\n    );\n\n    if (\n      removeListItem(editor, {\n        list: siblingList,\n        listItem: siblingListItem,\n        reverse: false,\n      })\n    ) {\n      return true;\n    }\n\n    // if (skipDefaultDelete) return skipDefaultDelete;\n\n    return false;\n  }\n\n  // if it has children\n  const nestedList = pathToEntry<TDescendant>(\n    editor,\n    Path.next([...listItem[1], 0])\n  );\n  const nestedListItem = getChildren<TDescendant>(nestedList)[0];\n\n  if (\n    removeFirstListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  if (\n    removeListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const deleteForwardList = (editor: PlateEditor) => {\n  let skipDefaultDelete = false;\n\n  if (!editor?.selection) {\n    return skipDefaultDelete;\n  }\n\n  if (!isSelectionAtBlockEnd(editor)) {\n    return skipDefaultDelete;\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    const res = getListItemEntry(editor, {});\n\n    if (!res) {\n      skipDefaultDelete = selectionIsNotInAListHandler(editor);\n      return;\n    }\n\n    skipDefaultDelete = selectionIsInAListHandler(editor, res);\n  });\n\n  return skipDefaultDelete;\n};\n","import {\n  deleteFragment,\n  getAbove,\n  getParent,\n  getPluginType,\n  PlateEditor,\n} from '@udecode/plate-core';\nimport { Editor, Range, Transforms } from 'slate';\nimport { getHighestEmptyList } from './queries/getHighestEmptyList';\nimport { hasListChild } from './queries/hasListChild';\nimport { isAcrossListItems } from './queries/isAcrossListItems';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const deleteFragmentList = (editor: PlateEditor) => {\n  let deleted = false;\n\n  Editor.withoutNormalizing(editor, () => {\n    // Selection should be across list items\n    if (!isAcrossListItems(editor)) return;\n\n    /**\n     * Check if the end li can be deleted (if it has no sublist).\n     * Store the path ref to delete it after deleteFragment.\n     */\n    const end = Editor.end(editor, editor.selection as Range);\n    const liEnd = getAbove(editor, {\n      at: end,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);\n    const liEndPathRef = liEndCanBeDeleted\n      ? Editor.pathRef(editor, liEnd![1])\n      : undefined;\n\n    /**\n     * Delete fragment and move end block children to start block\n     */\n    deleteFragment(editor);\n\n    const start = Editor.start(editor, editor.selection as Range);\n    const liStart = getAbove(editor, {\n      at: start,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n\n    if (liEndPathRef) {\n      const liEndPath = liEndPathRef.unref()!;\n\n      const listStart = liStart && getParent(editor, liStart[1]);\n\n      const deletePath = getHighestEmptyList(editor, {\n        liPath: liEndPath,\n        diffListPath: listStart?.[1],\n      });\n\n      if (deletePath) {\n        Transforms.removeNodes(editor, { at: deletePath });\n      }\n\n      deleted = true;\n    }\n  });\n\n  return deleted;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isBlockAboveEmpty,\n  mockPlugin,\n  PlateEditor,\n} from '@udecode/plate-core';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { insertListItem } from './transforms/insertListItem';\nimport { moveListItemUp } from './transforms/moveListItemUp';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const insertBreakList = (editor: PlateEditor) => {\n  if (!editor.selection) return;\n\n  const res = getListItemEntry(editor, {});\n  let moved: boolean | undefined;\n\n  // If selection is in a li\n  if (res) {\n    const { list, listItem } = res;\n\n    // If selected li is empty, move it up.\n    if (isBlockAboveEmpty(editor)) {\n      moved = moveListItemUp(editor, {\n        list,\n        listItem,\n      });\n\n      if (moved) return true;\n    }\n  }\n\n  const didReset = onKeyDownResetNode(\n    editor,\n    mockPlugin<ResetNodePlugin>({\n      options: {\n        rules: [\n          {\n            types: [getPluginType(editor, ELEMENT_LI)],\n            defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n            predicate: () => !moved && isBlockAboveEmpty(editor),\n            onReset: (_editor) => unwrapList(_editor as PlateEditor),\n          },\n        ],\n      },\n    })\n  )(SIMULATE_BACKSPACE as any);\n  if (didReset) return true;\n\n  /**\n   * If selection is in li > p, insert li.\n   */\n  if (!moved) {\n    const inserted = insertListItem(editor);\n    if (inserted) return true;\n  }\n};\n","import {\n  findNode,\n  getPlugin,\n  PlateEditor,\n  PlatePlugin,\n  TDescendant,\n} from '@udecode/plate-core';\nimport { Node, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_OL, ELEMENT_UL } from './createListPlugin';\n\nexport const insertFragmentList = (editor: PlateEditor) => {\n  const { insertFragment } = editor;\n\n  const li = getPlugin(editor, ELEMENT_LI);\n  const ul = getPlugin(editor, ELEMENT_UL);\n  const ol = getPlugin(editor, ELEMENT_OL);\n\n  const isListRoot = (node: TDescendant): boolean =>\n    [ul.type, ol.type].includes(node.type);\n\n  const getFirstAncestorOfType = (\n    root: TDescendant,\n    entry: NodeEntry,\n    { type }: PlatePlugin\n  ): NodeEntry<TDescendant> => {\n    let ancestor: Path = Path.parent(entry[1]);\n    while ((Node.get(root, ancestor) as TDescendant).type !== type) {\n      ancestor = Path.parent(ancestor);\n    }\n\n    return [Node.get(root, ancestor), ancestor];\n  };\n\n  /**\n   * Removes the \"empty\" leading lis. Empty in this context means lis only with other lis as children.\n   *\n   * @returns If argument is not a list root, returns it, otherwise returns ul[] or li[].\n   */\n  const trimList = <T extends TDescendant>(listRoot: T): T[] => {\n    if (!isListRoot(listRoot)) {\n      return [listRoot];\n    }\n\n    const textEntries = Array.from(Node.texts(listRoot));\n\n    const commonAncestorEntry = textEntries.reduce<NodeEntry<TDescendant>>(\n      (commonAncestor, textEntry) =>\n        Path.isAncestor(commonAncestor[1], textEntry[1])\n          ? commonAncestor\n          : Node.common(listRoot, textEntry[1], commonAncestor[1]),\n      // any list item would do, we grab the first one\n      getFirstAncestorOfType(listRoot, textEntries[0], li)\n    );\n\n    return isListRoot(commonAncestorEntry[0])\n      ? commonAncestorEntry[0].children\n      : [commonAncestorEntry[0]];\n  };\n\n  return (fragment: TDescendant[]) => {\n    const liEntry = findNode(editor, {\n      match: { type: li.type },\n      mode: 'lowest',\n    });\n\n    if (liEntry) {\n      const [, liPath] = liEntry;\n\n      // FIXME: fork insertFragment for edge cases\n      return Transforms.insertNodes(\n        editor,\n        fragment.flatMap((node) => trimList(node)),\n        { at: Path.next(liPath), select: true }\n      );\n    }\n\n    const filtered: TDescendant[] = isListRoot(fragment[0])\n      ? [{ text: '' }, ...fragment]\n      : fragment;\n\n    return insertFragment(filtered);\n  };\n};\n","import {\n  getChildren,\n  getParent,\n  getPluginType,\n  insertEmptyElement,\n  match,\n  PlateEditor,\n  setNodes,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, NodeEntry, Path, PathRef, Transforms } from 'slate';\nimport { ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\nimport { getListTypes } from '../queries';\nimport { moveListItemUp } from '../transforms';\nimport { ListPlugin } from '../types';\n\n/**\n * Recursively get all the:\n * - block children\n * - inline children except those at excludeDepth\n */\nexport const getDeepInlineChildren = (\n  editor: PlateEditor,\n  {\n    children,\n  }: {\n    children: NodeEntry<TDescendant>[];\n  }\n) => {\n  const inlineChildren: NodeEntry<TDescendant>[] = [];\n\n  for (const child of children) {\n    if (Editor.isBlock(editor, child[0])) {\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(child),\n        })\n      );\n    } else {\n      inlineChildren.push(child);\n    }\n  }\n\n  return inlineChildren;\n};\n\n/**\n * If the list item has no child: insert an empty list item container.\n * Else: move the children that are not valid to the list item container.\n */\nexport const normalizeListItem = (\n  editor: PlateEditor,\n  {\n    listItem,\n    validLiChildrenTypes = [],\n  }: { listItem: NodeEntry<TElement> } & ListPlugin\n) => {\n  let changed = false;\n\n  const allValidLiChildrenTypes = [\n    getPluginType(editor, ELEMENT_UL),\n    getPluginType(editor, ELEMENT_OL),\n    getPluginType(editor, ELEMENT_LIC),\n    ...validLiChildrenTypes,\n  ];\n\n  const [, liPath] = listItem;\n  const liChildren = getChildren(listItem);\n\n  // Get invalid (type) li children path refs to be moved\n  const invalidLiChildrenPathRefs = liChildren\n    .filter(([child]) => !allValidLiChildrenTypes.includes(child.type))\n    .map(([, childPath]) => Editor.pathRef(editor, childPath));\n\n  const firstLiChild: NodeEntry<any> | undefined = liChildren[0];\n  const [firstLiChildNode, firstLiChildPath] =\n    (firstLiChild as NodeEntry<TElement>) ?? [];\n\n  // If li has no child or inline child, insert lic\n  if (!firstLiChild || !Editor.isBlock(editor, firstLiChildNode)) {\n    insertEmptyElement(editor, getPluginType(editor, ELEMENT_LIC), {\n      at: liPath.concat([0]),\n    });\n    return true;\n  }\n\n  // If first li child is a block but not lic, set it to lic\n  if (\n    Editor.isBlock(editor, firstLiChildNode) &&\n    !match(firstLiChildNode as any, {\n      type: getPluginType(editor, ELEMENT_LIC),\n    })\n  ) {\n    if (\n      match(firstLiChildNode as any, {\n        type: getListTypes(editor),\n      })\n    ) {\n      // the listItem has no lic so we move the children up a level\n      const parent = getParent(editor, listItem[1]);\n      const sublist = firstLiChild;\n      const children = getChildren(firstLiChild).reverse();\n      children.forEach((c) => {\n        moveListItemUp(editor, { list: sublist, listItem: c });\n      });\n\n      Transforms.removeNodes(editor, { at: [...parent![1], 0] });\n\n      return true;\n    }\n\n    // Allow block elements listed as valid li children types to be a first child instead of LIC\n    if (validLiChildrenTypes.includes(firstLiChildNode.type)) {\n      return true;\n    }\n\n    setNodes<TElement>(\n      editor,\n      {\n        type: getPluginType(editor, ELEMENT_LIC),\n      },\n      {\n        at: firstLiChildPath,\n      }\n    );\n\n    changed = true;\n  }\n\n  const licChildren = getChildren(firstLiChild);\n\n  if (licChildren.length) {\n    const blockPathRefs: PathRef[] = [];\n    const inlineChildren: NodeEntry[] = [];\n\n    // Check that lic has no block children\n    for (const licChild of licChildren) {\n      if (!Editor.isBlock(editor, licChild[0])) {\n        break;\n      }\n\n      blockPathRefs.push(Editor.pathRef(editor, licChild[1]));\n\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(licChild),\n        })\n      );\n    }\n\n    const to = Path.next(licChildren[licChildren.length - 1]?.[1]);\n\n    // Move lic nested inline children to its children\n    inlineChildren.reverse().forEach(([, path]) => {\n      Transforms.moveNodes(editor, {\n        at: path,\n        to,\n      });\n    });\n\n    // Remove lic block children\n    blockPathRefs.forEach((pathRef) => {\n      const path = pathRef.unref();\n\n      path &&\n        Transforms.removeNodes(editor, {\n          at: path,\n        });\n    });\n\n    if (blockPathRefs.length) {\n      changed = true;\n    }\n  }\n\n  if (changed) return true;\n\n  // Ensure that any text nodes under the list are inside the list item container\n  invalidLiChildrenPathRefs.reverse().forEach((ref) => {\n    const path = ref.unref();\n\n    path &&\n      Transforms.moveNodes(editor, {\n        at: path,\n        to: firstLiChildPath.concat([0]),\n      });\n  });\n\n  return !!invalidLiChildrenPathRefs.length;\n};\n","import { getParent, match, PlateEditor, TElement } from '@udecode/plate-core';\nimport { Ancestor, Editor, NodeEntry, Path, Transforms } from 'slate';\nimport { getListTypes } from '../queries';\n\n// When pasting from e.g. Google Docs, the structure of nested lists like \"ul -> ul\"\n// should be normalized to \"ul -> li -> lic + ul\".\n// In other words, a nested list as a direct children of a list should be moved into a previous list item sibling\nexport const normalizeNestedList = (\n  editor: PlateEditor,\n  { nestedListItem }: { nestedListItem: NodeEntry<TElement> }\n) => {\n  const [, path] = nestedListItem;\n\n  const parentNode = getParent(editor, path);\n  const hasParentList =\n    parentNode && match(parentNode[0], { type: getListTypes(editor) });\n  if (!hasParentList) {\n    return false;\n  }\n\n  let previousListItemPath: Path;\n  try {\n    previousListItemPath = Path.previous(path);\n  } catch (e) {\n    return false;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = Editor.node(\n    editor,\n    previousListItemPath\n  ) as NodeEntry<Ancestor>;\n\n  if (previousSiblingItem) {\n    const [, previousPath] = previousSiblingItem;\n    const newPath = previousPath.concat([1]);\n\n    // Move the current item to the sublist\n    Transforms.moveNodes(editor, {\n      at: path,\n      to: newPath,\n    });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getNode,\n  getParent,\n  getPluginType,\n  getPreviousPath,\n  isElement,\n  match,\n  PlateEditor,\n  setNodes,\n  TDescendant,\n  TElement,\n} from '@udecode/plate-core';\nimport { Descendant, NodeEntry, Path, Transforms } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListTypes } from '../queries/getListTypes';\nimport { moveListItemsToList } from '../transforms';\nimport { ListPlugin } from '../types';\nimport { normalizeListItem } from './normalizeListItem';\nimport { normalizeNestedList } from './normalizeNestedList';\n\n/**\n * Normalize list node to force the ul>li>p+ul structure.\n */\nexport const normalizeList = (\n  editor: PlateEditor,\n  { validLiChildrenTypes }: ListPlugin\n) => {\n  const { normalizeNode } = editor;\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n  return ([node, path]: NodeEntry) => {\n    if (!isElement(node)) return;\n\n    // remove empty list\n    if (match(node, { type: getListTypes(editor) })) {\n      if (\n        !node.children.length ||\n        !node.children.find(\n          (item: Descendant) => (item as TDescendant).type === liType\n        )\n      ) {\n        return Transforms.removeNodes(editor, { at: path });\n      }\n\n      const nextPath = Path.next(path);\n      const nextNode = getNode(editor, nextPath) as TElement | null;\n\n      // Has a list afterwards with the same type\n      if (nextNode?.type === node.type) {\n        moveListItemsToList(editor, {\n          fromList: [nextNode, nextPath],\n          toList: [node, path],\n          deleteFromList: true,\n        });\n      }\n\n      const prevPath = getPreviousPath(path) as Path;\n      const prevNode = getNode(editor, prevPath) as TElement | null;\n\n      // Has a list before with the same type\n      if (prevNode?.type === node.type) {\n        editor.normalizeNode([prevNode, prevPath]);\n\n        // early return since this node will no longer exists\n        return;\n      }\n\n      if (normalizeNestedList(editor, { nestedListItem: [node, path] })) {\n        return;\n      }\n    }\n\n    if (node.type === getPluginType(editor, ELEMENT_LI)) {\n      if (\n        normalizeListItem(editor, {\n          listItem: [node, path],\n          validLiChildrenTypes,\n        })\n      ) {\n        return;\n      }\n    }\n\n    // LIC should have LI parent. If not, set LIC to DEFAULT type.\n    if (node.type === licType && licType !== defaultType) {\n      if (getParent(editor, path)?.[0].type !== liType) {\n        setNodes(editor, { type: defaultType }, { at: path });\n        return;\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n};\n","import { WithOverride } from '@udecode/plate-core';\nimport { deleteBackwardList } from './deleteBackwardList';\nimport { deleteForwardList } from './deleteForwardList';\nimport { deleteFragmentList } from './deleteFragmentList';\nimport { insertBreakList } from './insertBreakList';\nimport { insertFragmentList } from './insertFragmentList';\nimport { normalizeList } from './normalizers';\nimport { ListPlugin } from './types';\n\nexport const withList: WithOverride<{}, ListPlugin> = (\n  editor,\n  { options: { validLiChildrenTypes } }\n) => {\n  const { insertBreak, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.insertBreak = () => {\n    if (insertBreakList(editor)) return;\n\n    insertBreak();\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (deleteBackwardList(editor, unit)) return;\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (deleteForwardList(editor)) return;\n\n    deleteForward(unit);\n  };\n\n  editor.deleteFragment = () => {\n    if (deleteFragmentList(editor)) return;\n\n    deleteFragment();\n  };\n\n  editor.insertFragment = insertFragmentList(editor);\n\n  editor.normalizeNode = normalizeList(editor, { validLiChildrenTypes });\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  KEY_DESERIALIZE_HTML,\n  PlatePlugin,\n  someNode,\n} from '@udecode/plate-core';\nimport { onKeyDownList } from './onKeyDownList';\nimport { ListPlugin } from './types';\nimport { withList } from './withList';\n\nexport const ELEMENT_UL = 'ul';\nexport const ELEMENT_OL = 'ol';\nexport const ELEMENT_LI = 'li';\nexport const ELEMENT_LIC = 'lic';\n\n/**\n * Enables support for bulleted, numbered and to-do lists.\n */\nexport const createListPlugin = createPluginFactory({\n  key: 'list',\n  plugins: [\n    {\n      key: ELEMENT_UL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      withOverrides: withList,\n      deserializeHtml: { validNodeName: 'UL' },\n    } as PlatePlugin<{}, ListPlugin>,\n    {\n      key: ELEMENT_OL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      deserializeHtml: { validNodeName: 'OL' },\n    } as PlatePlugin<{}, ListPlugin>,\n    {\n      key: ELEMENT_LI,\n      isElement: true,\n      deserializeHtml: { validNodeName: 'LI' },\n      then: (editor, { type }) => ({\n        inject: {\n          pluginsByKey: {\n            [KEY_DESERIALIZE_HTML]: {\n              editor: {\n                insertData: {\n                  preInsert: () => {\n                    return someNode(editor, { match: { type } });\n                  },\n                },\n              },\n            },\n          },\n        },\n      }),\n    },\n    {\n      key: ELEMENT_LIC,\n      isElement: true,\n    },\n  ],\n});\n","import {\n  createPluginFactory,\n  HotkeyPlugin,\n  onKeyDownToggleElement,\n} from '@udecode/plate-core';\n\nexport const ELEMENT_TODO_LI = 'action_item';\n\nexport const createTodoListPlugin = createPluginFactory<HotkeyPlugin>({\n  key: ELEMENT_TODO_LI,\n  isElement: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleElement,\n  },\n  options: {\n    hotkey: ['mod+opt+4', 'mod+shift+4'],\n  },\n});\n"],"names":["isArray","isListNested","editor","listPath","listParentNode","getParent","type","getPluginType","ELEMENT_LI","getListTypes","ELEMENT_OL","ELEMENT_UL","getHighestEmptyList","diffListPath","liPath","list","getAbove","at","match","listNode","Path","equals","children","length","liParent","getListItemEntry","selection","liType","_at","Range","isRange","isCollapsed","focus","path","anchor","node","getNode","listItem","getListRoot","parentList","parentListPath","hasListChild","some","n","isAcrossListItems","isAcrossBlocks","isRangeAcrossBlocks","someNode","moveListItemDown","listItemPath","previousListItemPath","previous","e","previousSiblingItem","Editor","previousNode","previousPath","sublist","find","newPath","concat","withoutNormalizing","wrapNodes","Transforms","moveNodes","to","moveListItemsToList","fromList","fromListItem","fromStartIndex","_to","toList","toListIndex","deleteFromList","fromListPath","moved","fromListItemSublist","findDescendant","lastChildPath","getLastChildPath","next","moveChildren","delete","unwrapList","setNodes","ELEMENT_DEFAULT","unwrapNodes","split","moveListItemUp","move","liNode","toListPath","err","condA","condB","isLastChild","insertNodes","toListNode","liParentPath","movedUpLiPath","moveListItems","increase","undefined","lics","getNodes","ELEMENT_LIC","highestLicPaths","highestLicPathRefs","forEach","lic","licPath","parent","isAncestor","highestLiPath","push","pathRef","licPathRefsToMove","reverse","licPathRef","unref","listEntry","indentListItems","insertListItem","licType","licEntry","paragraphPath","listItemEntry","listItemNode","success","isStart","isEnd","isBlockTextEmptyAfterSelection","nextParagraphPath","nextListItemPath","text","splitNodes","select","collapse","edge","marks","moveListItemSublistItemsToListItemSublist","toListItem","start","fromListItemPath","toListItemPath","fromListItemSublistPath","toListItemSublist","fromListNode","fromListType","toListItemSublistPath","moveListSiblingsAfterCursor","offset","Node","get","isParent","removeFirstListItem","isFirstChild","removeListItem","isExpanded","previousLiPath","getPreviousPath","previousLi","tempLiPath","tempLi","tempLiPathRef","deleteFragment","removeNodes","toggleList","res","includes","mode","nodes","startPoint","endPoint","edges","commonEntry","common","startList","findNode","endList","end","rangeLength","Math","min","rootPathLength","Array","from","filter","unindentListItems","options","onKeyDownList","hotkey","key","listSelected","preventDefault","shiftKey","hotkeys","_castArray","_hotkey","isHotkey","deleteBackwardList","unit","isSelectionAtBlockStart","onKeyDownResetNode","mockPlugin","rules","types","defaultType","predicate","onReset","SIMULATE_BACKSPACE","pathToEntry","selectionIsNotInAListHandler","pointAfterSelection","after","nextSiblingListRes","parentBlockEntity","getBlockAbove","getText","sublistRes","selectionIsInAListHandler","liWithSiblings","isNodeLi","isSiblingOfNodeLi","entry","pointAfterListItem","listRoot","siblingListItem","siblingList","nestedList","nestedListItem","getChildren","deleteForwardList","skipDefaultDelete","isSelectionAtBlockEnd","deleteFragmentList","deleted","liEnd","liEndCanBeDeleted","liEndPathRef","liStart","liEndPath","listStart","deletePath","insertBreakList","isBlockAboveEmpty","didReset","_editor","inserted","insertFragmentList","insertFragment","li","getPlugin","ul","ol","isListRoot","getFirstAncestorOfType","root","ancestor","trimList","textEntries","texts","commonAncestorEntry","reduce","commonAncestor","textEntry","fragment","liEntry","flatMap","filtered","getDeepInlineChildren","inlineChildren","child","isBlock","normalizeListItem","validLiChildrenTypes","changed","allValidLiChildrenTypes","liChildren","invalidLiChildrenPathRefs","map","childPath","firstLiChild","firstLiChildNode","firstLiChildPath","insertEmptyElement","c","licChildren","blockPathRefs","licChild","ref","normalizeNestedList","parentNode","hasParentList","normalizeList","normalizeNode","isElement","item","nextPath","nextNode","prevPath","prevNode","withList","insertBreak","deleteBackward","deleteForward","createListPlugin","createPluginFactory","plugins","handlers","onKeyDown","withOverrides","deserializeHtml","validNodeName","then","inject","pluginsByKey","KEY_DESERIALIZE_HTML","insertData","preInsert","ELEMENT_TODO_LI","createTodoListPlugin","onKeyDownToggleElement"],"mappings":"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"}
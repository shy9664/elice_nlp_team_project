{"version":3,"file":"index.js","sources":["../src/CodeBlockElement/CodeBlockElement.styles.ts","../src/CodeBlockElement/CodeBlockSelectElement.tsx","../src/CodeBlockElement/CodeBlockElement.tsx","../src/CodeBlockElement/CodeLineElement.styles.ts","../src/CodeBlockElement/CodeLineElement.tsx","../src/CodeBlockToolbarButton/CodeBlockToolbarButton.tsx"],"sourcesContent":["import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const getCodeBlockElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeBlockElement', ...props },\n    {\n      root: [\n        tw`whitespace-pre-wrap py-3 px-4`,\n        css`\n          font-size: 16px;\n          font-family: SFMono-Regular, Consolas, Monaco, 'Liberation Mono',\n            Menlo, Courier, monospace;\n          tab-size: 2;\n          line-height: normal;\n          border-radius: 3px;\n          background-color: rgb(247, 246, 243);\n        `,\n      ],\n    }\n  );\n","import React from 'react';\nimport {\n  CODE_BLOCK_LANGUAGES,\n  CODE_BLOCK_LANGUAGES_POPULAR,\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n} from '@udecode/plate-code-block';\nimport { getPluginOptions, useEditorRef } from '@udecode/plate-core';\nimport { CSSProp } from 'styled-components';\n\nexport const CodeBlockSelectElement = ({\n  lang,\n  onChange,\n  ...props\n}: {\n  lang?: string;\n  onChange: Function;\n  className?: string;\n  css?: CSSProp;\n}) => {\n  const [value, setValue] = React.useState(lang);\n  const editor = useEditorRef();\n  const { syntaxPopularFirst } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n  return (\n    <select\n      value={value}\n      style={{ float: 'right' }}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n      onChange={(e) => {\n        onChange(e.target.value);\n        setValue(e.target.value);\n      }}\n      contentEditable={false}\n      {...props}\n    >\n      <option value=\"\">Plain text</option>\n      {syntaxPopularFirst &&\n        Object.entries(CODE_BLOCK_LANGUAGES_POPULAR).map(([key, val]) => (\n          <option key={key} value={key}>\n            {val}\n          </option>\n        ))}\n      {Object.entries(CODE_BLOCK_LANGUAGES).map(([key, val]) => (\n        <option key={key} value={key}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockNodeData,\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n} from '@udecode/plate-code-block';\nimport { getPluginOptions, setNodes, TElement } from '@udecode/plate-core';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { ReactEditor } from 'slate-react';\nimport { getCodeBlockElementStyles } from './CodeBlockElement.styles';\nimport { CodeBlockSelectElement } from './CodeBlockSelectElement';\n\nexport const CodeBlockElement = (props: StyledElementProps) => {\n  const { attributes, children, nodeProps, element, editor } = props;\n\n  const rootProps = getRootProps(props);\n\n  const { lang } = element;\n  const { root } = getCodeBlockElementStyles(props);\n  const { syntax } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n\n  return (\n    <>\n      <pre\n        {...attributes}\n        css={root.css}\n        className={root.className}\n        {...rootProps}\n        {...nodeProps}\n      >\n        {syntax && (\n          <CodeBlockSelectElement\n            data-testid=\"CodeBlockSelectElement\"\n            lang={lang}\n            onChange={(val: string) => {\n              const path = ReactEditor.findPath(editor, element);\n              setNodes<TElement<CodeBlockNodeData>>(\n                editor,\n                { lang: val },\n                { at: path }\n              );\n            }}\n          />\n        )}\n        <code className={codeClassName}>{children}</code>\n      </pre>\n    </>\n  );\n};\n","import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\n\nexport const getCodeLineElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeLineElement', ...props },\n    {\n      root: [{}],\n    }\n  );\n","import React from 'react';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getCodeLineElementStyles } from './CodeLineElement.styles';\n\nexport const CodeLineElement = (props: StyledElementProps) => {\n  const { attributes, children, nodeProps } = props;\n\n  const rootProps = getRootProps(props);\n  const { root } = getCodeLineElementStyles(props);\n\n  return (\n    <div\n      {...attributes}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockInsertOptions,\n  ELEMENT_CODE_BLOCK,\n  insertEmptyCodeBlock,\n} from '@udecode/plate-code-block';\nimport {\n  getPluginType,\n  getPreventDefaultHandler,\n  usePlateEditorState,\n} from '@udecode/plate-core';\nimport { BlockToolbarButton, ToolbarButtonProps } from '@udecode/plate-toolbar';\n\nexport const CodeBlockToolbarButton = ({\n  options,\n  ...props\n}: ToolbarButtonProps & {\n  options?: CodeBlockInsertOptions;\n}) => {\n  const editor = usePlateEditorState()!;\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <BlockToolbarButton\n      type={getPluginType(editor, ELEMENT_CODE_BLOCK)}\n      onMouseDown={getPreventDefaultHandler(insertEmptyCodeBlock, editor, {\n        insertNodesOptions: { select: true },\n        ...options,\n      })}\n      {...props}\n    />\n  );\n};\n"],"names":["getCodeBlockElementStyles","props","createStyles","prefixClassNames","root","css","CodeBlockSelectElement","lang","onChange","value","setValue","React","useState","editor","useEditorRef","syntaxPopularFirst","getPluginOptions","ELEMENT_CODE_BLOCK","float","e","stopPropagation","target","Object","entries","CODE_BLOCK_LANGUAGES_POPULAR","map","key","val","CODE_BLOCK_LANGUAGES","CodeBlockElement","attributes","children","nodeProps","element","rootProps","getRootProps","syntax","codeClassName","className","path","ReactEditor","findPath","setNodes","at","getCodeLineElementStyles","CodeLineElement","CodeBlockToolbarButton","options","usePlateEditorState","BlockToolbarButton","getPluginType","getPreventDefaultHandler","insertEmptyCodeBlock","insertNodesOptions","select"],"mappings":"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"}
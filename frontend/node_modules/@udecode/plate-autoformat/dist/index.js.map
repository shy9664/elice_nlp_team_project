{"version":3,"file":"index.js","sources":["../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../src/utils/getMatchRange.ts","../src/transforms/autoformatBlock.ts","../src/utils/isPreviousCharacterEmpty.ts","../src/utils/getMatchPoints.ts","../src/transforms/autoformatMark.ts","../src/transforms/autoformatText.ts","../src/withAutoformat.ts","../src/createAutoformatPlugin.ts","../src/rules/autoformatArrow.ts","../src/rules/autoformatLegal.ts","../src/rules/autoformatPunctuation.ts","../src/rules/autoformatSmartQuotes.ts","../src/rules/math/autoformatComparison.ts","../src/rules/math/autoformatEquality.ts","../src/rules/math/autoformatFraction.ts","../src/rules/math/autoformatOperation.ts","../src/rules/math/autoformatSubscript.ts","../src/rules/math/autoformatSuperscript.ts","../src/rules/math/autoformatMath.ts"],"sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import castArray from 'lodash/castArray';\nimport { AutoformatRule, MatchRange } from '../types';\n\nexport const getMatchRange = ({\n  match,\n  trigger,\n}: {\n  match: string | MatchRange;\n  trigger: AutoformatRule['trigger'];\n}) => {\n  let start: string;\n  let end: string;\n\n  if (typeof match === 'object') {\n    start = match.start;\n    end = match.end;\n  } else {\n    start = match;\n    end = start.split('').reverse().join('');\n  }\n\n  const triggers: string[] = trigger ? castArray(trigger) : [end.slice(-1)];\n\n  end = trigger ? end : end.slice(0, -1);\n\n  return {\n    start,\n    end,\n    triggers,\n  };\n};\n","import {\n  ELEMENT_DEFAULT,\n  getRangeBefore,\n  getRangeFromBlockStart,\n  getText,\n  setNodes,\n  someNode,\n  TEditor,\n  TElement,\n} from '@udecode/plate-core';\nimport castArray from 'lodash/castArray';\nimport { Editor, Range, Transforms } from 'slate';\nimport { AutoformatBlockRule } from '../types';\nimport { getMatchRange } from '../utils/getMatchRange';\n\nexport interface AutoformatBlockOptions extends AutoformatBlockRule {\n  text: string;\n}\n\nexport const autoformatBlock = (\n  editor: TEditor,\n  {\n    text,\n    trigger,\n    match: _match,\n    type = ELEMENT_DEFAULT,\n    allowSameTypeAbove = false,\n    preFormat,\n    format,\n    triggerAtBlockStart = true,\n  }: AutoformatBlockOptions\n) => {\n  const matches = castArray(_match as string | string[]);\n\n  for (const match of matches) {\n    const { end, triggers } = getMatchRange({\n      match: { start: '', end: match },\n      trigger,\n    });\n\n    if (!triggers.includes(text)) continue;\n\n    let matchRange: Range | undefined;\n\n    if (triggerAtBlockStart) {\n      matchRange = getRangeFromBlockStart(editor) as Range;\n\n      // Don't autoformat if there is void nodes.\n      const hasVoidNode = someNode(editor, {\n        at: matchRange,\n        match: (n) => Editor.isVoid(editor, n),\n      });\n      if (hasVoidNode) continue;\n\n      const textFromBlockStart = getText(editor, matchRange);\n\n      if (end !== textFromBlockStart) continue;\n    } else {\n      matchRange = getRangeBefore(editor, editor.selection as Range, {\n        matchString: end,\n      });\n      if (!matchRange) continue;\n    }\n\n    if (!allowSameTypeAbove) {\n      // Don't autoformat if already in a block of the same type.\n      const isBelowSameBlockType = someNode(editor, { match: { type } });\n      if (isBelowSameBlockType) continue;\n    }\n\n    Transforms.delete(editor, { at: matchRange });\n\n    preFormat?.(editor);\n\n    if (!format) {\n      setNodes<TElement>(\n        editor,\n        { type },\n        {\n          match: (n) => Editor.isBlock(editor, n),\n        }\n      );\n    } else {\n      format(editor);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n","import { getRangeBefore, getText, TEditor } from '@udecode/plate-core';\nimport { Location } from 'slate';\n\nexport const isPreviousCharacterEmpty = (editor: TEditor, at: Location) => {\n  const range = getRangeBefore(editor, at);\n  if (range) {\n    const text = getText(editor, range);\n    if (text) {\n      const noWhiteSpaceRegex = new RegExp(`\\\\S+`);\n\n      return !text.match(noWhiteSpaceRegex);\n    }\n  }\n\n  return true;\n};\n","import { getPointBefore, TEditor } from '@udecode/plate-core';\nimport { Point, Range } from 'slate';\nimport { MatchRange } from '../types';\nimport { isPreviousCharacterEmpty } from './isPreviousCharacterEmpty';\n\nexport type GetMatchPointsReturnType =\n  | undefined\n  | {\n      beforeStartMatchPoint: Point | undefined;\n      afterStartMatchPoint: Point | undefined;\n      beforeEndMatchPoint: Point;\n    };\n\nexport const getMatchPoints = (editor: TEditor, { start, end }: MatchRange) => {\n  const selection = editor.selection as Range;\n\n  let beforeEndMatchPoint = selection.anchor;\n  if (end) {\n    beforeEndMatchPoint = getPointBefore(editor, selection, {\n      matchString: end,\n    });\n\n    if (!beforeEndMatchPoint) return;\n  }\n\n  let afterStartMatchPoint: Point | undefined;\n  let beforeStartMatchPoint: Point | undefined;\n\n  if (start) {\n    afterStartMatchPoint = getPointBefore(editor, beforeEndMatchPoint, {\n      matchString: start,\n      skipInvalid: true,\n      afterMatch: true,\n    });\n\n    if (!afterStartMatchPoint) return;\n\n    beforeStartMatchPoint = getPointBefore(editor, beforeEndMatchPoint, {\n      matchString: start,\n      skipInvalid: true,\n    });\n\n    if (!isPreviousCharacterEmpty(editor, beforeStartMatchPoint as Point))\n      return;\n  }\n\n  return {\n    afterStartMatchPoint,\n    beforeStartMatchPoint,\n    beforeEndMatchPoint,\n  };\n};\n","import { getText, removeMark, TEditor } from '@udecode/plate-core';\nimport castArray from 'lodash/castArray';\nimport { Point, Range, Transforms } from 'slate';\nimport { AutoformatMarkRule } from '../types';\nimport { getMatchPoints } from '../utils/getMatchPoints';\nimport { getMatchRange } from '../utils/getMatchRange';\n\nexport interface AutoformatMarkOptions extends AutoformatMarkRule {\n  text: string;\n}\n\nexport const autoformatMark = (\n  editor: TEditor,\n  { type, text, trigger, match: _match, ignoreTrim }: AutoformatMarkOptions\n) => {\n  if (!type) return false;\n\n  const selection = editor.selection as Range;\n  const matches = castArray(_match);\n\n  for (const match of matches) {\n    const { start, end, triggers } = getMatchRange({\n      match,\n      trigger,\n    });\n\n    if (!triggers.includes(text)) continue;\n\n    const matched = getMatchPoints(editor, { start, end });\n    if (!matched) continue;\n\n    const {\n      afterStartMatchPoint,\n      beforeEndMatchPoint,\n      beforeStartMatchPoint,\n    } = matched;\n\n    const matchRange = {\n      anchor: afterStartMatchPoint,\n      focus: beforeEndMatchPoint,\n    } as Range;\n\n    if (!ignoreTrim) {\n      const matchText = getText(editor, matchRange);\n      if (matchText.trim() !== matchText) continue;\n    }\n\n    // delete end match\n    if (end) {\n      Transforms.delete(editor, {\n        at: {\n          anchor: beforeEndMatchPoint,\n          focus: selection.anchor,\n        },\n      });\n    }\n\n    const marks = castArray(type);\n\n    // add mark to the text between the matches\n    Transforms.select(editor, matchRange as Range);\n    marks.forEach((mark) => {\n      editor.addMark(mark, true);\n    });\n    Transforms.collapse(editor, { edge: 'end' });\n    removeMark(editor, { key: marks, shouldChange: false });\n\n    Transforms.delete(editor, {\n      at: {\n        anchor: beforeStartMatchPoint as Point,\n        focus: afterStartMatchPoint as Point,\n      },\n    });\n\n    return true;\n  }\n\n  return false;\n};\n","import { TEditor } from '@udecode/plate-core';\nimport castArray from 'lodash/castArray';\nimport { Point, Range, Transforms } from 'slate';\nimport { AutoformatTextRule } from '../types';\nimport { getMatchPoints } from '../utils/getMatchPoints';\nimport { getMatchRange } from '../utils/getMatchRange';\n\nexport interface AutoformatTextOptions extends AutoformatTextRule {\n  text: string;\n}\n\nexport const autoformatText = (\n  editor: TEditor,\n  { text, match: _match, trigger, format }: AutoformatTextOptions\n) => {\n  const selection = editor.selection as Range;\n  const matches = castArray(_match);\n\n  // dup\n  for (const match of matches) {\n    const { start, end, triggers } = getMatchRange({\n      match: Array.isArray(format)\n        ? match\n        : {\n            start: '',\n            end: match,\n          },\n      trigger,\n    });\n\n    if (!triggers.includes(text)) continue;\n\n    const matched = getMatchPoints(editor, { start, end });\n    if (!matched) continue;\n\n    const {\n      afterStartMatchPoint,\n      beforeEndMatchPoint,\n      beforeStartMatchPoint,\n    } = matched;\n\n    if (end) {\n      Transforms.delete(editor, {\n        at: {\n          anchor: beforeEndMatchPoint,\n          focus: selection.anchor,\n        },\n      });\n    }\n\n    if (typeof format === 'function') {\n      format(editor, matched);\n    } else {\n      const formatEnd = Array.isArray(format) ? format[1] : format;\n      editor.insertText(formatEnd);\n\n      if (beforeStartMatchPoint) {\n        const formatStart = Array.isArray(format) ? format[0] : format;\n\n        Transforms.delete(editor, {\n          at: {\n            anchor: beforeStartMatchPoint as Point,\n            focus: afterStartMatchPoint as Point,\n          },\n        });\n\n        Transforms.insertText(editor, formatStart, {\n          at: beforeStartMatchPoint,\n        });\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n","import { isCollapsed, WithOverride } from '@udecode/plate-core';\nimport { autoformatBlock } from './transforms/autoformatBlock';\nimport { autoformatMark } from './transforms/autoformatMark';\nimport { autoformatText } from './transforms/autoformatText';\nimport { AutoformatPlugin } from './types';\n\n/**\n * Enables support for autoformatting actions.\n * Once a match rule is validated, it does not check the following rules.\n */\nexport const withAutoformat: WithOverride<{}, AutoformatPlugin> = (\n  editor,\n  { options: { rules } }\n) => {\n  const { insertText } = editor;\n\n  editor.insertText = (text) => {\n    if (!isCollapsed(editor.selection)) return insertText(text);\n\n    for (const rule of rules!) {\n      const { mode = 'text', insertTrigger, query } = rule;\n\n      if (query && !query(editor, { ...rule, text })) continue;\n\n      const autoformatter: Record<typeof mode, Function> = {\n        block: autoformatBlock,\n        mark: autoformatMark,\n        text: autoformatText,\n      };\n\n      if (\n        autoformatter[mode]?.(editor, {\n          ...(rule as any),\n          text,\n        })\n      ) {\n        return insertTrigger && insertText(text);\n      }\n    }\n\n    insertText(text);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-core';\nimport { AutoformatPlugin } from './types';\nimport { withAutoformat } from './withAutoformat';\n\nexport const KEY_AUTOFORMAT = 'autoformat';\n\n/**\n * @see {@link withAutoformat}\n */\nexport const createAutoformatPlugin = createPluginFactory<AutoformatPlugin>({\n  key: KEY_AUTOFORMAT,\n  withOverrides: withAutoformat,\n  options: {\n    rules: [],\n  },\n});\n","import { AutoformatRule } from '../types';\n\nexport const autoformatArrow: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '->',\n    format: '→',\n  },\n  {\n    mode: 'text',\n    match: '<-',\n    format: '←',\n  },\n  {\n    mode: 'text',\n    match: '=>',\n    format: '⇒',\n  },\n  {\n    mode: 'text',\n    match: ['<=', '≤='],\n    format: '⇐',\n  },\n];\n","import { AutoformatRule } from '../types';\n\nexport const autoformatLegal: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: ['(tm)', '(TM)'],\n    format: '™',\n  },\n  {\n    mode: 'text',\n    match: ['(r)', '(R)'],\n    format: '®',\n  },\n\n  {\n    mode: 'text',\n    match: ['(c)', '(C)'],\n    format: '©',\n  },\n];\n\nexport const autoformatLegalHtml: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '&trade;',\n    format: '™',\n  },\n  {\n    mode: 'text',\n    match: '&reg;',\n    format: '®',\n  },\n  {\n    mode: 'text',\n    match: '&copy;',\n    format: '©',\n  },\n  {\n    mode: 'text',\n    match: '&sect;',\n    format: '§',\n  },\n];\n","import { AutoformatRule } from '../types';\n\nexport const autoformatPunctuation: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '--',\n    format: '\\u2014',\n  },\n  {\n    mode: 'text',\n    match: '...',\n    format: '…',\n  },\n  {\n    mode: 'text',\n    match: '>>',\n    format: '»',\n  },\n  {\n    mode: 'text',\n    match: '<<',\n    format: '«',\n  },\n];\n","import { AutoformatRule } from '../types';\n\nexport const autoformatSmartQuotes: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '\"',\n    format: ['“', '”'],\n  },\n  {\n    mode: 'text',\n    match: \"'\",\n    format: ['‘', '’'],\n  },\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatComparison: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '!>',\n    format: '≯',\n  },\n  {\n    mode: 'text',\n    match: '!<',\n    format: '≮',\n  },\n  {\n    mode: 'text',\n    match: '>=',\n    format: '≥',\n  },\n  {\n    mode: 'text',\n    match: '<=',\n    format: '≤',\n  },\n  {\n    mode: 'text',\n    match: '!>=',\n    format: '≱',\n  },\n  {\n    mode: 'text',\n    match: '!<=',\n    format: '≰',\n  },\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatEquality: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '!=',\n    format: '≠',\n  },\n  {\n    mode: 'text',\n    match: '==',\n    format: '≡',\n  },\n  {\n    mode: 'text',\n    match: ['!==', '≠='],\n    format: '≢',\n  },\n  {\n    mode: 'text',\n    match: '~=',\n    format: '≈',\n  },\n  {\n    mode: 'text',\n    match: '!~=',\n    format: '≉',\n  },\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatFraction: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '1/2',\n    format: '½',\n  },\n  {\n    mode: 'text',\n    match: '1/3',\n    format: '⅓',\n  },\n  {\n    mode: 'text',\n    match: '1/4',\n    format: '¼',\n  },\n  {\n    mode: 'text',\n    match: '1/5',\n    format: '⅕',\n  },\n  {\n    mode: 'text',\n    match: '1/6',\n    format: '⅙',\n  },\n  {\n    mode: 'text',\n    match: '1/7',\n    format: '⅐',\n  },\n  {\n    mode: 'text',\n    match: '1/8',\n    format: '⅛',\n  },\n  {\n    mode: 'text',\n    match: '1/9',\n    format: '⅑',\n  },\n  {\n    mode: 'text',\n    match: '1/10',\n    format: '⅒',\n  },\n  {\n    mode: 'text',\n    match: '2/3',\n    format: '⅔',\n  },\n  {\n    mode: 'text',\n    match: '2/5',\n    format: '⅖',\n  },\n  {\n    mode: 'text',\n    match: '3/4',\n    format: '¾',\n  },\n  {\n    mode: 'text',\n    match: '3/5',\n    format: '⅗',\n  },\n  {\n    mode: 'text',\n    match: '3/8',\n    format: '⅜',\n  },\n  {\n    mode: 'text',\n    match: '4/5',\n    format: '⅘',\n  },\n  {\n    mode: 'text',\n    match: '5/6',\n    format: '⅚',\n  },\n  {\n    mode: 'text',\n    match: '5/8',\n    format: '⅝',\n  },\n  {\n    mode: 'text',\n    match: '7/8',\n    format: '⅞',\n  },\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatDivision: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '//',\n    format: '÷',\n  },\n];\n\nexport const autoformatOperation: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '+-',\n    format: '±',\n  },\n  {\n    mode: 'text',\n    match: '%%',\n    format: '‰',\n  },\n  {\n    mode: 'text',\n    match: ['%%%', '‰%'],\n    format: '‱',\n  },\n  ...autoformatDivision,\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatSubscriptNumbers: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '~0',\n    format: '₀',\n  },\n  {\n    mode: 'text',\n    match: '~1',\n    format: '₁',\n  },\n  {\n    mode: 'text',\n    match: '~2',\n    format: '₂',\n  },\n  {\n    mode: 'text',\n    match: '~3',\n    format: '₃',\n  },\n  {\n    mode: 'text',\n    match: '~4',\n    format: '₄',\n  },\n  {\n    mode: 'text',\n    match: '~5',\n    format: '₅',\n  },\n  {\n    mode: 'text',\n    match: '~6',\n    format: '₆',\n  },\n  {\n    mode: 'text',\n    match: '~7',\n    format: '₇',\n  },\n  {\n    mode: 'text',\n    match: '~8',\n    format: '₈',\n  },\n  {\n    mode: 'text',\n    match: '~9',\n    format: '₉',\n  },\n];\n\nexport const autoformatSubscriptSymbols: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '~+',\n    format: '₊',\n  },\n  {\n    mode: 'text',\n    match: '~-',\n    format: '₋',\n  },\n];\n","import { AutoformatRule } from '../../types';\n\nexport const autoformatSuperscriptNumbers: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '^0',\n    format: '⁰',\n  },\n  {\n    mode: 'text',\n    match: '^1',\n    format: '¹',\n  },\n  {\n    mode: 'text',\n    match: '^2',\n    format: '²',\n  },\n  {\n    mode: 'text',\n    match: '^3',\n    format: '³',\n  },\n  {\n    mode: 'text',\n    match: '^4',\n    format: '⁴',\n  },\n  {\n    mode: 'text',\n    match: '^5',\n    format: '⁵',\n  },\n  {\n    mode: 'text',\n    match: '^6',\n    format: '⁶',\n  },\n  {\n    mode: 'text',\n    match: '^7',\n    format: '⁷',\n  },\n  {\n    mode: 'text',\n    match: '^8',\n    format: '⁸',\n  },\n  {\n    mode: 'text',\n    match: '^9',\n    format: '⁹',\n  },\n];\n\nexport const autoformatSuperscriptSymbols: AutoformatRule[] = [\n  {\n    mode: 'text',\n    match: '^o',\n    format: '°',\n  },\n  {\n    mode: 'text',\n    match: '^+',\n    format: '⁺',\n  },\n  {\n    mode: 'text',\n    match: '^-',\n    format: '⁻',\n  },\n];\n","import { autoformatComparison } from './autoformatComparison';\nimport { autoformatEquality } from './autoformatEquality';\nimport { autoformatFraction } from './autoformatFraction';\nimport { autoformatOperation } from './autoformatOperation';\nimport {\n  autoformatSubscriptNumbers,\n  autoformatSubscriptSymbols,\n} from './autoformatSubscript';\nimport {\n  autoformatSuperscriptNumbers,\n  autoformatSuperscriptSymbols,\n} from './autoformatSuperscript';\n\nexport const autoformatMath = [\n  ...autoformatComparison,\n  ...autoformatEquality,\n  ...autoformatOperation,\n  ...autoformatFraction,\n  ...autoformatSuperscriptSymbols,\n  ...autoformatSubscriptSymbols,\n  ...autoformatSuperscriptNumbers,\n  ...autoformatSubscriptNumbers,\n];\n"],"names":["isArray","getMatchRange","match","trigger","start","end","split","reverse","join","triggers","castArray","slice","autoformatBlock","editor","text","_match","type","ELEMENT_DEFAULT","allowSameTypeAbove","preFormat","format","triggerAtBlockStart","matches","includes","matchRange","getRangeFromBlockStart","hasVoidNode","someNode","at","n","Editor","isVoid","textFromBlockStart","getText","getRangeBefore","selection","matchString","isBelowSameBlockType","Transforms","delete","setNodes","isBlock","isPreviousCharacterEmpty","range","noWhiteSpaceRegex","RegExp","getMatchPoints","beforeEndMatchPoint","anchor","getPointBefore","afterStartMatchPoint","beforeStartMatchPoint","skipInvalid","afterMatch","autoformatMark","ignoreTrim","matched","focus","matchText","trim","marks","select","forEach","mark","addMark","collapse","edge","removeMark","key","shouldChange","autoformatText","Array","formatEnd","insertText","formatStart","withAutoformat","options","rules","isCollapsed","rule","mode","insertTrigger","query","autoformatter","block","KEY_AUTOFORMAT","createAutoformatPlugin","createPluginFactory","withOverrides","autoformatArrow","autoformatLegal","autoformatLegalHtml","autoformatPunctuation","autoformatSmartQuotes","autoformatComparison","autoformatEquality","autoformatFraction","autoformatDivision","autoformatOperation","autoformatSubscriptNumbers","autoformatSubscriptSymbols","autoformatSuperscriptNumbers","autoformatSuperscriptSymbols","autoformatMath"],"mappings":"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"}
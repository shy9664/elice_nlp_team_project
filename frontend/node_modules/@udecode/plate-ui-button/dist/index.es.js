import { createStyles } from '@udecode/plate-styled-components';
import _styled, { css } from 'styled-components';
import React, { forwardRef } from 'react';
import { useEditorRef, findNodePath } from '@udecode/plate-core';
import { Transforms } from 'slate';

const getButtonStyles = props => {
  const {
    px,
    py,
    size
  } = props;
  return createStyles({
    prefixClassNames: 'Button',
    ...props
  }, {
    root: [{
      "position": "relative",
      "display": "inline-flex",
      "justifyContent": "center",
      "alignItems": "center",
      "textAlign": "center",
      "maxWidth": "100%",
      "padding": "0px"
    }, {
      "borderWidth": "0px",
      "fontWeight": "500",
      "cursor": "pointer"
    }, {
      "--tw-bg-opacity": "1",
      "backgroundColor": "rgba(255, 255, 255, var(--tw-bg-opacity))",
      ":hover": {
        "--tw-bg-opacity": "1",
        "backgroundColor": "rgba(243, 244, 246, var(--tw-bg-opacity))"
      },
      ":active": {
        "--tw-bg-opacity": "1",
        "backgroundColor": "rgba(229, 231, 235, var(--tw-bg-opacity))"
      }
    }, !size ? {
      "paddingLeft": "0.625rem",
      "paddingRight": "0.625rem",
      "paddingTop": "0.25rem",
      "paddingBottom": "0.25rem"
    } : {
      width: size,
      height: size
    }, px && {
      paddingLeft: px,
      paddingRight: px
    }, py && {
      paddingTop: py,
      paddingBottom: py
    }, css(["font-family:inherit;font-size:14px;border-radius:3px;"])]
  });
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const Button = ({
  disabled,
  ...props
}) => {
  const {
    root
  } = getButtonStyles(props);
  return /*#__PURE__*/React.createElement(_StyledButton, _extends({
    className: root.className,
    "aria-disabled": disabled || undefined,
    type: "button",
    disabled: disabled
  }, props, {
    $_css: root.css
  }));
};

var _StyledButton = _styled("button").withConfig({
  displayName: "Button___StyledButton",
  componentId: "sc-1k4fo9r-0"
})(["", ""], p => p.$_css);

const Icon = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    iconVerticalAlign,
    size,
    title,
    ...otherProps
  } = props;
  const iconProps = {
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    ...otherProps
  };
  return /*#__PURE__*/React.createElement("svg", _extends({}, iconProps, {
    ref: ref
  }), title && /*#__PURE__*/React.createElement("title", {
    key: "icon-title"
  }, title), children);
});
const StyledIcon = _styled(Icon).withConfig({
  displayName: "StyledIcon",
  componentId: "sc-1lmwuuu-0"
})(["display:inline-block;vertical-align:", ";overflow:hidden;height:100%;"], props => props.iconVerticalAlign);

const DeleteIcon = props => /*#__PURE__*/React.createElement(StyledIcon, _extends({
  viewBox: "0 0 24 24",
  fill: "currentColor"
}, props), /*#__PURE__*/React.createElement("title", null, "Delete icon"), /*#__PURE__*/React.createElement("path", {
  fill: "none",
  d: "M0 0h24v24H0z"
}), /*#__PURE__*/React.createElement("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
}));

const RemoveNodeButton = ({
  element,
  ...props
}) => {
  const editor = useEditorRef();
  return /*#__PURE__*/React.createElement(Button, _extends({
    size: 24,
    py: 4,
    onClick: () => {
      const path = findNodePath(editor, element);
      Transforms.removeNodes(editor, {
        at: path
      });
    }
  }, props), /*#__PURE__*/React.createElement(DeleteIcon, null));
};

const ChevronDownIcon = props => /*#__PURE__*/React.createElement(_StyledStyledIcon, _extends({
  viewBox: "0 0 24 24",
  focusable: "false",
  "aria-hidden": "true"
}, props), /*#__PURE__*/React.createElement("path", {
  fill: "currentColor",
  d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
}));

var _StyledStyledIcon = _styled(StyledIcon).withConfig({
  displayName: "ChevronDownIcon___StyledStyledIcon",
  componentId: "sc-1mognml-0"
})({
  "display": "inline",
  "textAlign": "center",
  "userSelect": "none",
  "overflow": "hidden",
  "pointerEvents": "none",
  "maxWidth": "100%",
  "maxHeight": "100%",
  "height": "100%",
  "verticalAlign": "middle"
});

export { Button, ChevronDownIcon, DeleteIcon, RemoveNodeButton, StyledIcon, getButtonStyles };
//# sourceMappingURL=index.es.js.map

{"version":3,"file":"index.js","sources":["../src/createAlignPlugin.ts","../src/transforms/setAlign.ts"],"sourcesContent":["import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\n\nexport const KEY_ALIGN = 'align';\n\n/**\n * Creates a plugin that adds alignment functionality to the editor.\n */\nexport const createAlignPlugin = createPluginFactory({\n  key: KEY_ALIGN,\n  then: (editor) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_ALIGN,\n        defaultNodeValue: 'left',\n        styleKey: 'textAlign',\n        validNodeValues: ['left', 'center', 'right', 'justify'],\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n  }),\n});\n","import {\n  getPluginInjectProps,\n  PlateEditor,\n  PlatePluginKey,\n  setNodes,\n  SetNodesOptions,\n  TNodeMatch,\n  unsetNodes,\n} from '@udecode/plate-core';\nimport { Editor } from 'slate';\nimport { KEY_ALIGN } from '../createAlignPlugin';\nimport { Alignment } from '../types';\n\nexport const setAlign = (\n  editor: PlateEditor,\n  {\n    key = KEY_ALIGN,\n    value,\n    setNodesOptions,\n  }: { value: Alignment; setNodesOptions?: SetNodesOptions } & PlatePluginKey\n) => {\n  const { validTypes, defaultNodeValue, nodeKey } = getPluginInjectProps(\n    editor,\n    key\n  );\n\n  const match: TNodeMatch = (n) =>\n    Editor.isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setNodes(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"],"names":["KEY_ALIGN","createAlignPlugin","createPluginFactory","key","then","editor","inject","props","nodeKey","defaultNodeValue","styleKey","validNodeValues","validTypes","getPluginType","ELEMENT_DEFAULT","setAlign","value","setNodesOptions","getPluginInjectProps","match","n","Editor","isBlock","includes","type","unsetNodes","setNodes"],"mappings":";;;;;;;MAMaA,SAAS,GAAG;AAEzB;AACA;AACA;;MACaC,iBAAiB,GAAGC,6BAAmB,CAAC;AACnDC,EAAAA,GAAG,EAAEH,SAD8C;AAEnDI,EAAAA,IAAI,EAAGC,MAAD,KAAa;AACjBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAER,SADJ;AAELS,QAAAA,gBAAgB,EAAE,MAFb;AAGLC,QAAAA,QAAQ,EAAE,WAHL;AAILC,QAAAA,eAAe,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,SAA5B,CAJZ;AAKLC,QAAAA,UAAU,EAAE,CAACC,uBAAa,CAACR,MAAD,EAASS,yBAAT,CAAd;AALP;AADD;AADS,GAAb;AAF6C,CAAD;;MCEvCC,QAAQ,GAAG,CACtBV,MADsB,EAEtB;AACEF,EAAAA,GAAG,GAAGH,SADR;AAEEgB,EAAAA,KAFF;AAGEC,EAAAA;AAHF,CAFsB,KAOnB;AACH,QAAM;AAAEL,IAAAA,UAAF;AAAcH,IAAAA,gBAAd;AAAgCD,IAAAA;AAAhC,MAA4CU,8BAAoB,CACpEb,MADoE,EAEpEF,GAFoE,CAAtE;;AAKA,QAAMgB,KAAiB,GAAIC,CAAD,IACxBC,YAAM,CAACC,OAAP,CAAejB,MAAf,EAAuBe,CAAvB,KAA6B,CAAC,CAACR,UAA/B,IAA6CA,UAAU,CAACW,QAAX,CAAoBH,CAAC,CAACI,IAAtB,CAD/C;;AAGA,MAAIR,KAAK,KAAKP,gBAAd,EAAgC;AAC9BgB,IAAAA,oBAAU,CAACpB,MAAD,EAASG,OAAT,EAAmB;AAC3BW,MAAAA,KAD2B;AAE3B,SAAGF;AAFwB,KAAnB,CAAV;AAID,GALD,MAKO;AACLS,IAAAA,kBAAQ,CACNrB,MADM,EAEN;AAAE,OAACG,OAAD,GAAYQ;AAAd,KAFM,EAGN;AACEG,MAAAA,KADF;AAEE,SAAGF;AAFL,KAHM,CAAR;AAQD;AACF;;;;;;"}